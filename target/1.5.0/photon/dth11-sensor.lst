
/Users/alvarosaburido/as/electronics/electronics-lab/Particle/dth11-sensor/target/1.5.0/photon/dth11-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000044a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a44c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  20000000  080a44c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000600  20000094  20000094  00040094  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4558  080a4558  00034558  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4580  080a4580  00034580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ddc3b  00000000  00000000  00034584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014138  00000000  00000000  001121bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014fce  00000000  00000000  001262f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002348  00000000  00000000  0013b2c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000039e8  00000000  00000000  0013d60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002dfd5  00000000  00000000  00140ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030a5a  00000000  00000000  0016efca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b3d4c  00000000  00000000  0019fa24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c0ac  00000000  00000000  00253770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fc27 	bl	80a3884 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fc2c 	bl	80a389a <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a44c4 	.word	0x080a44c4
 80a0050:	20000094 	.word	0x20000094
 80a0054:	20000094 	.word	0x20000094
 80a0058:	20000694 	.word	0x20000694
 80a005c:	20000694 	.word	0x20000694

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f9f1 	bl	80a2448 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a447c 	.word	0x080a447c
 80a0088:	080a44c0 	.word	0x080a44c0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 be2a 	b.w	80a0ce4 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fe71 	bl	80a0d78 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b997 	b.w	80a23cc <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 ba29 	b.w	80a14f4 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 ba2f 	b.w	80a1504 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
 80a00b8:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
 80a00ba:	f002 f893 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a00be:	215b      	movs	r1, #91	; 0x5b
 80a00c0:	f001 fb8a 	bl	80a17d8 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
 80a00c4:	f002 f88e 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a00c8:	4604      	mov	r4, r0
 80a00ca:	f000 ffd5 	bl	80a1078 <_Z11BlynkMillisv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a00ce:	220a      	movs	r2, #10
 80a00d0:	4601      	mov	r1, r0
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	f001 fb99 	bl	80a180a <_ZN5Print11printNumberEmh>
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a00d8:	f002 f884 	bl	80a21e4 <_Z16_fetch_usbserialv>
        }
 80a00dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
 80a00e0:	4901      	ldr	r1, [pc, #4]	; (80a00e8 <_ZL14BLYNK_LOG_TIMEv+0x30>)
 80a00e2:	f001 bb75 	b.w	80a17d0 <_ZN5Print5printEPKc>
 80a00e6:	bf00      	nop
 80a00e8:	080a3ad6 	.word	0x080a3ad6

080a00ec <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a00ec:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00ee:	f001 f803 	bl	80a10f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00f2:	4b03      	ldr	r3, [pc, #12]	; (80a0100 <_ZN10CloudClass7processEv+0x14>)
 80a00f4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00fa:	f001 b99b 	b.w	80a1434 <spark_process>
 80a00fe:	bf00      	nop
 80a0100:	200005a8 	.word	0x200005a8

080a0104 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0104:	b538      	push	{r3, r4, r5, lr}
 80a0106:	4b0b      	ldr	r3, [pc, #44]	; (80a0134 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0108:	6984      	ldr	r4, [r0, #24]
 80a010a:	4605      	mov	r5, r0
 80a010c:	6003      	str	r3, [r0, #0]
 80a010e:	b17c      	cbz	r4, 80a0130 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0110:	6863      	ldr	r3, [r4, #4]
 80a0112:	3b01      	subs	r3, #1
 80a0114:	6063      	str	r3, [r4, #4]
 80a0116:	b95b      	cbnz	r3, 80a0130 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0118:	6823      	ldr	r3, [r4, #0]
 80a011a:	4620      	mov	r0, r4
 80a011c:	689b      	ldr	r3, [r3, #8]
 80a011e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0120:	68a3      	ldr	r3, [r4, #8]
 80a0122:	3b01      	subs	r3, #1
 80a0124:	60a3      	str	r3, [r4, #8]
 80a0126:	b91b      	cbnz	r3, 80a0130 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0128:	6823      	ldr	r3, [r4, #0]
 80a012a:	4620      	mov	r0, r4
 80a012c:	68db      	ldr	r3, [r3, #12]
 80a012e:	4798      	blx	r3
 80a0130:	4628      	mov	r0, r5
 80a0132:	bd38      	pop	{r3, r4, r5, pc}
 80a0134:	080a41f8 	.word	0x080a41f8

080a0138 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
 80a0138:	b510      	push	{r4, lr}
 80a013a:	4604      	mov	r4, r0
 80a013c:	f7ff ffe2 	bl	80a0104 <_ZN9TCPClientD1Ev>
 80a0140:	4620      	mov	r0, r4
 80a0142:	bd10      	pop	{r4, pc}

080a0144 <_ZN9TCPClientD0Ev>:
 80a0144:	b510      	push	{r4, lr}
 80a0146:	4604      	mov	r4, r0
 80a0148:	f7ff ffdc 	bl	80a0104 <_ZN9TCPClientD1Ev>
 80a014c:	4620      	mov	r0, r4
 80a014e:	211c      	movs	r1, #28
 80a0150:	f002 fabf 	bl	80a26d2 <_ZdlPvj>
 80a0154:	4620      	mov	r0, r4
 80a0156:	bd10      	pop	{r4, pc}

080a0158 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0158:	6803      	ldr	r3, [r0, #0]
 80a015a:	b12b      	cbz	r3, 80a0168 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a015c:	6842      	ldr	r2, [r0, #4]
 80a015e:	4293      	cmp	r3, r2
 80a0160:	d202      	bcs.n	80a0168 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0162:	4618      	mov	r0, r3
 80a0164:	f003 bb78 	b.w	80a3858 <atoi>
 80a0168:	2000      	movs	r0, #0
 80a016a:	4770      	bx	lr

080a016c <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a016c:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a016e:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a0170:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0172:	b145      	cbz	r5, 80a0186 <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a0174:	6843      	ldr	r3, [r0, #4]
 80a0176:	429d      	cmp	r5, r3
 80a0178:	d205      	bcs.n	80a0186 <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
 80a017a:	4628      	mov	r0, r5
 80a017c:	f003 fbc8 	bl	80a3910 <strlen>
 80a0180:	3001      	adds	r0, #1
 80a0182:	4405      	add	r5, r0
 80a0184:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
 80a0186:	4620      	mov	r0, r4
 80a0188:	bd38      	pop	{r3, r4, r5, pc}

080a018a <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
 80a018a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a018c:	4604      	mov	r4, r0
    if (str == NULL) {
 80a018e:	460f      	mov	r7, r1
 80a0190:	6846      	ldr	r6, [r0, #4]
 80a0192:	b921      	cbnz	r1, 80a019e <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
 80a0194:	6803      	ldr	r3, [r0, #0]
 80a0196:	1c72      	adds	r2, r6, #1
 80a0198:	6042      	str	r2, [r0, #4]
 80a019a:	5599      	strb	r1, [r3, r6]
        return;
 80a019c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
 80a019e:	4608      	mov	r0, r1
 80a01a0:	f003 fbb6 	bl	80a3910 <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
 80a01a4:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a01a6:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
 80a01a8:	19aa      	adds	r2, r5, r6
 80a01aa:	429a      	cmp	r2, r3
 80a01ac:	d808      	bhi.n	80a01c0 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
 80a01ae:	6820      	ldr	r0, [r4, #0]
 80a01b0:	462a      	mov	r2, r5
 80a01b2:	4639      	mov	r1, r7
 80a01b4:	4430      	add	r0, r6
 80a01b6:	f003 fb65 	bl	80a3884 <memcpy>
    len += l;
 80a01ba:	6863      	ldr	r3, [r4, #4]
 80a01bc:	441d      	add	r5, r3
 80a01be:	6065      	str	r5, [r4, #4]
 80a01c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a01c4 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a01c4:	b570      	push	{r4, r5, r6, lr}
 80a01c6:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a01c8:	6840      	ldr	r0, [r0, #4]
 80a01ca:	68a6      	ldr	r6, [r4, #8]
 80a01cc:	6825      	ldr	r5, [r4, #0]
 80a01ce:	460b      	mov	r3, r1
 80a01d0:	4a04      	ldr	r2, [pc, #16]	; (80a01e4 <_ZN10BlynkParam3addEi+0x20>)
 80a01d2:	1a31      	subs	r1, r6, r0
 80a01d4:	4428      	add	r0, r5
 80a01d6:	f001 f99d 	bl	80a1514 <snprintf>
 80a01da:	6863      	ldr	r3, [r4, #4]
 80a01dc:	3001      	adds	r0, #1
 80a01de:	4418      	add	r0, r3
 80a01e0:	6060      	str	r0, [r4, #4]
 80a01e2:	bd70      	pop	{r4, r5, r6, pc}
 80a01e4:	080a3ad9 	.word	0x080a3ad9

080a01e8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a01e8:	b570      	push	{r4, r5, r6, lr}
 80a01ea:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a01ec:	6840      	ldr	r0, [r0, #4]
 80a01ee:	68a6      	ldr	r6, [r4, #8]
 80a01f0:	6825      	ldr	r5, [r4, #0]
 80a01f2:	460b      	mov	r3, r1
 80a01f4:	4a04      	ldr	r2, [pc, #16]	; (80a0208 <_ZN10BlynkParam3addEl+0x20>)
 80a01f6:	1a31      	subs	r1, r6, r0
 80a01f8:	4428      	add	r0, r5
 80a01fa:	f001 f98b 	bl	80a1514 <snprintf>
 80a01fe:	6863      	ldr	r3, [r4, #4]
 80a0200:	3001      	adds	r0, #1
 80a0202:	4418      	add	r0, r3
 80a0204:	6060      	str	r0, [r4, #4]
 80a0206:	bd70      	pop	{r4, r5, r6, pc}
 80a0208:	080a3adc 	.word	0x080a3adc

080a020c <_Z11printSerialv>:
{
  // This command writes Arduino's uptime in seconds to Virtual Pin (5)
  Blynk.virtualWrite(BLYNK_HUMIDITY_DISPLAY, humidity);
}

void printSerial() {
 80a020c:	b508      	push	{r3, lr}
  Serial.print("Humidity: ");
 80a020e:	f001 ffe9 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0212:	4911      	ldr	r1, [pc, #68]	; (80a0258 <_Z11printSerialv+0x4c>)
 80a0214:	f001 fadc 	bl	80a17d0 <_ZN5Print5printEPKc>
  Serial.print(humidity);
 80a0218:	f001 ffe4 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a021c:	4b0f      	ldr	r3, [pc, #60]	; (80a025c <_Z11printSerialv+0x50>)
 80a021e:	2202      	movs	r2, #2
 80a0220:	6819      	ldr	r1, [r3, #0]
 80a0222:	f001 fbcb 	bl	80a19bc <_ZN5Print5printEfi>
  Serial.print(" %\t");
 80a0226:	f001 ffdd 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a022a:	490d      	ldr	r1, [pc, #52]	; (80a0260 <_Z11printSerialv+0x54>)
 80a022c:	f001 fad0 	bl	80a17d0 <_ZN5Print5printEPKc>
  Serial.print("Temperature: ");
 80a0230:	f001 ffd8 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0234:	490b      	ldr	r1, [pc, #44]	; (80a0264 <_Z11printSerialv+0x58>)
 80a0236:	f001 facb 	bl	80a17d0 <_ZN5Print5printEPKc>
  Serial.print(temp);
 80a023a:	f001 ffd3 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a023e:	4b0a      	ldr	r3, [pc, #40]	; (80a0268 <_Z11printSerialv+0x5c>)
 80a0240:	2202      	movs	r2, #2
 80a0242:	6819      	ldr	r1, [r3, #0]
 80a0244:	f001 fbba 	bl	80a19bc <_ZN5Print5printEfi>
  Serial.print(" *C ");
 80a0248:	f001 ffcc 	bl	80a21e4 <_Z16_fetch_usbserialv>
}
 80a024c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.print(" *C ");
 80a0250:	4906      	ldr	r1, [pc, #24]	; (80a026c <_Z11printSerialv+0x60>)
 80a0252:	f001 babd 	b.w	80a17d0 <_ZN5Print5printEPKc>
 80a0256:	bf00      	nop
 80a0258:	080a3ae0 	.word	0x080a3ae0
 80a025c:	20000098 	.word	0x20000098
 80a0260:	080a3aeb 	.word	0x080a3aeb
 80a0264:	080a3aef 	.word	0x080a3aef
 80a0268:	2000009c 	.word	0x2000009c
 80a026c:	080a3afd 	.word	0x080a3afd

080a0270 <_ZN5Print7printlnItLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
 80a0270:	b538      	push	{r3, r4, r5, lr}
 80a0272:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80a0274:	b922      	cbnz	r2, 80a0280 <_ZN5Print7printlnItLi0EEEjT_i+0x10>
        return write(n);
 80a0276:	6803      	ldr	r3, [r0, #0]
 80a0278:	b2c9      	uxtb	r1, r1
 80a027a:	689b      	ldr	r3, [r3, #8]
 80a027c:	4798      	blx	r3
 80a027e:	e002      	b.n	80a0286 <_ZN5Print7printlnItLi0EEEjT_i+0x16>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0280:	b2d2      	uxtb	r2, r2
 80a0282:	f001 fac2 	bl	80a180a <_ZN5Print11printNumberEmh>
 80a0286:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80a0288:	4628      	mov	r0, r5
 80a028a:	f001 faa8 	bl	80a17de <_ZN5Print7printlnEv>
        return n;
    }
 80a028e:	4420      	add	r0, r4
 80a0290:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0294 <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0294:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
 80a0296:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
 80a0298:	b087      	sub	sp, #28
 80a029a:	4604      	mov	r4, r0
        if (domain) {
 80a029c:	b1ef      	cbz	r7, 80a02da <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
 80a029e:	f7ff ff0b 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a02a2:	f001 ff9f 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a02a6:	4931      	ldr	r1, [pc, #196]	; (80a036c <_ZN22BlynkTransportParticle7connectEv+0xd8>)
 80a02a8:	f001 fa92 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a02ac:	f001 ff9a 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a02b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a02b2:	f001 fa8d 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a02b6:	f001 ff95 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a02ba:	213a      	movs	r1, #58	; 0x3a
 80a02bc:	f001 fa8c 	bl	80a17d8 <_ZN5Print5printEc>
 80a02c0:	f001 ff90 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a02c4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80a02c6:	220a      	movs	r2, #10
 80a02c8:	f7ff ffd2 	bl	80a0270 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(domain, port));
 80a02cc:	2300      	movs	r3, #0
 80a02ce:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a02d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	f001 fe54 	bl	80a1f80 <_ZN9TCPClient7connectEPKctm>
 80a02d8:	e043      	b.n	80a0362 <_ZN22BlynkTransportParticle7connectEv+0xce>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
 80a02da:	f7ff feed 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a02de:	f001 ff81 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a02e2:	4922      	ldr	r1, [pc, #136]	; (80a036c <_ZN22BlynkTransportParticle7connectEv+0xd8>)
 80a02e4:	f001 fa74 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a02e8:	f001 ff7c 	bl	80a21e4 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a02ec:	220a      	movs	r2, #10
 80a02ee:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80a02f2:	f001 fa8a 	bl	80a180a <_ZN5Print11printNumberEmh>
 80a02f6:	f001 ff75 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a02fa:	212e      	movs	r1, #46	; 0x2e
 80a02fc:	f001 fa6c 	bl	80a17d8 <_ZN5Print5printEc>
 80a0300:	f001 ff70 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0304:	220a      	movs	r2, #10
 80a0306:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80a030a:	f001 fa7e 	bl	80a180a <_ZN5Print11printNumberEmh>
 80a030e:	f001 ff69 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0312:	212e      	movs	r1, #46	; 0x2e
 80a0314:	f001 fa60 	bl	80a17d8 <_ZN5Print5printEc>
 80a0318:	f001 ff64 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a031c:	220a      	movs	r2, #10
 80a031e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80a0322:	f001 fa72 	bl	80a180a <_ZN5Print11printNumberEmh>
 80a0326:	f001 ff5d 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a032a:	212e      	movs	r1, #46	; 0x2e
 80a032c:	f001 fa54 	bl	80a17d8 <_ZN5Print5printEc>
 80a0330:	f001 ff58 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0334:	4625      	mov	r5, r4
 80a0336:	4606      	mov	r6, r0
 80a0338:	220a      	movs	r2, #10
 80a033a:	f815 1f20 	ldrb.w	r1, [r5, #32]!
 80a033e:	f001 fa64 	bl	80a180a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80a0342:	4630      	mov	r0, r6
 80a0344:	f001 fa4b 	bl	80a17de <_ZN5Print7printlnEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0348:	4b09      	ldr	r3, [pc, #36]	; (80a0370 <_ZN22BlynkTransportParticle7connectEv+0xdc>)
 80a034a:	ae01      	add	r6, sp, #4
 80a034c:	9300      	str	r3, [sp, #0]
 80a034e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0350:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0352:	682b      	ldr	r3, [r5, #0]
            return (1 == client.connect(addr, port));
 80a0354:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80a0356:	7033      	strb	r3, [r6, #0]
 80a0358:	4669      	mov	r1, sp
 80a035a:	463b      	mov	r3, r7
 80a035c:	4620      	mov	r0, r4
 80a035e:	f001 fcd7 	bl	80a1d10 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0362:	1e43      	subs	r3, r0, #1
 80a0364:	4258      	negs	r0, r3
 80a0366:	4158      	adcs	r0, r3
        }
        return 0;
    }
 80a0368:	b007      	add	sp, #28
 80a036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a036c:	080a3b02 	.word	0x080a3b02
 80a0370:	080a409c 	.word	0x080a409c

080a0374 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a0374:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a0376:	2300      	movs	r3, #0
 80a0378:	7743      	strb	r3, [r0, #29]

    void disconnect() { client.stop(); }
 80a037a:	6800      	ldr	r0, [r0, #0]
 80a037c:	f001 fcae 	bl	80a1cdc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a0380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
 80a0384:	f000 be7e 	b.w	80a1084 <BlynkNoOpCbk>

080a0388 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a038c:	188f      	adds	r7, r1, r2
 80a038e:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a0390:	42b9      	cmp	r1, r7
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0392:	4606      	mov	r6, r0
 80a0394:	460d      	mov	r5, r1
 80a0396:	4690      	mov	r8, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0398:	9105      	str	r1, [sp, #20]
 80a039a:	9706      	str	r7, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a039c:	f080 80f9 	bcs.w	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a03a0:	880b      	ldrh	r3, [r1, #0]
    if (++it >= param.end())
 80a03a2:	a805      	add	r0, sp, #20
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a03a4:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
 80a03a8:	f7ff fee0 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a03ac:	6803      	ldr	r3, [r0, #0]
 80a03ae:	429f      	cmp	r7, r3
 80a03b0:	f240 80ef 	bls.w	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a03b4:	a805      	add	r0, sp, #20
 80a03b6:	f7ff fecf 	bl	80a0158 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a03ba:	f247 2276 	movw	r2, #29302	; 0x7276
 80a03be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a03c2:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
 80a03c4:	4293      	cmp	r3, r2
 80a03c6:	f000 809f 	beq.w	80a0508 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x180>
 80a03ca:	d80d      	bhi.n	80a03e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
 80a03cc:	f247 2261 	movw	r2, #29281	; 0x7261
 80a03d0:	4293      	cmp	r3, r2
 80a03d2:	d065      	beq.n	80a04a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
 80a03d4:	f247 2264 	movw	r2, #29284	; 0x7264
 80a03d8:	4293      	cmp	r3, r2
 80a03da:	d039      	beq.n	80a0450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
 80a03dc:	f646 5270 	movw	r2, #28016	; 0x6d70
 80a03e0:	4293      	cmp	r3, r2
 80a03e2:	f040 80bd 	bne.w	80a0560 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
 80a03e6:	e02f      	b.n	80a0448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
 80a03e8:	f247 7264 	movw	r2, #30564	; 0x7764
 80a03ec:	4293      	cmp	r3, r2
 80a03ee:	d041      	beq.n	80a0474 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
 80a03f0:	f247 7276 	movw	r2, #30582	; 0x7776
 80a03f4:	4293      	cmp	r3, r2
 80a03f6:	f000 8098 	beq.w	80a052a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
 80a03fa:	f247 7261 	movw	r2, #30561	; 0x7761
 80a03fe:	4293      	cmp	r3, r2
 80a0400:	f040 80ae 	bne.w	80a0560 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
 80a0404:	e06d      	b.n	80a04e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15a>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0406:	a805      	add	r0, sp, #20
 80a0408:	f7ff fea6 	bl	80a0158 <_ZNK10BlynkParam8iterator5asIntEv>
 80a040c:	b2c5      	uxtb	r5, r0
            ++it;
 80a040e:	a805      	add	r0, sp, #20
 80a0410:	f7ff feac 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a0414:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
 80a0416:	4960      	ldr	r1, [pc, #384]	; (80a0598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a0418:	4620      	mov	r0, r4
 80a041a:	f003 fa6f 	bl	80a38fc <strcmp>
 80a041e:	4601      	mov	r1, r0
 80a0420:	2800      	cmp	r0, #0
 80a0422:	f000 80b2 	beq.w	80a058a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x202>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0426:	495d      	ldr	r1, [pc, #372]	; (80a059c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a0428:	4620      	mov	r0, r4
 80a042a:	f003 fa67 	bl	80a38fc <strcmp>
 80a042e:	2800      	cmp	r0, #0
 80a0430:	f000 80aa 	beq.w	80a0588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
 80a0434:	495a      	ldr	r1, [pc, #360]	; (80a05a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x218>)
 80a0436:	4620      	mov	r0, r4
 80a0438:	f003 fa60 	bl	80a38fc <strcmp>
 80a043c:	2800      	cmp	r0, #0
 80a043e:	f000 80a3 	beq.w	80a0588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a0442:	a805      	add	r0, sp, #20
 80a0444:	f7ff fe92 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
 80a0448:	9b05      	ldr	r3, [sp, #20]
 80a044a:	429f      	cmp	r7, r3
 80a044c:	d8db      	bhi.n	80a0406 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
 80a044e:	e0a0      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0450:	ab0a      	add	r3, sp, #40	; 0x28
 80a0452:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
 80a0454:	a807      	add	r0, sp, #28
 80a0456:	2310      	movs	r3, #16
 80a0458:	2500      	movs	r5, #0
 80a045a:	4952      	ldr	r1, [pc, #328]	; (80a05a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x21c>)
 80a045c:	9309      	str	r3, [sp, #36]	; 0x24
 80a045e:	9508      	str	r5, [sp, #32]
 80a0460:	f7ff fe93 	bl	80a018a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a0464:	a807      	add	r0, sp, #28
 80a0466:	4621      	mov	r1, r4
 80a0468:	f7ff feac 	bl	80a01c4 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a046c:	4620      	mov	r0, r4
 80a046e:	f002 f863 	bl	80a2538 <digitalRead>
 80a0472:	e026      	b.n	80a04c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13a>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a0474:	a805      	add	r0, sp, #20
 80a0476:	f7ff fe79 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a047a:	6803      	ldr	r3, [r0, #0]
 80a047c:	429f      	cmp	r7, r3
 80a047e:	f240 8088 	bls.w	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a0482:	b2a4      	uxth	r4, r4
 80a0484:	2101      	movs	r1, #1
 80a0486:	4620      	mov	r0, r4
 80a0488:	f002 f82c 	bl	80a24e4 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a048c:	a805      	add	r0, sp, #20
 80a048e:	f7ff fe63 	bl	80a0158 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0492:	1c01      	adds	r1, r0, #0
 80a0494:	bf18      	it	ne
 80a0496:	2101      	movne	r1, #1
 80a0498:	4620      	mov	r0, r4
 80a049a:	f002 f834 	bl	80a2506 <digitalWrite>
    } break;
 80a049e:	e078      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
 80a04a0:	ab0a      	add	r3, sp, #40	; 0x28
 80a04a2:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
 80a04a4:	4940      	ldr	r1, [pc, #256]	; (80a05a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x220>)
 80a04a6:	2310      	movs	r3, #16
 80a04a8:	a807      	add	r0, sp, #28
 80a04aa:	2500      	movs	r5, #0
 80a04ac:	9309      	str	r3, [sp, #36]	; 0x24
 80a04ae:	9508      	str	r5, [sp, #32]
 80a04b0:	f7ff fe6b 	bl	80a018a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
 80a04b4:	a807      	add	r0, sp, #28
 80a04b6:	4621      	mov	r1, r4
 80a04b8:	f7ff fe84 	bl	80a01c4 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a04bc:	4620      	mov	r0, r4
 80a04be:	f002 f84e 	bl	80a255e <analogRead>
 80a04c2:	4601      	mov	r1, r0
 80a04c4:	a807      	add	r0, sp, #28
 80a04c6:	f7ff fe8f 	bl	80a01e8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a04ca:	462a      	mov	r2, r5
 80a04cc:	9b08      	ldr	r3, [sp, #32]
 80a04ce:	9502      	str	r5, [sp, #8]
 80a04d0:	3b01      	subs	r3, #1
 80a04d2:	9300      	str	r3, [sp, #0]
 80a04d4:	9b07      	ldr	r3, [sp, #28]
 80a04d6:	9501      	str	r5, [sp, #4]
 80a04d8:	2114      	movs	r1, #20
 80a04da:	4630      	mov	r0, r6
 80a04dc:	f000 fae0 	bl	80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
 80a04e0:	e057      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a04e2:	a805      	add	r0, sp, #20
 80a04e4:	f7ff fe42 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a04e8:	6803      	ldr	r3, [r0, #0]
 80a04ea:	429f      	cmp	r7, r3
 80a04ec:	d951      	bls.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a04ee:	b2a4      	uxth	r4, r4
 80a04f0:	2101      	movs	r1, #1
 80a04f2:	4620      	mov	r0, r4
 80a04f4:	f001 fff6 	bl	80a24e4 <pinMode>
#endif
        analogWrite(pin, it.asInt());
 80a04f8:	a805      	add	r0, sp, #20
 80a04fa:	f7ff fe2d 	bl	80a0158 <_ZNK10BlynkParam8iterator5asIntEv>
 80a04fe:	4601      	mov	r1, r0
 80a0500:	4620      	mov	r0, r4
 80a0502:	f002 f843 	bl	80a258c <_Z11analogWritetm>
    } break;
 80a0506:	e044      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a0508:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
 80a050a:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a050c:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0510:	f000 fdba 	bl	80a1088 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a0514:	4603      	mov	r3, r0
            handler(req);
 80a0516:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
 80a0518:	b123      	cbz	r3, 80a0524 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
 80a051a:	4a24      	ldr	r2, [pc, #144]	; (80a05ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x224>)
 80a051c:	4293      	cmp	r3, r2
 80a051e:	d001      	beq.n	80a0524 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            handler(req);
 80a0520:	4798      	blx	r3
 80a0522:	e036      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
        } else {
            BlynkWidgetReadDefault(req);
 80a0524:	f000 fdac 	bl	80a1080 <BlynkWidgetRead>
        }
    } break;
 80a0528:	e033      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
    case BLYNK_HW_VW: {
        ++it;
 80a052a:	a805      	add	r0, sp, #20
 80a052c:	f7ff fe1e 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a0530:	9b05      	ldr	r3, [sp, #20]
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0532:	4620      	mov	r0, r4
        }
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
 80a0534:	1b5d      	subs	r5, r3, r5
 80a0536:	ebc5 0508 	rsb	r5, r5, r8
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a053a:	930a      	str	r3, [sp, #40]	; 0x28
 80a053c:	950b      	str	r5, [sp, #44]	; 0x2c
 80a053e:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a0540:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0544:	f000 fdaa 	bl	80a109c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0548:	4603      	mov	r3, r0
            handler(req, param2);
 80a054a:	a90a      	add	r1, sp, #40	; 0x28
 80a054c:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
 80a054e:	b123      	cbz	r3, 80a055a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
 80a0550:	4a17      	ldr	r2, [pc, #92]	; (80a05b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x228>)
 80a0552:	4293      	cmp	r3, r2
 80a0554:	d001      	beq.n	80a055a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
            handler(req, param2);
 80a0556:	4798      	blx	r3
 80a0558:	e01b      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
        } else {
            BlynkWidgetWriteDefault(req, param2);
 80a055a:	f000 fd92 	bl	80a1082 <BlynkWidgetWrite>
        }
    } break;
 80a055e:	e018      	b.n	80a0592 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20a>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
 80a0560:	f7ff fdaa 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a0564:	f001 fe3e 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0568:	4912      	ldr	r1, [pc, #72]	; (80a05b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22c>)
 80a056a:	f001 f931 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a056e:	f001 fe39 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0572:	4629      	mov	r1, r5
 80a0574:	f001 f93f 	bl	80a17f6 <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0578:	2300      	movs	r3, #0
 80a057a:	2102      	movs	r1, #2
 80a057c:	9100      	str	r1, [sp, #0]
 80a057e:	8b72      	ldrh	r2, [r6, #26]
 80a0580:	9302      	str	r3, [sp, #8]
 80a0582:	9301      	str	r3, [sp, #4]
 80a0584:	4619      	mov	r1, r3
 80a0586:	e7a8      	b.n	80a04da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x152>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
 80a0588:	2101      	movs	r1, #1
 80a058a:	4628      	mov	r0, r5
 80a058c:	f001 ffaa 	bl	80a24e4 <pinMode>
 80a0590:	e757      	b.n	80a0442 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
 80a0592:	b00e      	add	sp, #56	; 0x38
 80a0594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0598:	080a3b11 	.word	0x080a3b11
 80a059c:	080a3bb8 	.word	0x080a3bb8
 80a05a0:	080a3b14 	.word	0x080a3b14
 80a05a4:	080a3b18 	.word	0x080a3b18
 80a05a8:	080a3b1b 	.word	0x080a3b1b
 80a05ac:	080a1081 	.word	0x080a1081
 80a05b0:	080a1083 	.word	0x080a1083
 80a05b4:	080a3b1e 	.word	0x080a3b1e

080a05b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a05b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a05bc:	b08f      	sub	sp, #60	; 0x3c
 80a05be:	af04      	add	r7, sp, #16
 80a05c0:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a05c2:	2205      	movs	r2, #5
 80a05c4:	f107 010c 	add.w	r1, r7, #12
 80a05c8:	6800      	ldr	r0, [r0, #0]
 80a05ca:	f001 fa5d 	bl	80a1a88 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a05ce:	2800      	cmp	r0, #0
 80a05d0:	f000 819a 	beq.w	80a0908 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x350>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a05d4:	2805      	cmp	r0, #5
 80a05d6:	d001      	beq.n	80a05dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
 80a05d8:	2000      	movs	r0, #0
 80a05da:	e19a      	b.n	80a0912 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35a>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a05dc:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a05e0:	f8b7 500f 	ldrh.w	r5, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a05e4:	0a13      	lsrs	r3, r2, #8
 80a05e6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
 80a05ea:	0a2b      	lsrs	r3, r5, #8
 80a05ec:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a05f0:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
 80a05f2:	b2ad      	uxth	r5, r5
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a05f4:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a05f8:	f8a7 500f 	strh.w	r5, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
 80a05fc:	2a00      	cmp	r2, #0
 80a05fe:	d0eb      	beq.n	80a05d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a0600:	7b3b      	ldrb	r3, [r7, #12]
 80a0602:	2b00      	cmp	r3, #0
 80a0604:	d14f      	bne.n	80a06a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        lastActivityIn = BlynkMillis();
 80a0606:	f000 fd37 	bl	80a1078 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a060a:	7f65      	ldrb	r5, [r4, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
 80a060c:	60e0      	str	r0, [r4, #12]
 80a060e:	f8b7 000f 	ldrh.w	r0, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0612:	2d00      	cmp	r5, #0
 80a0614:	d143      	bne.n	80a069e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
 80a0616:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80a061a:	2b01      	cmp	r3, #1
 80a061c:	d13f      	bne.n	80a069e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
            switch (hdr.length) {
 80a061e:	2809      	cmp	r0, #9
 80a0620:	d024      	beq.n	80a066c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xb4>
 80a0622:	28c8      	cmp	r0, #200	; 0xc8
 80a0624:	d001      	beq.n	80a062a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
 80a0626:	2804      	cmp	r0, #4
 80a0628:	d12a      	bne.n	80a0680 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xc8>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
 80a062a:	f7ff fd45 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a062e:	f001 fdd9 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0632:	49ba      	ldr	r1, [pc, #744]	; (80a091c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x364>)
 80a0634:	f001 f8cc 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a0638:	f001 fdd4 	bl	80a21e4 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a063c:	6963      	ldr	r3, [r4, #20]
 80a063e:	68e1      	ldr	r1, [r4, #12]
 80a0640:	220a      	movs	r2, #10
 80a0642:	1ac9      	subs	r1, r1, r3
 80a0644:	f001 f8e1 	bl	80a180a <_ZN5Print11printNumberEmh>
 80a0648:	f001 fdcc 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a064c:	49b4      	ldr	r1, [pc, #720]	; (80a0920 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x368>)
 80a064e:	f001 f8d2 	bl	80a17f6 <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
 80a0652:	68e3      	ldr	r3, [r4, #12]
                state = CONNECTED;
 80a0654:	2501      	movs	r5, #1
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
 80a0656:	4620      	mov	r0, r4
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
 80a0658:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
 80a065a:	7765      	strb	r5, [r4, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
 80a065c:	f000 fadc 	bl	80a0c18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a0660:	f7ff fd44 	bl	80a00ec <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a0664:	f000 fd0e 	bl	80a1084 <BlynkNoOpCbk>
 80a0668:	4628      	mov	r0, r5
 80a066a:	e152      	b.n	80a0912 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35a>
                return true;
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
 80a066c:	f7ff fd24 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a0670:	f001 fdb8 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0674:	49ab      	ldr	r1, [pc, #684]	; (80a0924 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x36c>)
 80a0676:	f001 f8be 	bl	80a17f6 <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
 80a067a:	2303      	movs	r3, #3
 80a067c:	7763      	strb	r3, [r4, #29]
 80a067e:	e7ab      	b.n	80a05d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
                break;
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
 80a0680:	f7ff fd1a 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a0684:	f001 fdae 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0688:	49a7      	ldr	r1, [pc, #668]	; (80a0928 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x370>)
 80a068a:	f001 f8a1 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a068e:	f001 fda9 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0692:	220a      	movs	r2, #10
 80a0694:	f8b7 100f 	ldrh.w	r1, [r7, #15]
 80a0698:	f7ff fdea 	bl	80a0270 <_ZN5Print7printlnItLi0EEEjT_i>
 80a069c:	e79c      	b.n	80a05d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a069e:	3805      	subs	r0, #5
 80a06a0:	bf18      	it	ne
 80a06a2:	2001      	movne	r0, #1
 80a06a4:	e135      	b.n	80a0912 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35a>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a06a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a06aa:	d911      	bls.n	80a06d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x118>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
 80a06ac:	f7ff fd04 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a06b0:	f001 fd98 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a06b4:	499d      	ldr	r1, [pc, #628]	; (80a092c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x374>)
 80a06b6:	f001 f88b 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a06ba:	f001 fd93 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a06be:	220a      	movs	r2, #10
 80a06c0:	f8b7 100f 	ldrh.w	r1, [r7, #15]
 80a06c4:	f7ff fdd4 	bl	80a0270 <_ZN5Print7printlnItLi0EEEjT_i>
        // TODO: Flush
        internalReconnect();
 80a06c8:	4620      	mov	r0, r4
 80a06ca:	f7ff fe53 	bl	80a0374 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a06ce:	e11b      	b.n	80a0908 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x350>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a06d0:	f105 0308 	add.w	r3, r5, #8
 80a06d4:	f023 0307 	bic.w	r3, r3, #7
 80a06d8:	46e8      	mov	r8, sp
 80a06da:	ebad 0d03 	sub.w	sp, sp, r3
 80a06de:	ae04      	add	r6, sp, #16
 80a06e0:	462a      	mov	r2, r5
 80a06e2:	4631      	mov	r1, r6
 80a06e4:	6820      	ldr	r0, [r4, #0]
 80a06e6:	f001 f9cf 	bl	80a1a88 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a06ea:	4285      	cmp	r5, r0
 80a06ec:	f04f 0500 	mov.w	r5, #0
 80a06f0:	f040 8105 	bne.w	80a08fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x346>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
 80a06f4:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a06f8:	54f5      	strb	r5, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a06fa:	f000 fcbd 	bl	80a1078 <_Z11BlynkMillisv>

    switch (hdr.type)
 80a06fe:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a0700:	60e0      	str	r0, [r4, #12]

    switch (hdr.type)
 80a0702:	2b11      	cmp	r3, #17
 80a0704:	f000 809b 	beq.w	80a083e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
 80a0708:	d808      	bhi.n	80a071c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x164>
 80a070a:	2b06      	cmp	r3, #6
 80a070c:	d02c      	beq.n	80a0768 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
 80a070e:	2b0f      	cmp	r3, #15
 80a0710:	f000 8088 	beq.w	80a0824 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
 80a0714:	2b02      	cmp	r3, #2
 80a0716:	f040 80ee 	bne.w	80a08f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x33e>
 80a071a:	e00b      	b.n	80a0734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
 80a071c:	2b1d      	cmp	r3, #29
 80a071e:	d009      	beq.n	80a0734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
 80a0720:	d802      	bhi.n	80a0728 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
 80a0722:	2b14      	cmp	r3, #20
 80a0724:	d07e      	beq.n	80a0824 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
 80a0726:	e0e6      	b.n	80a08f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x33e>
 80a0728:	2b29      	cmp	r3, #41	; 0x29
 80a072a:	d029      	beq.n	80a0780 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
 80a072c:	2b37      	cmp	r3, #55	; 0x37
 80a072e:	f000 80d2 	beq.w	80a08d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31e>
 80a0732:	e0e0      	b.n	80a08f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x33e>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
 80a0734:	7f63      	ldrb	r3, [r4, #29]
 80a0736:	b97b      	cbnz	r3, 80a0758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
            BLYNK_LOG1(BLYNK_F("Ready"));
 80a0738:	f7ff fcbe 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a073c:	f001 fd52 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0740:	497b      	ldr	r1, [pc, #492]	; (80a0930 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x378>)
 80a0742:	f001 f858 	bl	80a17f6 <_ZN5Print7printlnEPKc>
            state = CONNECTED;
 80a0746:	2301      	movs	r3, #1
 80a0748:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
 80a074a:	4620      	mov	r0, r4
 80a074c:	f000 fa64 	bl	80a0c18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a0750:	f7ff fccc 	bl	80a00ec <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a0754:	f000 fc96 	bl	80a1084 <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a0758:	2300      	movs	r3, #0
 80a075a:	21c8      	movs	r1, #200	; 0xc8
 80a075c:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a0760:	9302      	str	r3, [sp, #8]
 80a0762:	9301      	str	r3, [sp, #4]
 80a0764:	9100      	str	r1, [sp, #0]
 80a0766:	e006      	b.n	80a0776 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1be>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a0768:	23c8      	movs	r3, #200	; 0xc8
 80a076a:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a076e:	9300      	str	r3, [sp, #0]
 80a0770:	462b      	mov	r3, r5
 80a0772:	9502      	str	r5, [sp, #8]
 80a0774:	9501      	str	r5, [sp, #4]
 80a0776:	4619      	mov	r1, r3
 80a0778:	4620      	mov	r0, r4
 80a077a:	f000 f991 	bl	80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a077e:	e0c0      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
 80a0780:	68a3      	ldr	r3, [r4, #8]
 80a0782:	b91b      	cbnz	r3, 80a078c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d4>
             redir_serv = (char*)malloc(32);
 80a0784:	2020      	movs	r0, #32
 80a0786:	f000 feb5 	bl	80a14f4 <malloc>
 80a078a:	60a0      	str	r0, [r4, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a078c:	f8b7 900f 	ldrh.w	r9, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0790:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a0792:	44b1      	add	r9, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a0794:	454e      	cmp	r6, r9
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0796:	f8c7 9020 	str.w	r9, [r7, #32]
 80a079a:	d301      	bcc.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e8>
            return false;
 80a079c:	2000      	movs	r0, #0
 80a079e:	e0b1      	b.n	80a0904 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34c>

        strncpy(redir_serv, it.asStr(), 32);
 80a07a0:	2220      	movs	r2, #32
 80a07a2:	4631      	mov	r1, r6
 80a07a4:	68a0      	ldr	r0, [r4, #8]
 80a07a6:	f003 f8bb 	bl	80a3920 <strncpy>
        redir_serv[31] = '\0';
 80a07aa:	68a3      	ldr	r3, [r4, #8]
 80a07ac:	2500      	movs	r5, #0
 80a07ae:	77dd      	strb	r5, [r3, #31]

        if (++it < param.end())
 80a07b0:	f107 001c 	add.w	r0, r7, #28
 80a07b4:	f7ff fcda 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a07b8:	6803      	ldr	r3, [r0, #0]
 80a07ba:	454b      	cmp	r3, r9
 80a07bc:	d208      	bcs.n	80a07d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a07be:	69f8      	ldr	r0, [r7, #28]
 80a07c0:	b120      	cbz	r0, 80a07cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x214>
 80a07c2:	6a3b      	ldr	r3, [r7, #32]
 80a07c4:	4298      	cmp	r0, r3
 80a07c6:	f0c0 80a1 	bcc.w	80a090c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x354>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a07ca:	4628      	mov	r0, r5
            redir_port = it.asLong();
 80a07cc:	b285      	uxth	r5, r0
 80a07ce:	e000      	b.n	80a07d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a07d0:	2550      	movs	r5, #80	; 0x50
        strncpy(redir_serv, it.asStr(), 32);
        redir_serv[31] = '\0';

        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
 80a07d2:	f7ff fc71 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a07d6:	f001 fd05 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a07da:	4956      	ldr	r1, [pc, #344]	; (80a0934 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x37c>)
 80a07dc:	f000 fff8 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a07e0:	f001 fd00 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a07e4:	68a1      	ldr	r1, [r4, #8]
 80a07e6:	f000 fff3 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a07ea:	f001 fcfb 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a07ee:	213a      	movs	r1, #58	; 0x3a
 80a07f0:	f000 fff2 	bl	80a17d8 <_ZN5Print5printEc>
 80a07f4:	f001 fcf6 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a07f8:	220a      	movs	r2, #10
 80a07fa:	4629      	mov	r1, r5
 80a07fc:	f7ff fd38 	bl	80a0270 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0800:	6820      	ldr	r0, [r4, #0]
 80a0802:	f001 fa6b 	bl	80a1cdc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
 80a0806:	6823      	ldr	r3, [r4, #0]
 80a0808:	68a2      	ldr	r2, [r4, #8]
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
 80a080a:	871d      	strh	r5, [r3, #56]	; 0x38
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a080c:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a080e:	2300      	movs	r3, #0
 80a0810:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0812:	f000 fc31 	bl	80a1078 <_Z11BlynkMillisv>
 80a0816:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a081a:	3808      	subs	r0, #8
 80a081c:	6120      	str	r0, [r4, #16]
 80a081e:	60e0      	str	r0, [r4, #12]
 80a0820:	6160      	str	r0, [r4, #20]
 80a0822:	e06e      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a0824:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
 80a0826:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a082a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a082e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a0830:	4631      	mov	r1, r6
 80a0832:	4620      	mov	r0, r4
 80a0834:	f7ff fda8 	bl	80a0388 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a0838:	2300      	movs	r3, #0
 80a083a:	8363      	strh	r3, [r4, #26]
 80a083c:	e061      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a083e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
 80a0842:	713d      	strb	r5, [r7, #4]
 80a0844:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a0846:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0848:	617e      	str	r6, [r7, #20]
 80a084a:	61bb      	str	r3, [r7, #24]
 80a084c:	d259      	bcs.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
 80a084e:	6830      	ldr	r0, [r6, #0]
 80a0850:	60b8      	str	r0, [r7, #8]

        ++it;
 80a0852:	f107 0014 	add.w	r0, r7, #20
 80a0856:	f7ff fc89 	bl	80a016c <_ZN10BlynkParam8iteratorppEv>
 80a085a:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a085c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a0860:	1b96      	subs	r6, r2, r6
 80a0862:	1b9e      	subs	r6, r3, r6
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a0864:	61fa      	str	r2, [r7, #28]
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a0866:	68bb      	ldr	r3, [r7, #8]
 80a0868:	4a33      	ldr	r2, [pc, #204]	; (80a0938 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x380>)
 80a086a:	623e      	str	r6, [r7, #32]
 80a086c:	4293      	cmp	r3, r2
 80a086e:	627e      	str	r6, [r7, #36]	; 0x24
 80a0870:	d02b      	beq.n	80a08ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x312>
 80a0872:	d80d      	bhi.n	80a0890 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2d8>
 80a0874:	4a31      	ldr	r2, [pc, #196]	; (80a093c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x384>)
 80a0876:	4293      	cmp	r3, r2
 80a0878:	d01b      	beq.n	80a08b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2fa>
 80a087a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80a087e:	3203      	adds	r2, #3
 80a0880:	4293      	cmp	r3, r2
 80a0882:	d13e      	bne.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a0884:	f107 011c 	add.w	r1, r7, #28
 80a0888:	1d38      	adds	r0, r7, #4
 80a088a:	f000 fbfa 	bl	80a1082 <BlynkWidgetWrite>
 80a088e:	e038      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a0890:	4a2b      	ldr	r2, [pc, #172]	; (80a0940 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x388>)
 80a0892:	4293      	cmp	r3, r2
 80a0894:	d013      	beq.n	80a08be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x306>
 80a0896:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
 80a089a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80a089e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80a08a2:	4293      	cmp	r3, r2
 80a08a4:	d12d      	bne.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a08a6:	f107 011c 	add.w	r1, r7, #28
 80a08aa:	1d38      	adds	r0, r7, #4
 80a08ac:	f000 fbe9 	bl	80a1082 <BlynkWidgetWrite>
 80a08b0:	e027      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a08b2:	f107 011c 	add.w	r1, r7, #28
 80a08b6:	1d38      	adds	r0, r7, #4
 80a08b8:	f000 fbe3 	bl	80a1082 <BlynkWidgetWrite>
 80a08bc:	e021      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a08be:	f107 011c 	add.w	r1, r7, #28
 80a08c2:	1d38      	adds	r0, r7, #4
 80a08c4:	f000 fbdd 	bl	80a1082 <BlynkWidgetWrite>
 80a08c8:	e01b      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
 80a08ca:	f107 011c 	add.w	r1, r7, #28
 80a08ce:	1d38      	adds	r0, r7, #4
 80a08d0:	f000 fbd7 	bl	80a1082 <BlynkWidgetWrite>
 80a08d4:	e015      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
#endif
        }
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
 80a08d6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a08da:	b193      	cbz	r3, 80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
 80a08dc:	f7ff fbec 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a08e0:	f001 fc80 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a08e4:	4917      	ldr	r1, [pc, #92]	; (80a0944 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x38c>)
 80a08e6:	f000 ff73 	bl	80a17d0 <_ZN5Print5printEPKc>
 80a08ea:	f001 fc7b 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a08ee:	4631      	mov	r1, r6
 80a08f0:	f000 ff81 	bl	80a17f6 <_ZN5Print7printlnEPKc>
 80a08f4:	e005      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
 80a08f6:	4620      	mov	r0, r4
 80a08f8:	f7ff fd3c 	bl	80a0374 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a08fc:	e001      	b.n	80a0902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34a>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
 80a08fe:	4628      	mov	r0, r5
 80a0900:	e000      	b.n	80a0904 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x34c>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
 80a0902:	2001      	movs	r0, #1
 80a0904:	46c5      	mov	sp, r8
 80a0906:	e004      	b.n	80a0912 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35a>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
 80a0908:	2001      	movs	r0, #1
 80a090a:	e002      	b.n	80a0912 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x35a>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a090c:	f002 ffa8 	bl	80a3860 <atol>
 80a0910:	e75c      	b.n	80a07cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x214>
        internalReconnect();
    } break;
    }

    return true;
}
 80a0912:	372c      	adds	r7, #44	; 0x2c
 80a0914:	46bd      	mov	sp, r7
 80a0916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a091a:	bf00      	nop
 80a091c:	080a3b2f 	.word	0x080a3b2f
 80a0920:	080a3b3d 	.word	0x080a3b3d
 80a0924:	080a3b42 	.word	0x080a3b42
 80a0928:	080a3b55 	.word	0x080a3b55
 80a092c:	080a3b6c 	.word	0x080a3b6c
 80a0930:	080a3b7d 	.word	0x080a3b7d
 80a0934:	080a3b83 	.word	0x080a3b83
 80a0938:	6174656d 	.word	0x6174656d
 80a093c:	0061746f 	.word	0x0061746f
 80a0940:	6e6f6361 	.word	0x6e6f6361
 80a0944:	080a3b93 	.word	0x080a3b93

080a0948 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
 80a0948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a094c:	4604      	mov	r4, r0
 80a094e:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
 80a0950:	f7ff fbcc 	bl	80a00ec <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
 80a0954:	7f63      	ldrb	r3, [r4, #29]
 80a0956:	2b02      	cmp	r3, #2
 80a0958:	f000 808a 	beq.w	80a0a70 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x128>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a095c:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
 80a095e:	8b62      	ldrh	r2, [r4, #26]
 80a0960:	3301      	adds	r3, #1
 80a0962:	b2db      	uxtb	r3, r3
 80a0964:	7723      	strb	r3, [r4, #28]
 80a0966:	2a00      	cmp	r2, #0
 80a0968:	d147      	bne.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
 80a096a:	2b02      	cmp	r3, #2
 80a096c:	d845      	bhi.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a096e:	6820      	ldr	r0, [r4, #0]
 80a0970:	f001 fa75 	bl	80a1e5e <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
 80a0974:	b130      	cbz	r0, 80a0984 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3c>
        while (avail || conn.available() > 0) {
 80a0976:	2d00      	cmp	r5, #0
 80a0978:	d17c      	bne.n	80a0a74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x12c>
    int available() { return client.available(); }
 80a097a:	6820      	ldr	r0, [r4, #0]
 80a097c:	f001 f972 	bl	80a1c64 <_ZN9TCPClient9availableEv>
 80a0980:	2800      	cmp	r0, #0
 80a0982:	dc77      	bgt.n	80a0a74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x12c>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
 80a0984:	f000 fb78 	bl	80a1078 <_Z11BlynkMillisv>
 80a0988:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a098a:	6820      	ldr	r0, [r4, #0]
 80a098c:	f001 fa67 	bl	80a1e5e <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
 80a0990:	7f65      	ldrb	r5, [r4, #29]
 80a0992:	4606      	mov	r6, r0
 80a0994:	2d01      	cmp	r5, #1
 80a0996:	d132      	bne.n	80a09fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb6>
        if (!tconn) {
 80a0998:	b928      	cbnz	r0, 80a09a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5e>
            lastHeartbeat = t;
 80a099a:	6167      	str	r7, [r4, #20]
            internalReconnect();
 80a099c:	4620      	mov	r0, r4
 80a099e:	f7ff fce9 	bl	80a0374 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a09a2:	4635      	mov	r5, r6
 80a09a4:	e060      	b.n	80a0a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x120>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a09a6:	f644 2238 	movw	r2, #19000	; 0x4a38
 80a09aa:	68e3      	ldr	r3, [r4, #12]
 80a09ac:	1afb      	subs	r3, r7, r3
 80a09ae:	4293      	cmp	r3, r2
 80a09b0:	d90b      	bls.n	80a09ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
 80a09b2:	f7ff fb81 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a09b6:	f001 fc15 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a09ba:	4937      	ldr	r1, [pc, #220]	; (80a0a98 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>)
 80a09bc:	f000 ff1b 	bl	80a17f6 <_ZN5Print7printlnEPKc>
#endif
            internalReconnect();
 80a09c0:	4620      	mov	r0, r4
 80a09c2:	f7ff fcd7 	bl	80a0374 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a09c6:	2500      	movs	r5, #0
 80a09c8:	e04e      	b.n	80a0a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x120>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a09ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80a09ce:	4293      	cmp	r3, r2
 80a09d0:	d803      	bhi.n	80a09da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x92>
 80a09d2:	6923      	ldr	r3, [r4, #16]
 80a09d4:	1afb      	subs	r3, r7, r3
 80a09d6:	4293      	cmp	r3, r2
 80a09d8:	d90f      	bls.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
 80a09da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a09de:	6963      	ldr	r3, [r4, #20]
 80a09e0:	1afb      	subs	r3, r7, r3
 80a09e2:	4293      	cmp	r3, r2
 80a09e4:	d909      	bls.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
 80a09e6:	2300      	movs	r3, #0
 80a09e8:	9302      	str	r3, [sp, #8]
 80a09ea:	9301      	str	r3, [sp, #4]
 80a09ec:	9300      	str	r3, [sp, #0]
 80a09ee:	461a      	mov	r2, r3
 80a09f0:	2106      	movs	r1, #6
 80a09f2:	4620      	mov	r0, r4
 80a09f4:	f000 f854 	bl	80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
 80a09f8:	6167      	str	r7, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
 80a09fa:	2501      	movs	r5, #1
 80a09fc:	e034      	b.n	80a0a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x120>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
 80a09fe:	2d00      	cmp	r5, #0
 80a0a00:	d1fb      	bne.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
 80a0a02:	6960      	ldr	r0, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a0a04:	1a38      	subs	r0, r7, r0
 80a0a06:	b17e      	cbz	r6, 80a0a28 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe0>
 80a0a08:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80a0a0c:	4298      	cmp	r0, r3
 80a0a0e:	d9f4      	bls.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
 80a0a10:	f7ff fb52 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a0a14:	f001 fbe6 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0a18:	4920      	ldr	r1, [pc, #128]	; (80a0a9c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>)
 80a0a1a:	f000 feec 	bl	80a17f6 <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0a1e:	6820      	ldr	r0, [r4, #0]
 80a0a20:	f001 f95c 	bl	80a1cdc <_ZN9TCPClient4stopEv>
            conn.disconnect();
            state = CONNECTING;
 80a0a24:	7765      	strb	r5, [r4, #29]
            return false;
 80a0a26:	e01f      	b.n	80a0a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x120>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a0a28:	f241 3388 	movw	r3, #5000	; 0x1388
 80a0a2c:	4298      	cmp	r0, r3
 80a0a2e:	d9e4      	bls.n	80a09fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xb2>
 80a0a30:	6820      	ldr	r0, [r4, #0]
 80a0a32:	f001 f953 	bl	80a1cdc <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
 80a0a36:	6820      	ldr	r0, [r4, #0]
 80a0a38:	f7ff fc2c 	bl	80a0294 <_ZN22BlynkTransportParticle7connectEv>
 80a0a3c:	4605      	mov	r5, r0
 80a0a3e:	b908      	cbnz	r0, 80a0a44 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfc>
                lastLogin = t;
 80a0a40:	6167      	str	r7, [r4, #20]
                return false;
 80a0a42:	e011      	b.n	80a0a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x120>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a0a44:	f8d4 8004 	ldr.w	r8, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
 80a0a48:	2701      	movs	r7, #1
 80a0a4a:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a0a4c:	4640      	mov	r0, r8
 80a0a4e:	f002 ff5f 	bl	80a3910 <strlen>
 80a0a52:	4643      	mov	r3, r8
 80a0a54:	e88d 0041 	stmia.w	sp, {r0, r6}
 80a0a58:	9602      	str	r6, [sp, #8]
 80a0a5a:	463a      	mov	r2, r7
 80a0a5c:	211d      	movs	r1, #29
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	f000 f81e 	bl	80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a0a64:	6923      	ldr	r3, [r4, #16]
 80a0a66:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
 80a0a68:	7f23      	ldrb	r3, [r4, #28]
 80a0a6a:	3b01      	subs	r3, #1
 80a0a6c:	7723      	strb	r3, [r4, #28]
 80a0a6e:	e00e      	b.n	80a0a8e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x146>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
 80a0a70:	2500      	movs	r5, #0
 80a0a72:	e00c      	b.n	80a0a8e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x146>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	f7ff fd9f 	bl	80a05b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a0a7a:	4605      	mov	r5, r0
 80a0a7c:	2800      	cmp	r0, #0
 80a0a7e:	f47f af7c 	bne.w	80a097a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x32>
 80a0a82:	6820      	ldr	r0, [r4, #0]
 80a0a84:	f001 f92a 	bl	80a1cdc <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
 80a0a88:	f000 fafc 	bl	80a1084 <BlynkNoOpCbk>
                return false;
 80a0a8c:	e7ec      	b.n	80a0a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x120>
            return true;
        }
#endif
    }
    return true;
}
 80a0a8e:	4628      	mov	r0, r5
 80a0a90:	b004      	add	sp, #16
 80a0a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a96:	bf00      	nop
 80a0a98:	080a3b9c 	.word	0x080a3b9c
 80a0a9c:	080a3bae 	.word	0x080a3bae

080a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a0aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0aa4:	b083      	sub	sp, #12
 80a0aa6:	4604      	mov	r4, r0
 80a0aa8:	af00      	add	r7, sp, #0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a0aaa:	6800      	ldr	r0, [r0, #0]
 80a0aac:	4689      	mov	r9, r1
 80a0aae:	4616      	mov	r6, r2
 80a0ab0:	469b      	mov	fp, r3
 80a0ab2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a0ab4:	46ea      	mov	sl, sp
 80a0ab6:	f001 f9d2 	bl	80a1e5e <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
 80a0aba:	2800      	cmp	r0, #0
 80a0abc:	d062      	beq.n	80a0b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
 80a0abe:	f1b9 0f1d 	cmp.w	r9, #29
 80a0ac2:	d805      	bhi.n	80a0ad0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
 80a0ac4:	4b53      	ldr	r3, [pc, #332]	; (80a0c14 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x174>)
 80a0ac6:	fa23 f309 	lsr.w	r3, r3, r9
 80a0aca:	07db      	lsls	r3, r3, #31
 80a0acc:	f100 809d 	bmi.w	80a0c0a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x16a>
 80a0ad0:	7f63      	ldrb	r3, [r4, #29]
 80a0ad2:	2b01      	cmp	r3, #1
 80a0ad4:	d156      	bne.n	80a0b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a0ad6:	b916      	cbnz	r6, 80a0ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a0ad8:	8b66      	ldrh	r6, [r4, #26]
 80a0ada:	2e00      	cmp	r6, #0
 80a0adc:	d057      	beq.n	80a0b8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a0ade:	f1a9 030c 	sub.w	r3, r9, #12
 80a0ae2:	2b08      	cmp	r3, #8
 80a0ae4:	d95b      	bls.n	80a0b9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfe>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
 80a0ae6:	f1bb 0f00 	cmp.w	fp, #0
 80a0aea:	bf18      	it	ne
 80a0aec:	46a8      	movne	r8, r5
 80a0aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80a0af0:	bf08      	it	eq
 80a0af2:	f04f 0800 	moveq.w	r8, #0
 80a0af6:	2a00      	cmp	r2, #0
 80a0af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a0afa:	f108 0305 	add.w	r3, r8, #5
 80a0afe:	bf14      	ite	ne
 80a0b00:	4690      	movne	r8, r2
 80a0b02:	f04f 0800 	moveq.w	r8, #0
 80a0b06:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a0b08:	f108 0307 	add.w	r3, r8, #7
 80a0b0c:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a0b10:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a0b12:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a0b16:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
 80a0b1a:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
 80a0b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a0b20:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
 80a0b24:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
 80a0b28:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a0b2c:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
 80a0b30:	f1bb 0f00 	cmp.w	fp, #0
 80a0b34:	d052      	beq.n	80a0bdc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
 80a0b36:	2d00      	cmp	r5, #0
 80a0b38:	d050      	beq.n	80a0bdc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
        memcpy(buff + pos, data, length);
 80a0b3a:	462a      	mov	r2, r5
 80a0b3c:	4659      	mov	r1, fp
 80a0b3e:	f10d 0005 	add.w	r0, sp, #5
 80a0b42:	f002 fe9f 	bl	80a3884 <memcpy>
        pos += length;
 80a0b46:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
 80a0b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a0b4a:	2b00      	cmp	r3, #0
 80a0b4c:	d148      	bne.n	80a0be0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x140>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a0b4e:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a0b50:	4545      	cmp	r5, r8
 80a0b52:	d251      	bcs.n	80a0bf8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a0b54:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
 80a0b58:	687b      	ldr	r3, [r7, #4]
 80a0b5a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a0b5e:	bf28      	it	cs
 80a0b60:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a0b64:	1959      	adds	r1, r3, r5
 80a0b66:	6820      	ldr	r0, [r4, #0]
 80a0b68:	f000 ffd9 	bl	80a1b1e <_ZN9TCPClient5writeEPKhj>
 80a0b6c:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a0b6e:	2000      	movs	r0, #0
 80a0b70:	f000 fa80 	bl	80a1074 <_Z10BlynkDelaym>
        if (w == 0) {
 80a0b74:	2e00      	cmp	r6, #0
 80a0b76:	d13d      	bne.n	80a0bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0b78:	6820      	ldr	r0, [r4, #0]
 80a0b7a:	f001 f8af 	bl	80a1cdc <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
 80a0b7e:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a0b80:	f000 fa80 	bl	80a1084 <BlynkNoOpCbk>
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
 80a0b84:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
 80a0b86:	370c      	adds	r7, #12
 80a0b88:	46bd      	mov	sp, r7
 80a0b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a0b8e:	8b23      	ldrh	r3, [r4, #24]
 80a0b90:	3301      	adds	r3, #1
 80a0b92:	b29b      	uxth	r3, r3
 80a0b94:	b903      	cbnz	r3, 80a0b98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf8>
        msgIdOut = 1;
 80a0b96:	2301      	movs	r3, #1
 80a0b98:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a0b9a:	8b26      	ldrh	r6, [r4, #24]
 80a0b9c:	e79f      	b.n	80a0ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a0b9e:	68e3      	ldr	r3, [r4, #12]
 80a0ba0:	6922      	ldr	r2, [r4, #16]
 80a0ba2:	4293      	cmp	r3, r2
 80a0ba4:	bf38      	it	cc
 80a0ba6:	4613      	movcc	r3, r2
 80a0ba8:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a0bac:	f000 fa64 	bl	80a1078 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
 80a0bb0:	ebc0 0008 	rsb	r0, r0, r8
 80a0bb4:	2800      	cmp	r0, #0
 80a0bb6:	db0a      	blt.n	80a0bce <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12e>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
 80a0bb8:	2100      	movs	r1, #0
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	f7ff fec4 	bl	80a0948 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
 80a0bc0:	f000 fa5a 	bl	80a1078 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
 80a0bc4:	ebc0 0008 	rsb	r0, r0, r8
 80a0bc8:	2800      	cmp	r0, #0
 80a0bca:	daf5      	bge.n	80a0bb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x118>
 80a0bcc:	e78b      	b.n	80a0ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
 80a0bce:	7f21      	ldrb	r1, [r4, #28]
 80a0bd0:	2900      	cmp	r1, #0
 80a0bd2:	d188      	bne.n	80a0ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
            run();
 80a0bd4:	4620      	mov	r0, r4
 80a0bd6:	f7ff feb7 	bl	80a0948 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a0bda:	e784      	b.n	80a0ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a0bdc:	2005      	movs	r0, #5
 80a0bde:	e7b3      	b.n	80a0b48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa8>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
 80a0be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a0be2:	2b00      	cmp	r3, #0
 80a0be4:	d0b3      	beq.n	80a0b4e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        memcpy(buff + pos, data2, length2);
 80a0be6:	461a      	mov	r2, r3
 80a0be8:	687b      	ldr	r3, [r7, #4]
 80a0bea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a0bec:	4418      	add	r0, r3
 80a0bee:	f002 fe49 	bl	80a3884 <memcpy>
 80a0bf2:	e7ac      	b.n	80a0b4e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
 80a0bf4:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a0bf6:	e7ab      	b.n	80a0b50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xb0>
        }
    }

#endif

    if (wlen != full_length) {
 80a0bf8:	d003      	beq.n	80a0c02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x162>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
 80a0bfa:	4620      	mov	r0, r4
 80a0bfc:	f7ff fbba 	bl	80a0374 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a0c00:	e7c0      	b.n	80a0b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
    }

    lastActivityOut = BlynkMillis();
 80a0c02:	f000 fa39 	bl	80a1078 <_Z11BlynkMillisv>
 80a0c06:	6120      	str	r0, [r4, #16]
 80a0c08:	e7bc      	b.n	80a0b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a0c0a:	2e00      	cmp	r6, #0
 80a0c0c:	f47f af6b 	bne.w	80a0ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
 80a0c10:	e762      	b.n	80a0ad8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x38>
 80a0c12:	bf00      	nop
 80a0c14:	20000045 	.word	0x20000045

080a0c18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
 80a0c18:	b500      	push	{lr}
 80a0c1a:	b095      	sub	sp, #84	; 0x54
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
 80a0c1c:	ab04      	add	r3, sp, #16
 80a0c1e:	2200      	movs	r2, #0
 80a0c20:	9301      	str	r3, [sp, #4]
 80a0c22:	2350      	movs	r3, #80	; 0x50
 80a0c24:	9300      	str	r3, [sp, #0]
 80a0c26:	9202      	str	r2, [sp, #8]
 80a0c28:	4b03      	ldr	r3, [pc, #12]	; (80a0c38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
 80a0c2a:	2111      	movs	r1, #17
 80a0c2c:	f7ff ff38 	bl	80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
 80a0c30:	b015      	add	sp, #84	; 0x54
 80a0c32:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0c36:	bf00      	nop
 80a0c38:	080a3a84 	.word	0x080a3a84

080a0c3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
 80a0c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c40:	460d      	mov	r5, r1
 80a0c42:	4690      	mov	r8, r2
 80a0c44:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0c48:	ab08      	add	r3, sp, #32
 80a0c4a:	2400      	movs	r4, #0
 80a0c4c:	4606      	mov	r6, r0
 80a0c4e:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
 80a0c50:	a805      	add	r0, sp, #20
 80a0c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a0c56:	4915      	ldr	r1, [pc, #84]	; (80a0cac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x70>)
 80a0c58:	9307      	str	r3, [sp, #28]
 80a0c5a:	9406      	str	r4, [sp, #24]
 80a0c5c:	f7ff fa95 	bl	80a018a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
 80a0c60:	4629      	mov	r1, r5
 80a0c62:	a805      	add	r0, sp, #20
 80a0c64:	f7ff faae 	bl	80a01c4 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
 80a0c68:	9b06      	ldr	r3, [sp, #24]
 80a0c6a:	9907      	ldr	r1, [sp, #28]
 80a0c6c:	9d05      	ldr	r5, [sp, #20]
 80a0c6e:	4640      	mov	r0, r8
 80a0c70:	1acf      	subs	r7, r1, r3
 80a0c72:	441d      	add	r5, r3
 80a0c74:	f001 fff6 	bl	80a2c64 <__aeabi_f2d>
 80a0c78:	4a0d      	ldr	r2, [pc, #52]	; (80a0cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
 80a0c7a:	e9cd 0100 	strd	r0, r1, [sp]
 80a0c7e:	4639      	mov	r1, r7
 80a0c80:	4628      	mov	r0, r5
 80a0c82:	f000 fc47 	bl	80a1514 <snprintf>
 80a0c86:	9b06      	ldr	r3, [sp, #24]
 80a0c88:	3001      	adds	r0, #1
 80a0c8a:	4418      	add	r0, r3
 80a0c8c:	9006      	str	r0, [sp, #24]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a0c8e:	3801      	subs	r0, #1
 80a0c90:	9000      	str	r0, [sp, #0]
 80a0c92:	9402      	str	r4, [sp, #8]
 80a0c94:	9401      	str	r4, [sp, #4]
 80a0c96:	9b05      	ldr	r3, [sp, #20]
 80a0c98:	4622      	mov	r2, r4
 80a0c9a:	2114      	movs	r1, #20
 80a0c9c:	4630      	mov	r0, r6
 80a0c9e:	f7ff feff 	bl	80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a0ca2:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80a0ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0caa:	bf00      	nop
 80a0cac:	080a3bbc 	.word	0x080a3bbc
 80a0cb0:	080a3bbf 	.word	0x080a3bbf

080a0cb4 <BlynkWidgetRead1>:
float temp;
float humidity;
DHT dht(DHTPIN, DHTTYPE);

BLYNK_READ(BLYNK_TEMP_DISPLAY)
{
 80a0cb4:	b508      	push	{r3, lr}
  // This command writes Arduino's uptime in seconds to Virtual Pin (5)
  Blynk.virtualWrite(BLYNK_TEMP_DISPLAY, temp);
 80a0cb6:	4b03      	ldr	r3, [pc, #12]	; (80a0cc4 <BlynkWidgetRead1+0x10>)
 80a0cb8:	2101      	movs	r1, #1
 80a0cba:	681a      	ldr	r2, [r3, #0]
 80a0cbc:	4802      	ldr	r0, [pc, #8]	; (80a0cc8 <BlynkWidgetRead1+0x14>)
 80a0cbe:	f7ff ffbd 	bl	80a0c3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
 80a0cc2:	bd08      	pop	{r3, pc}
 80a0cc4:	2000009c 	.word	0x2000009c
 80a0cc8:	200000b4 	.word	0x200000b4

080a0ccc <BlynkWidgetRead2>:
}

BLYNK_READ(BLYNK_HUMIDITY_DISPLAY)
{
 80a0ccc:	b508      	push	{r3, lr}
  // This command writes Arduino's uptime in seconds to Virtual Pin (5)
  Blynk.virtualWrite(BLYNK_HUMIDITY_DISPLAY, humidity);
 80a0cce:	4b03      	ldr	r3, [pc, #12]	; (80a0cdc <BlynkWidgetRead2+0x10>)
 80a0cd0:	2102      	movs	r1, #2
 80a0cd2:	681a      	ldr	r2, [r3, #0]
 80a0cd4:	4802      	ldr	r0, [pc, #8]	; (80a0ce0 <BlynkWidgetRead2+0x14>)
 80a0cd6:	f7ff ffb1 	bl	80a0c3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
 80a0cda:	bd08      	pop	{r3, pc}
 80a0cdc:	20000098 	.word	0x20000098
 80a0ce0:	200000b4 	.word	0x200000b4

080a0ce4 <setup>:
  Serial.print(temp);
  Serial.print(" *C ");
}

void setup()
{
 80a0ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Debug console
  Serial.begin(9600);
 80a0ce6:	f001 fa7d 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0cea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0cee:	f001 fa5f 	bl	80a21b0 <_ZN9USBSerial5beginEl>

  delay(5000); // Allow board to settle
 80a0cf2:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0cf6:	f000 fc15 	bl	80a1524 <delay>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a0cfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a0cfe:	f000 f9b9 	bl	80a1074 <_Z10BlynkDelaym>
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a0d02:	4c19      	ldr	r4, [pc, #100]	; (80a0d68 <setup+0x84>)
 80a0d04:	4b19      	ldr	r3, [pc, #100]	; (80a0d6c <setup+0x88>)

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a0d06:	f242 3627 	movw	r6, #8999	; 0x2327
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a0d0a:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0d0c:	f000 f9b4 	bl	80a1078 <_Z11BlynkMillisv>
 80a0d10:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a0d14:	3808      	subs	r0, #8
 80a0d16:	6120      	str	r0, [r4, #16]
 80a0d18:	60e0      	str	r0, [r4, #12]
 80a0d1a:	6160      	str	r0, [r4, #20]

    void printBanner() {
#if defined(BLYNK_NO_FANCY_LOGO)
        BLYNK_LOG1(BLYNK_F("Blynk v" BLYNK_VERSION " on " BLYNK_INFO_DEVICE));
#else
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
 80a0d1c:	f7ff f9cc 	bl	80a00b8 <_ZL14BLYNK_LOG_TIMEv>
 80a0d20:	f001 fa60 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a0d24:	4912      	ldr	r1, [pc, #72]	; (80a0d70 <setup+0x8c>)
 80a0d26:	f000 fd66 	bl	80a17f6 <_ZN5Print7printlnEPKc>
    void config(const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
 80a0d2a:	6823      	ldr	r3, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a0d2c:	4a11      	ldr	r2, [pc, #68]	; (80a0d74 <setup+0x90>)

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
 80a0d2e:	2500      	movs	r5, #0
 80a0d30:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a0d32:	2250      	movs	r2, #80	; 0x50
 80a0d34:	871a      	strh	r2, [r3, #56]	; 0x38
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0d36:	6820      	ldr	r0, [r4, #0]
 80a0d38:	f000 ffd0 	bl	80a1cdc <_ZN9TCPClient4stopEv>
 80a0d3c:	7765      	strb	r5, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a0d3e:	f000 f99b 	bl	80a1078 <_Z11BlynkMillisv>
 80a0d42:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
 80a0d44:	7f63      	ldrb	r3, [r4, #29]
 80a0d46:	2b01      	cmp	r3, #1
 80a0d48:	d009      	beq.n	80a0d5e <setup+0x7a>
               (BlynkMillis() - started < timeout))
 80a0d4a:	f000 f995 	bl	80a1078 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a0d4e:	1bc0      	subs	r0, r0, r7
 80a0d50:	42b0      	cmp	r0, r6
 80a0d52:	d804      	bhi.n	80a0d5e <setup+0x7a>
               (BlynkMillis() - started < timeout))
        {
            run();
 80a0d54:	2100      	movs	r1, #0
 80a0d56:	4804      	ldr	r0, [pc, #16]	; (80a0d68 <setup+0x84>)
 80a0d58:	f7ff fdf6 	bl	80a0948 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a0d5c:	e7f2      	b.n	80a0d44 <setup+0x60>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a0d5e:	7f63      	ldrb	r3, [r4, #29]
 80a0d60:	2b01      	cmp	r3, #1
 80a0d62:	d1e8      	bne.n	80a0d36 <setup+0x52>
  Blynk.begin(auth);
}
 80a0d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d66:	bf00      	nop
 80a0d68:	200000b4 	.word	0x200000b4
 80a0d6c:	20000000 	.word	0x20000000
 80a0d70:	080a3bc5 	.word	0x080a3bc5
 80a0d74:	080a3c5a 	.word	0x080a3c5a

080a0d78 <loop>:

void loop()
{
 80a0d78:	b510      	push	{r4, lr}

  humidity = dht.readHumidity();
 80a0d7a:	4c0a      	ldr	r4, [pc, #40]	; (80a0da4 <loop+0x2c>)
 80a0d7c:	2100      	movs	r1, #0
 80a0d7e:	4620      	mov	r0, r4
 80a0d80:	f000 f942 	bl	80a1008 <_ZN3DHT12readHumidityEb>
 80a0d84:	4b08      	ldr	r3, [pc, #32]	; (80a0da8 <loop+0x30>)
  temp = dht.readTemperature();
 80a0d86:	2200      	movs	r2, #0
 80a0d88:	4611      	mov	r1, r2
}

void loop()
{

  humidity = dht.readHumidity();
 80a0d8a:	6018      	str	r0, [r3, #0]
  temp = dht.readTemperature();
 80a0d8c:	4620      	mov	r0, r4
 80a0d8e:	f000 f8e7 	bl	80a0f60 <_ZN3DHT15readTemperatureEbb>
 80a0d92:	4b06      	ldr	r3, [pc, #24]	; (80a0dac <loop+0x34>)
 80a0d94:	6018      	str	r0, [r3, #0]
  printSerial();
 80a0d96:	f7ff fa39 	bl	80a020c <_Z11printSerialv>

  Blynk.run();
 80a0d9a:	2100      	movs	r1, #0
 80a0d9c:	4804      	ldr	r0, [pc, #16]	; (80a0db0 <loop+0x38>)
 80a0d9e:	f7ff fdd3 	bl	80a0948 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a0da2:	bd10      	pop	{r4, pc}
 80a0da4:	200000a0 	.word	0x200000a0
 80a0da8:	20000098 	.word	0x20000098
 80a0dac:	2000009c 	.word	0x2000009c
 80a0db0:	200000b4 	.word	0x200000b4

080a0db4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz>:
}
 80a0db4:	b570      	push	{r4, r5, r6, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
 80a0db6:	4d12      	ldr	r5, [pc, #72]	; (80a0e00 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x4c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0db8:	f000 f9a6 	bl	80a1108 <HAL_Pin_Map>
 80a0dbc:	4628      	mov	r0, r5
 80a0dbe:	f001 f8bd 	bl	80a1f3c <_ZN9TCPClientC1Ev>
 80a0dc2:	f105 001c 	add.w	r0, r5, #28
 80a0dc6:	2400      	movs	r4, #0
 80a0dc8:	f000 fc20 	bl	80a160c <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a0dcc:	4a0d      	ldr	r2, [pc, #52]	; (80a0e04 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x50>)
 80a0dce:	490e      	ldr	r1, [pc, #56]	; (80a0e08 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x54>)
 80a0dd0:	4628      	mov	r0, r5
 80a0dd2:	636c      	str	r4, [r5, #52]	; 0x34
 80a0dd4:	872c      	strh	r4, [r5, #56]	; 0x38
 80a0dd6:	f001 fc77 	bl	80a26c8 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
 80a0dda:	4b0c      	ldr	r3, [pc, #48]	; (80a0e0c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x58>)
// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "jUOUzcLpjsuVOaroXl2wsQQkRrGh-I8o";
float temp;
float humidity;
DHT dht(DHTPIN, DHTTYPE);
 80a0ddc:	220b      	movs	r2, #11
 80a0dde:	601d      	str	r5, [r3, #0]
 80a0de0:	605c      	str	r4, [r3, #4]
 80a0de2:	609c      	str	r4, [r3, #8]
 80a0de4:	60dc      	str	r4, [r3, #12]
 80a0de6:	611c      	str	r4, [r3, #16]
 80a0de8:	615c      	str	r4, [r3, #20]
 80a0dea:	831c      	strh	r4, [r3, #24]
 80a0dec:	835c      	strh	r4, [r3, #26]
 80a0dee:	771c      	strb	r4, [r3, #28]
 80a0df0:	775c      	strb	r4, [r3, #29]
 80a0df2:	2104      	movs	r1, #4
 80a0df4:	2306      	movs	r3, #6
 80a0df6:	4806      	ldr	r0, [pc, #24]	; (80a0e10 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x5c>)
  humidity = dht.readHumidity();
  temp = dht.readTemperature();
  printSerial();

  Blynk.run();
}
 80a0df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "jUOUzcLpjsuVOaroXl2wsQQkRrGh-I8o";
float temp;
float humidity;
DHT dht(DHTPIN, DHTTYPE);
 80a0dfc:	f000 b80a 	b.w	80a0e14 <_ZN3DHTC1Ehhh>
 80a0e00:	200000d4 	.word	0x200000d4
 80a0e04:	20000094 	.word	0x20000094
 80a0e08:	080a0139 	.word	0x080a0139
 80a0e0c:	200000b4 	.word	0x200000b4
 80a0e10:	200000a0 	.word	0x200000a0

080a0e14 <_ZN3DHTC1Ehhh>:

#define MIN_INTERVAL 2000

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
  _pin = pin;
  _type = type;
 80a0e14:	7182      	strb	r2, [r0, #6]
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
 80a0e16:	4a05      	ldr	r2, [pc, #20]	; (80a0e2c <_ZN3DHTC1Ehhh+0x18>)
#include "DHT.h"

#define MIN_INTERVAL 2000

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
  _pin = pin;
 80a0e18:	7141      	strb	r1, [r0, #5]
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
 80a0e1a:	6812      	ldr	r2, [r2, #0]
 80a0e1c:	4904      	ldr	r1, [pc, #16]	; (80a0e30 <_ZN3DHTC1Ehhh+0x1c>)
 80a0e1e:	fbb2 f1f1 	udiv	r1, r2, r1
 80a0e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0e26:	434a      	muls	r2, r1
 80a0e28:	60c2      	str	r2, [r0, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
 80a0e2a:	4770      	bx	lr
 80a0e2c:	20000028 	.word	0x20000028
 80a0e30:	000f4240 	.word	0x000f4240

080a0e34 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
 80a0e34:	b570      	push	{r4, r5, r6, lr}
 80a0e36:	4605      	mov	r5, r0
 80a0e38:	460e      	mov	r6, r1
  uint32_t count = 0;
 80a0e3a:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
 80a0e3c:	7968      	ldrb	r0, [r5, #5]
 80a0e3e:	f001 fb7b 	bl	80a2538 <digitalRead>
 80a0e42:	42b0      	cmp	r0, r6
 80a0e44:	d107      	bne.n	80a0e56 <_ZN3DHT11expectPulseEb+0x22>
      if (count++ >= _maxcycles) {
 80a0e46:	68eb      	ldr	r3, [r5, #12]
 80a0e48:	1c62      	adds	r2, r4, #1
 80a0e4a:	429c      	cmp	r4, r3
 80a0e4c:	d201      	bcs.n	80a0e52 <_ZN3DHT11expectPulseEb+0x1e>
 80a0e4e:	4614      	mov	r4, r2
 80a0e50:	e7f4      	b.n	80a0e3c <_ZN3DHT11expectPulseEb+0x8>
        return 0; // Exceeded timeout, fail.
 80a0e52:	2000      	movs	r0, #0
 80a0e54:	bd70      	pop	{r4, r5, r6, pc}
 80a0e56:	4620      	mov	r0, r4
      }
    }
  #endif

  return count;
}
 80a0e58:	bd70      	pop	{r4, r5, r6, pc}

080a0e5a <_ZN3DHT4readEb>:
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}

boolean DHT::read(bool force) {
 80a0e5a:	b530      	push	{r4, r5, lr}
 80a0e5c:	460d      	mov	r5, r1
 80a0e5e:	b0d1      	sub	sp, #324	; 0x144
 80a0e60:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0e62:	f000 f949 	bl	80a10f8 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
 80a0e66:	b935      	cbnz	r5, 80a0e76 <_ZN3DHT4readEb+0x1c>
 80a0e68:	68a3      	ldr	r3, [r4, #8]
 80a0e6a:	1ac3      	subs	r3, r0, r3
 80a0e6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0e70:	d201      	bcs.n	80a0e76 <_ZN3DHT4readEb+0x1c>
    return _lastresult; // return last correct measurement
 80a0e72:	7c20      	ldrb	r0, [r4, #16]
 80a0e74:	e071      	b.n	80a0f5a <_ZN3DHT4readEb+0x100>
  }
  _lastreadtime = currenttime;

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0e76:	2500      	movs	r5, #0
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
 80a0e78:	2101      	movs	r1, #1
  // to use last reading.
  uint32_t currenttime = millis();
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    return _lastresult; // return last correct measurement
  }
  _lastreadtime = currenttime;
 80a0e7a:	60a0      	str	r0, [r4, #8]

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0e7c:	7125      	strb	r5, [r4, #4]
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
 80a0e7e:	7960      	ldrb	r0, [r4, #5]
    return _lastresult; // return last correct measurement
  }
  _lastreadtime = currenttime;

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0e80:	70e5      	strb	r5, [r4, #3]
 80a0e82:	70a5      	strb	r5, [r4, #2]
 80a0e84:	7065      	strb	r5, [r4, #1]
 80a0e86:	7025      	strb	r5, [r4, #0]
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
 80a0e88:	f001 fb3d 	bl	80a2506 <digitalWrite>
  delay(250);
 80a0e8c:	20fa      	movs	r0, #250	; 0xfa
 80a0e8e:	f000 fb49 	bl	80a1524 <delay>

  // First set data line low for 20 milliseconds.
  pinMode(_pin, OUTPUT);
 80a0e92:	2101      	movs	r1, #1
 80a0e94:	7960      	ldrb	r0, [r4, #5]
 80a0e96:	f001 fb25 	bl	80a24e4 <pinMode>
  digitalWrite(_pin, LOW);
 80a0e9a:	4629      	mov	r1, r5
 80a0e9c:	7960      	ldrb	r0, [r4, #5]
 80a0e9e:	f001 fb32 	bl	80a2506 <digitalWrite>
  delay(20);
 80a0ea2:	2014      	movs	r0, #20
 80a0ea4:	f000 fb3e 	bl	80a1524 <delay>
};

class InterruptLock {
  public:
   InterruptLock() {
    noInterrupts();
 80a0ea8:	f000 fb8a 	bl	80a15c0 <_Z12noInterruptsv>
    // Turn off interrupts temporarily because the next sections are timing critical
    // and we don't want any interruptions.
    InterruptLock lock;

    // End the start signal by setting data line high for 40 microseconds.
    digitalWrite(_pin, HIGH);
 80a0eac:	2101      	movs	r1, #1
 80a0eae:	7960      	ldrb	r0, [r4, #5]
 80a0eb0:	f001 fb29 	bl	80a2506 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0eb4:	2028      	movs	r0, #40	; 0x28
 80a0eb6:	f000 f917 	bl	80a10e8 <HAL_Delay_Microseconds>
    delayMicroseconds(40);

    // Now start reading the data line to get the value from the DHT sensor.
    pinMode(_pin, INPUT_PULLUP);
 80a0eba:	2102      	movs	r1, #2
 80a0ebc:	7960      	ldrb	r0, [r4, #5]
 80a0ebe:	f001 fb11 	bl	80a24e4 <pinMode>
 80a0ec2:	200a      	movs	r0, #10
 80a0ec4:	f000 f910 	bl	80a10e8 <HAL_Delay_Microseconds>
    delayMicroseconds(10);  // Delay a bit to let sensor pull data line low.

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == 0) {
 80a0ec8:	4629      	mov	r1, r5
 80a0eca:	4620      	mov	r0, r4
 80a0ecc:	f7ff ffb2 	bl	80a0e34 <_ZN3DHT11expectPulseEb>
 80a0ed0:	b928      	cbnz	r0, 80a0ede <_ZN3DHT4readEb+0x84>
      DEBUG_PRINTLN(F("Timeout waiting for start signal low pulse."));
      _lastresult = false;
 80a0ed2:	2500      	movs	r5, #0
 80a0ed4:	7425      	strb	r5, [r4, #16]
   }
   ~InterruptLock() {
    interrupts();
 80a0ed6:	f000 fb75 	bl	80a15c4 <_Z10interruptsv>
 80a0eda:	4628      	mov	r0, r5
 80a0edc:	e03d      	b.n	80a0f5a <_ZN3DHT4readEb+0x100>
      return _lastresult;
    }
    if (expectPulse(HIGH) == 0) {
 80a0ede:	2101      	movs	r1, #1
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	f7ff ffa7 	bl	80a0e34 <_ZN3DHT11expectPulseEb>
 80a0ee6:	2800      	cmp	r0, #0
 80a0ee8:	d0f3      	beq.n	80a0ed2 <_ZN3DHT4readEb+0x78>
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
 80a0eea:	2100      	movs	r1, #0
 80a0eec:	4620      	mov	r0, r4
 80a0eee:	f7ff ffa1 	bl	80a0e34 <_ZN3DHT11expectPulseEb>
      cycles[i+1] = expectPulse(HIGH);
 80a0ef2:	2101      	movs	r1, #1
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
 80a0ef4:	f84d 0005 	str.w	r0, [sp, r5]
      cycles[i+1] = expectPulse(HIGH);
 80a0ef8:	4620      	mov	r0, r4
 80a0efa:	f7ff ff9b 	bl	80a0e34 <_ZN3DHT11expectPulseEb>
 80a0efe:	eb0d 0305 	add.w	r3, sp, r5
 80a0f02:	3508      	adds	r5, #8
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
 80a0f04:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
      cycles[i]   = expectPulse(LOW);
      cycles[i+1] = expectPulse(HIGH);
 80a0f08:	6058      	str	r0, [r3, #4]
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
 80a0f0a:	d1ee      	bne.n	80a0eea <_ZN3DHT4readEb+0x90>
 80a0f0c:	f000 fb5a 	bl	80a15c4 <_Z10interruptsv>
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a0f10:	2200      	movs	r2, #0
    uint32_t lowCycles  = cycles[2*i];
 80a0f12:	f85d 5032 	ldr.w	r5, [sp, r2, lsl #3]
    uint32_t highCycles = cycles[2*i+1];
 80a0f16:	eb0d 03c2 	add.w	r3, sp, r2, lsl #3
 80a0f1a:	6858      	ldr	r0, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
 80a0f1c:	b105      	cbz	r5, 80a0f20 <_ZN3DHT4readEb+0xc6>
 80a0f1e:	b908      	cbnz	r0, 80a0f24 <_ZN3DHT4readEb+0xca>
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
 80a0f20:	2000      	movs	r0, #0
 80a0f22:	e019      	b.n	80a0f58 <_ZN3DHT4readEb+0xfe>
      return _lastresult;
    }
    data[i/8] <<= 1;
 80a0f24:	10d1      	asrs	r1, r2, #3
 80a0f26:	5c63      	ldrb	r3, [r4, r1]
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
 80a0f28:	4285      	cmp	r5, r0
    if ((lowCycles == 0) || (highCycles == 0)) {
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
      return _lastresult;
    }
    data[i/8] <<= 1;
 80a0f2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a0f2e:	b2db      	uxtb	r3, r3
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a0f30:	f102 0201 	add.w	r2, r2, #1
    }
    data[i/8] <<= 1;
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
 80a0f34:	bf38      	it	cc
 80a0f36:	f043 0301 	orrcc.w	r3, r3, #1
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a0f3a:	2a28      	cmp	r2, #40	; 0x28
    }
    data[i/8] <<= 1;
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
 80a0f3c:	5463      	strb	r3, [r4, r1]
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a0f3e:	d1e8      	bne.n	80a0f12 <_ZN3DHT4readEb+0xb8>
  DEBUG_PRINT(data[3], HEX); DEBUG_PRINT(F(", "));
  DEBUG_PRINT(data[4], HEX); DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 80a0f40:	7822      	ldrb	r2, [r4, #0]
 80a0f42:	7863      	ldrb	r3, [r4, #1]
 80a0f44:	7921      	ldrb	r1, [r4, #4]
 80a0f46:	4413      	add	r3, r2
 80a0f48:	78a2      	ldrb	r2, [r4, #2]
 80a0f4a:	4413      	add	r3, r2
 80a0f4c:	78e2      	ldrb	r2, [r4, #3]
 80a0f4e:	4413      	add	r3, r2
 80a0f50:	b2db      	uxtb	r3, r3
 80a0f52:	4299      	cmp	r1, r3
 80a0f54:	d1e4      	bne.n	80a0f20 <_ZN3DHT4readEb+0xc6>
    _lastresult = true;
 80a0f56:	2001      	movs	r0, #1
 80a0f58:	7420      	strb	r0, [r4, #16]
  else {
    DEBUG_PRINTLN(F("Checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
 80a0f5a:	b051      	add	sp, #324	; 0x144
 80a0f5c:	bd30      	pop	{r4, r5, pc}
	...

080a0f60 <_ZN3DHT15readTemperatureEbb>:
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
 80a0f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f62:	460d      	mov	r5, r1
  float f = NAN;

  if (read(force)) {
 80a0f64:	4611      	mov	r1, r2
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
 80a0f66:	4604      	mov	r4, r0
  float f = NAN;

  if (read(force)) {
 80a0f68:	f7ff ff77 	bl	80a0e5a <_ZN3DHT4readEb>
 80a0f6c:	2800      	cmp	r0, #0
 80a0f6e:	d03c      	beq.n	80a0fea <_ZN3DHT15readTemperatureEbb+0x8a>
    switch (_type) {
 80a0f70:	79a3      	ldrb	r3, [r4, #6]
 80a0f72:	2b0b      	cmp	r3, #11
 80a0f74:	d004      	beq.n	80a0f80 <_ZN3DHT15readTemperatureEbb+0x20>
 80a0f76:	d338      	bcc.n	80a0fea <_ZN3DHT15readTemperatureEbb+0x8a>
 80a0f78:	3b15      	subs	r3, #21
 80a0f7a:	2b01      	cmp	r3, #1
 80a0f7c:	d906      	bls.n	80a0f8c <_ZN3DHT15readTemperatureEbb+0x2c>
 80a0f7e:	e034      	b.n	80a0fea <_ZN3DHT15readTemperatureEbb+0x8a>
    case DHT11:
      f = data[2];
 80a0f80:	78a0      	ldrb	r0, [r4, #2]
 80a0f82:	f002 fac1 	bl	80a3508 <__aeabi_ui2f>
 80a0f86:	4603      	mov	r3, r0
      if(S) {
 80a0f88:	b385      	cbz	r5, 80a0fec <_ZN3DHT15readTemperatureEbb+0x8c>
 80a0f8a:	e01f      	b.n	80a0fcc <_ZN3DHT15readTemperatureEbb+0x6c>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
 80a0f8c:	78a6      	ldrb	r6, [r4, #2]
 80a0f8e:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80a0f92:	f002 fabd 	bl	80a3510 <__aeabi_i2f>
      f *= 256;
 80a0f96:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0f9a:	f002 fb0d 	bl	80a35b8 <__aeabi_fmul>
 80a0f9e:	4607      	mov	r7, r0
      f += data[3];
      f *= 0.1;
 80a0fa0:	78e0      	ldrb	r0, [r4, #3]
 80a0fa2:	f002 fab5 	bl	80a3510 <__aeabi_i2f>
 80a0fa6:	4639      	mov	r1, r7
 80a0fa8:	f002 f9fe 	bl	80a33a8 <__addsf3>
 80a0fac:	f001 fe5a 	bl	80a2c64 <__aeabi_f2d>
 80a0fb0:	a30f      	add	r3, pc, #60	; (adr r3, 80a0ff0 <_ZN3DHT15readTemperatureEbb+0x90>)
 80a0fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fb6:	f001 fea9 	bl	80a2d0c <__aeabi_dmul>
 80a0fba:	f002 f99f 	bl	80a32fc <__aeabi_d2f>
      if (data[2] & 0x80) {
 80a0fbe:	0632      	lsls	r2, r6, #24
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
      f *= 256;
      f += data[3];
      f *= 0.1;
 80a0fc0:	4603      	mov	r3, r0
      if (data[2] & 0x80) {
        f *= -1;
 80a0fc2:	bf48      	it	mi
 80a0fc4:	f100 4300 	addmi.w	r3, r0, #2147483648	; 0x80000000
      }
      if(S) {
 80a0fc8:	b185      	cbz	r5, 80a0fec <_ZN3DHT15readTemperatureEbb+0x8c>
  }
  return f;
}

float DHT::convertCtoF(float c) {
  return c * 1.8 + 32;
 80a0fca:	4618      	mov	r0, r3
 80a0fcc:	f001 fe4a 	bl	80a2c64 <__aeabi_f2d>
 80a0fd0:	a309      	add	r3, pc, #36	; (adr r3, 80a0ff8 <_ZN3DHT15readTemperatureEbb+0x98>)
 80a0fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fd6:	f001 fe99 	bl	80a2d0c <__aeabi_dmul>
 80a0fda:	4b09      	ldr	r3, [pc, #36]	; (80a1000 <_ZN3DHT15readTemperatureEbb+0xa0>)
 80a0fdc:	2200      	movs	r2, #0
 80a0fde:	f001 fce3 	bl	80a29a8 <__adddf3>
 80a0fe2:	f002 f98b 	bl	80a32fc <__aeabi_d2f>
 80a0fe6:	4603      	mov	r3, r0
 80a0fe8:	e000      	b.n	80a0fec <_ZN3DHT15readTemperatureEbb+0x8c>
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
 80a0fea:	4b06      	ldr	r3, [pc, #24]	; (80a1004 <_ZN3DHT15readTemperatureEbb+0xa4>)
      }
      break;
    }
  }
  return f;
}
 80a0fec:	4618      	mov	r0, r3
 80a0fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0ff0:	9999999a 	.word	0x9999999a
 80a0ff4:	3fb99999 	.word	0x3fb99999
 80a0ff8:	cccccccd 	.word	0xcccccccd
 80a0ffc:	3ffccccc 	.word	0x3ffccccc
 80a1000:	40400000 	.word	0x40400000
 80a1004:	7fc00000 	.word	0x7fc00000

080a1008 <_ZN3DHT12readHumidityEb>:

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
 80a1008:	b538      	push	{r3, r4, r5, lr}
  float f = NAN;
  if (read()) {
 80a100a:	2100      	movs	r1, #0

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
 80a100c:	4604      	mov	r4, r0
  float f = NAN;
  if (read()) {
 80a100e:	f7ff ff24 	bl	80a0e5a <_ZN3DHT4readEb>
 80a1012:	b310      	cbz	r0, 80a105a <_ZN3DHT12readHumidityEb+0x52>
    switch (_type) {
 80a1014:	79a3      	ldrb	r3, [r4, #6]
 80a1016:	2b0b      	cmp	r3, #11
 80a1018:	d01b      	beq.n	80a1052 <_ZN3DHT12readHumidityEb+0x4a>
 80a101a:	d31e      	bcc.n	80a105a <_ZN3DHT12readHumidityEb+0x52>
 80a101c:	3b15      	subs	r3, #21
 80a101e:	2b01      	cmp	r3, #1
 80a1020:	d81b      	bhi.n	80a105a <_ZN3DHT12readHumidityEb+0x52>
    case DHT11:
      f = data[0];
      break;
    case DHT22:
    case DHT21:
      f = data[0];
 80a1022:	7820      	ldrb	r0, [r4, #0]
 80a1024:	f002 fa70 	bl	80a3508 <__aeabi_ui2f>
      f *= 256;
 80a1028:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a102c:	f002 fac4 	bl	80a35b8 <__aeabi_fmul>
 80a1030:	4605      	mov	r5, r0
      f += data[1];
      f *= 0.1;
 80a1032:	7860      	ldrb	r0, [r4, #1]
 80a1034:	f002 fa6c 	bl	80a3510 <__aeabi_i2f>
 80a1038:	4629      	mov	r1, r5
 80a103a:	f002 f9b5 	bl	80a33a8 <__addsf3>
 80a103e:	f001 fe11 	bl	80a2c64 <__aeabi_f2d>
 80a1042:	a307      	add	r3, pc, #28	; (adr r3, 80a1060 <_ZN3DHT12readHumidityEb+0x58>)
 80a1044:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1048:	f001 fe60 	bl	80a2d0c <__aeabi_dmul>
 80a104c:	f002 f956 	bl	80a32fc <__aeabi_d2f>
      break;
 80a1050:	bd38      	pop	{r3, r4, r5, pc}
float DHT::readHumidity(bool force) {
  float f = NAN;
  if (read()) {
    switch (_type) {
    case DHT11:
      f = data[0];
 80a1052:	7820      	ldrb	r0, [r4, #0]
 80a1054:	f002 fa58 	bl	80a3508 <__aeabi_ui2f>
      break;
 80a1058:	bd38      	pop	{r3, r4, r5, pc}
float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
  float f = NAN;
 80a105a:	4803      	ldr	r0, [pc, #12]	; (80a1068 <_ZN3DHT12readHumidityEb+0x60>)
      f *= 0.1;
      break;
    }
  }
  return f;
}
 80a105c:	bd38      	pop	{r3, r4, r5, pc}
 80a105e:	bf00      	nop
 80a1060:	9999999a 	.word	0x9999999a
 80a1064:	3fb99999 	.word	0x3fb99999
 80a1068:	7fc00000 	.word	0x7fc00000

080a106c <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a106c:	f000 b84c 	b.w	80a1108 <HAL_Pin_Map>

080a1070 <_GLOBAL__sub_I__ZN11DHT_UnifiedC2Ehhhll>:
 80a1070:	f000 b84a 	b.w	80a1108 <HAL_Pin_Map>

080a1074 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a1074:	f000 ba56 	b.w	80a1524 <delay>

080a1078 <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1078:	f000 b83e 	b.w	80a10f8 <HAL_Timer_Get_Milli_Seconds>

080a107c <_GLOBAL__sub_I__Z10BlynkResetv>:
 80a107c:	f000 b844 	b.w	80a1108 <HAL_Pin_Map>

080a1080 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
 80a1080:	4770      	bx	lr

080a1082 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
 80a1082:	4770      	bx	lr

080a1084 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
 80a1084:	4770      	bx	lr
	...

080a1088 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a1088:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a108a:	bf9a      	itte	ls
 80a108c:	4b02      	ldrls	r3, [pc, #8]	; (80a1098 <GetReadHandler+0x10>)
 80a108e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
 80a1092:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
 80a1094:	4770      	bx	lr
 80a1096:	bf00      	nop
 80a1098:	080a3e6c 	.word	0x080a3e6c

080a109c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a109c:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a109e:	bf9a      	itte	ls
 80a10a0:	4b02      	ldrls	r3, [pc, #8]	; (80a10ac <GetWriteHandler+0x10>)
 80a10a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
 80a10a6:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
 80a10a8:	4770      	bx	lr
 80a10aa:	bf00      	nop
 80a10ac:	080a3c6c 	.word	0x080a3c6c

080a10b0 <_GLOBAL__sub_I_BlynkNoOpCbk>:
 80a10b0:	f000 b82a 	b.w	80a1108 <HAL_Pin_Map>

080a10b4 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
 80a10b4:	f000 b828 	b.w	80a1108 <HAL_Pin_Map>

080a10b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a10b8:	b508      	push	{r3, lr}
 80a10ba:	4b02      	ldr	r3, [pc, #8]	; (80a10c4 <os_mutex_recursive_create+0xc>)
 80a10bc:	681b      	ldr	r3, [r3, #0]
 80a10be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a10c0:	9301      	str	r3, [sp, #4]
 80a10c2:	bd08      	pop	{r3, pc}
 80a10c4:	080601d0 	.word	0x080601d0

080a10c8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a10c8:	b508      	push	{r3, lr}
 80a10ca:	4b02      	ldr	r3, [pc, #8]	; (80a10d4 <os_mutex_recursive_destroy+0xc>)
 80a10cc:	681b      	ldr	r3, [r3, #0]
 80a10ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a10d0:	9301      	str	r3, [sp, #4]
 80a10d2:	bd08      	pop	{r3, pc}
 80a10d4:	080601d0 	.word	0x080601d0

080a10d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a10d8:	b508      	push	{r3, lr}
 80a10da:	4b02      	ldr	r3, [pc, #8]	; (80a10e4 <HAL_RNG_GetRandomNumber+0xc>)
 80a10dc:	681b      	ldr	r3, [r3, #0]
 80a10de:	685b      	ldr	r3, [r3, #4]
 80a10e0:	9301      	str	r3, [sp, #4]
 80a10e2:	bd08      	pop	{r3, pc}
 80a10e4:	0806019c 	.word	0x0806019c

080a10e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a10e8:	b508      	push	{r3, lr}
 80a10ea:	4b02      	ldr	r3, [pc, #8]	; (80a10f4 <HAL_Delay_Microseconds+0xc>)
 80a10ec:	681b      	ldr	r3, [r3, #0]
 80a10ee:	68db      	ldr	r3, [r3, #12]
 80a10f0:	9301      	str	r3, [sp, #4]
 80a10f2:	bd08      	pop	{r3, pc}
 80a10f4:	0806019c 	.word	0x0806019c

080a10f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a10f8:	b508      	push	{r3, lr}
 80a10fa:	4b02      	ldr	r3, [pc, #8]	; (80a1104 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a10fc:	681b      	ldr	r3, [r3, #0]
 80a10fe:	695b      	ldr	r3, [r3, #20]
 80a1100:	9301      	str	r3, [sp, #4]
 80a1102:	bd08      	pop	{r3, pc}
 80a1104:	0806019c 	.word	0x0806019c

080a1108 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1108:	b508      	push	{r3, lr}
 80a110a:	4b02      	ldr	r3, [pc, #8]	; (80a1114 <HAL_Pin_Map+0xc>)
 80a110c:	681b      	ldr	r3, [r3, #0]
 80a110e:	681b      	ldr	r3, [r3, #0]
 80a1110:	9301      	str	r3, [sp, #4]
 80a1112:	bd08      	pop	{r3, pc}
 80a1114:	080601b0 	.word	0x080601b0

080a1118 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1118:	b508      	push	{r3, lr}
 80a111a:	4b02      	ldr	r3, [pc, #8]	; (80a1124 <HAL_Validate_Pin_Function+0xc>)
 80a111c:	681b      	ldr	r3, [r3, #0]
 80a111e:	685b      	ldr	r3, [r3, #4]
 80a1120:	9301      	str	r3, [sp, #4]
 80a1122:	bd08      	pop	{r3, pc}
 80a1124:	080601b0 	.word	0x080601b0

080a1128 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1128:	b508      	push	{r3, lr}
 80a112a:	4b02      	ldr	r3, [pc, #8]	; (80a1134 <HAL_Pin_Mode+0xc>)
 80a112c:	681b      	ldr	r3, [r3, #0]
 80a112e:	689b      	ldr	r3, [r3, #8]
 80a1130:	9301      	str	r3, [sp, #4]
 80a1132:	bd08      	pop	{r3, pc}
 80a1134:	080601b0 	.word	0x080601b0

080a1138 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1138:	b508      	push	{r3, lr}
 80a113a:	4b02      	ldr	r3, [pc, #8]	; (80a1144 <HAL_Get_Pin_Mode+0xc>)
 80a113c:	681b      	ldr	r3, [r3, #0]
 80a113e:	68db      	ldr	r3, [r3, #12]
 80a1140:	9301      	str	r3, [sp, #4]
 80a1142:	bd08      	pop	{r3, pc}
 80a1144:	080601b0 	.word	0x080601b0

080a1148 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1148:	b508      	push	{r3, lr}
 80a114a:	4b02      	ldr	r3, [pc, #8]	; (80a1154 <HAL_GPIO_Write+0xc>)
 80a114c:	681b      	ldr	r3, [r3, #0]
 80a114e:	691b      	ldr	r3, [r3, #16]
 80a1150:	9301      	str	r3, [sp, #4]
 80a1152:	bd08      	pop	{r3, pc}
 80a1154:	080601b0 	.word	0x080601b0

080a1158 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1158:	b508      	push	{r3, lr}
 80a115a:	4b02      	ldr	r3, [pc, #8]	; (80a1164 <HAL_GPIO_Read+0xc>)
 80a115c:	681b      	ldr	r3, [r3, #0]
 80a115e:	695b      	ldr	r3, [r3, #20]
 80a1160:	9301      	str	r3, [sp, #4]
 80a1162:	bd08      	pop	{r3, pc}
 80a1164:	080601b0 	.word	0x080601b0

080a1168 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a1168:	b508      	push	{r3, lr}
 80a116a:	4b02      	ldr	r3, [pc, #8]	; (80a1174 <HAL_Interrupts_Enable_All+0xc>)
 80a116c:	681b      	ldr	r3, [r3, #0]
 80a116e:	6a1b      	ldr	r3, [r3, #32]
 80a1170:	9301      	str	r3, [sp, #4]
 80a1172:	bd08      	pop	{r3, pc}
 80a1174:	080601b0 	.word	0x080601b0

080a1178 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a1178:	b508      	push	{r3, lr}
 80a117a:	4b02      	ldr	r3, [pc, #8]	; (80a1184 <HAL_Interrupts_Disable_All+0xc>)
 80a117c:	681b      	ldr	r3, [r3, #0]
 80a117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1180:	9301      	str	r3, [sp, #4]
 80a1182:	bd08      	pop	{r3, pc}
 80a1184:	080601b0 	.word	0x080601b0

080a1188 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a1188:	b508      	push	{r3, lr}
 80a118a:	4b02      	ldr	r3, [pc, #8]	; (80a1194 <HAL_DAC_Write+0xc>)
 80a118c:	681b      	ldr	r3, [r3, #0]
 80a118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1190:	9301      	str	r3, [sp, #4]
 80a1192:	bd08      	pop	{r3, pc}
 80a1194:	080601b0 	.word	0x080601b0

080a1198 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1198:	b508      	push	{r3, lr}
 80a119a:	4b02      	ldr	r3, [pc, #8]	; (80a11a4 <HAL_ADC_Read+0xc>)
 80a119c:	681b      	ldr	r3, [r3, #0]
 80a119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11a0:	9301      	str	r3, [sp, #4]
 80a11a2:	bd08      	pop	{r3, pc}
 80a11a4:	080601b0 	.word	0x080601b0

080a11a8 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a11a8:	b508      	push	{r3, lr}
 80a11aa:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <HAL_PWM_Write_Ext+0xc>)
 80a11ac:	681b      	ldr	r3, [r3, #0]
 80a11ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a11b0:	9301      	str	r3, [sp, #4]
 80a11b2:	bd08      	pop	{r3, pc}
 80a11b4:	080601b0 	.word	0x080601b0

080a11b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a11b8:	b508      	push	{r3, lr}
 80a11ba:	4b02      	ldr	r3, [pc, #8]	; (80a11c4 <HAL_I2C_Write_Data+0xc>)
 80a11bc:	681b      	ldr	r3, [r3, #0]
 80a11be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a11c0:	9301      	str	r3, [sp, #4]
 80a11c2:	bd08      	pop	{r3, pc}
 80a11c4:	080601ac 	.word	0x080601ac

080a11c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a11c8:	b508      	push	{r3, lr}
 80a11ca:	4b02      	ldr	r3, [pc, #8]	; (80a11d4 <HAL_I2C_Available_Data+0xc>)
 80a11cc:	681b      	ldr	r3, [r3, #0]
 80a11ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a11d0:	9301      	str	r3, [sp, #4]
 80a11d2:	bd08      	pop	{r3, pc}
 80a11d4:	080601ac 	.word	0x080601ac

080a11d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b02      	ldr	r3, [pc, #8]	; (80a11e4 <HAL_I2C_Read_Data+0xc>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	bd08      	pop	{r3, pc}
 80a11e4:	080601ac 	.word	0x080601ac

080a11e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a11e8:	b508      	push	{r3, lr}
 80a11ea:	4b02      	ldr	r3, [pc, #8]	; (80a11f4 <HAL_I2C_Peek_Data+0xc>)
 80a11ec:	681b      	ldr	r3, [r3, #0]
 80a11ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a11f0:	9301      	str	r3, [sp, #4]
 80a11f2:	bd08      	pop	{r3, pc}
 80a11f4:	080601ac 	.word	0x080601ac

080a11f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a11f8:	b508      	push	{r3, lr}
 80a11fa:	4b02      	ldr	r3, [pc, #8]	; (80a1204 <HAL_I2C_Flush_Data+0xc>)
 80a11fc:	681b      	ldr	r3, [r3, #0]
 80a11fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1200:	9301      	str	r3, [sp, #4]
 80a1202:	bd08      	pop	{r3, pc}
 80a1204:	080601ac 	.word	0x080601ac

080a1208 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1208:	b508      	push	{r3, lr}
 80a120a:	4b02      	ldr	r3, [pc, #8]	; (80a1214 <HAL_I2C_Is_Enabled+0xc>)
 80a120c:	681b      	ldr	r3, [r3, #0]
 80a120e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1210:	9301      	str	r3, [sp, #4]
 80a1212:	bd08      	pop	{r3, pc}
 80a1214:	080601ac 	.word	0x080601ac

080a1218 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1218:	b508      	push	{r3, lr}
 80a121a:	4b03      	ldr	r3, [pc, #12]	; (80a1228 <HAL_I2C_Init+0x10>)
 80a121c:	681b      	ldr	r3, [r3, #0]
 80a121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1222:	9301      	str	r3, [sp, #4]
 80a1224:	bd08      	pop	{r3, pc}
 80a1226:	0000      	.short	0x0000
 80a1228:	080601ac 	.word	0x080601ac

080a122c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <socket_active_status+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	681b      	ldr	r3, [r3, #0]
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601bc 	.word	0x080601bc

080a123c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <socket_handle_valid+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	685b      	ldr	r3, [r3, #4]
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601bc 	.word	0x080601bc

080a124c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <socket_create+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	689b      	ldr	r3, [r3, #8]
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601bc 	.word	0x080601bc

080a125c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <socket_connect+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	68db      	ldr	r3, [r3, #12]
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080601bc 	.word	0x080601bc

080a126c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <socket_receive+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	691b      	ldr	r3, [r3, #16]
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	080601bc 	.word	0x080601bc

080a127c <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <socket_close+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	6a1b      	ldr	r3, [r3, #32]
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601bc 	.word	0x080601bc

080a128c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <socket_handle_invalid+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601bc 	.word	0x080601bc

080a129c <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <socket_send_ex+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601bc 	.word	0x080601bc

080a12ac <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <HAL_SPI_Init+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	69db      	ldr	r3, [r3, #28]
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601b4 	.word	0x080601b4

080a12bc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <HAL_SPI_Is_Enabled+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	6a1b      	ldr	r3, [r3, #32]
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601b4 	.word	0x080601b4

080a12cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <HAL_USART_Init+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	699b      	ldr	r3, [r3, #24]
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601c4 	.word	0x080601c4

080a12dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <HAL_USART_Write_Data+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601c4 	.word	0x080601c4

080a12ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <HAL_USART_Available_Data+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601c4 	.word	0x080601c4

080a12fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b02      	ldr	r3, [pc, #8]	; (80a1308 <HAL_USART_Read_Data+0xc>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1304:	9301      	str	r3, [sp, #4]
 80a1306:	bd08      	pop	{r3, pc}
 80a1308:	080601c4 	.word	0x080601c4

080a130c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a130c:	b508      	push	{r3, lr}
 80a130e:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <HAL_USART_Peek_Data+0xc>)
 80a1310:	681b      	ldr	r3, [r3, #0]
 80a1312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1314:	9301      	str	r3, [sp, #4]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	080601c4 	.word	0x080601c4

080a131c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a131c:	b508      	push	{r3, lr}
 80a131e:	4b02      	ldr	r3, [pc, #8]	; (80a1328 <HAL_USART_Flush_Data+0xc>)
 80a1320:	681b      	ldr	r3, [r3, #0]
 80a1322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1324:	9301      	str	r3, [sp, #4]
 80a1326:	bd08      	pop	{r3, pc}
 80a1328:	080601c4 	.word	0x080601c4

080a132c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <HAL_USART_Is_Enabled+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601c4 	.word	0x080601c4

080a133c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a133c:	b508      	push	{r3, lr}
 80a133e:	4b02      	ldr	r3, [pc, #8]	; (80a1348 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1340:	681b      	ldr	r3, [r3, #0]
 80a1342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1344:	9301      	str	r3, [sp, #4]
 80a1346:	bd08      	pop	{r3, pc}
 80a1348:	080601c4 	.word	0x080601c4

080a134c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a134c:	b508      	push	{r3, lr}
 80a134e:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <HAL_USB_USART_Init+0xc>)
 80a1350:	681b      	ldr	r3, [r3, #0]
 80a1352:	681b      	ldr	r3, [r3, #0]
 80a1354:	9301      	str	r3, [sp, #4]
 80a1356:	bd08      	pop	{r3, pc}
 80a1358:	080601d8 	.word	0x080601d8

080a135c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a135c:	b508      	push	{r3, lr}
 80a135e:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <HAL_USB_USART_Begin+0xc>)
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	685b      	ldr	r3, [r3, #4]
 80a1364:	9301      	str	r3, [sp, #4]
 80a1366:	bd08      	pop	{r3, pc}
 80a1368:	080601d8 	.word	0x080601d8

080a136c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a136c:	b508      	push	{r3, lr}
 80a136e:	4b02      	ldr	r3, [pc, #8]	; (80a1378 <HAL_USB_USART_Available_Data+0xc>)
 80a1370:	681b      	ldr	r3, [r3, #0]
 80a1372:	691b      	ldr	r3, [r3, #16]
 80a1374:	9301      	str	r3, [sp, #4]
 80a1376:	bd08      	pop	{r3, pc}
 80a1378:	080601d8 	.word	0x080601d8

080a137c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a137c:	b508      	push	{r3, lr}
 80a137e:	4b02      	ldr	r3, [pc, #8]	; (80a1388 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	695b      	ldr	r3, [r3, #20]
 80a1384:	9301      	str	r3, [sp, #4]
 80a1386:	bd08      	pop	{r3, pc}
 80a1388:	080601d8 	.word	0x080601d8

080a138c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a138c:	b508      	push	{r3, lr}
 80a138e:	4b02      	ldr	r3, [pc, #8]	; (80a1398 <HAL_USB_USART_Receive_Data+0xc>)
 80a1390:	681b      	ldr	r3, [r3, #0]
 80a1392:	699b      	ldr	r3, [r3, #24]
 80a1394:	9301      	str	r3, [sp, #4]
 80a1396:	bd08      	pop	{r3, pc}
 80a1398:	080601d8 	.word	0x080601d8

080a139c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a139c:	b508      	push	{r3, lr}
 80a139e:	4b02      	ldr	r3, [pc, #8]	; (80a13a8 <HAL_USB_USART_Send_Data+0xc>)
 80a13a0:	681b      	ldr	r3, [r3, #0]
 80a13a2:	69db      	ldr	r3, [r3, #28]
 80a13a4:	9301      	str	r3, [sp, #4]
 80a13a6:	bd08      	pop	{r3, pc}
 80a13a8:	080601d8 	.word	0x080601d8

080a13ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a13ac:	b508      	push	{r3, lr}
 80a13ae:	4b02      	ldr	r3, [pc, #8]	; (80a13b8 <HAL_USB_USART_Flush_Data+0xc>)
 80a13b0:	681b      	ldr	r3, [r3, #0]
 80a13b2:	6a1b      	ldr	r3, [r3, #32]
 80a13b4:	9301      	str	r3, [sp, #4]
 80a13b6:	bd08      	pop	{r3, pc}
 80a13b8:	080601d8 	.word	0x080601d8

080a13bc <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a13bc:	b508      	push	{r3, lr}
 80a13be:	4b02      	ldr	r3, [pc, #8]	; (80a13c8 <HAL_NET_SetNetWatchDog+0xc>)
 80a13c0:	681b      	ldr	r3, [r3, #0]
 80a13c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a13c4:	9301      	str	r3, [sp, #4]
 80a13c6:	bd08      	pop	{r3, pc}
 80a13c8:	080601c0 	.word	0x080601c0

080a13cc <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a13cc:	b508      	push	{r3, lr}
 80a13ce:	4b02      	ldr	r3, [pc, #8]	; (80a13d8 <inet_gethostbyname+0xc>)
 80a13d0:	681b      	ldr	r3, [r3, #0]
 80a13d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a13d4:	9301      	str	r3, [sp, #4]
 80a13d6:	bd08      	pop	{r3, pc}
 80a13d8:	080601c0 	.word	0x080601c0

080a13dc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a13dc:	b508      	push	{r3, lr}
 80a13de:	4b02      	ldr	r3, [pc, #8]	; (80a13e8 <log_message+0xc>)
 80a13e0:	681b      	ldr	r3, [r3, #0]
 80a13e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a13e4:	9301      	str	r3, [sp, #4]
 80a13e6:	bd08      	pop	{r3, pc}
 80a13e8:	080201a8 	.word	0x080201a8

080a13ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a13ec:	b508      	push	{r3, lr}
 80a13ee:	4b02      	ldr	r3, [pc, #8]	; (80a13f8 <set_system_mode+0xc>)
 80a13f0:	681b      	ldr	r3, [r3, #0]
 80a13f2:	685b      	ldr	r3, [r3, #4]
 80a13f4:	9301      	str	r3, [sp, #4]
 80a13f6:	bd08      	pop	{r3, pc}
 80a13f8:	080601a4 	.word	0x080601a4

080a13fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a13fc:	b508      	push	{r3, lr}
 80a13fe:	4b02      	ldr	r3, [pc, #8]	; (80a1408 <system_delay_ms+0xc>)
 80a1400:	681b      	ldr	r3, [r3, #0]
 80a1402:	695b      	ldr	r3, [r3, #20]
 80a1404:	9301      	str	r3, [sp, #4]
 80a1406:	bd08      	pop	{r3, pc}
 80a1408:	080601a4 	.word	0x080601a4

080a140c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a140c:	b508      	push	{r3, lr}
 80a140e:	4b03      	ldr	r3, [pc, #12]	; (80a141c <system_ctrl_set_app_request_handler+0x10>)
 80a1410:	681b      	ldr	r3, [r3, #0]
 80a1412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1416:	9301      	str	r3, [sp, #4]
 80a1418:	bd08      	pop	{r3, pc}
 80a141a:	0000      	.short	0x0000
 80a141c:	080601a4 	.word	0x080601a4

080a1420 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b03      	ldr	r3, [pc, #12]	; (80a1430 <system_ctrl_set_result+0x10>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a142a:	9301      	str	r3, [sp, #4]
 80a142c:	bd08      	pop	{r3, pc}
 80a142e:	0000      	.short	0x0000
 80a1430:	080601a4 	.word	0x080601a4

080a1434 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <spark_process+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	689b      	ldr	r3, [r3, #8]
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601cc 	.word	0x080601cc

080a1444 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	080601cc 	.word	0x080601cc

080a1454 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <network_connect+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	685b      	ldr	r3, [r3, #4]
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601c8 	.word	0x080601c8

080a1464 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <network_connecting+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	689b      	ldr	r3, [r3, #8]
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	080601c8 	.word	0x080601c8

080a1474 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <network_disconnect+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	68db      	ldr	r3, [r3, #12]
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080601c8 	.word	0x080601c8

080a1484 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <network_ready+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	691b      	ldr	r3, [r3, #16]
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080601c8 	.word	0x080601c8

080a1494 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b02      	ldr	r3, [pc, #8]	; (80a14a0 <network_on+0xc>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	695b      	ldr	r3, [r3, #20]
 80a149c:	9301      	str	r3, [sp, #4]
 80a149e:	bd08      	pop	{r3, pc}
 80a14a0:	080601c8 	.word	0x080601c8

080a14a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14a4:	b508      	push	{r3, lr}
 80a14a6:	4b02      	ldr	r3, [pc, #8]	; (80a14b0 <network_off+0xc>)
 80a14a8:	681b      	ldr	r3, [r3, #0]
 80a14aa:	699b      	ldr	r3, [r3, #24]
 80a14ac:	9301      	str	r3, [sp, #4]
 80a14ae:	bd08      	pop	{r3, pc}
 80a14b0:	080601c8 	.word	0x080601c8

080a14b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <network_listen+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	69db      	ldr	r3, [r3, #28]
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601c8 	.word	0x080601c8

080a14c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <network_listening+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	6a1b      	ldr	r3, [r3, #32]
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601c8 	.word	0x080601c8

080a14d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <network_set_listen_timeout+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	080601c8 	.word	0x080601c8

080a14e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <network_get_listen_timeout+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	080601c8 	.word	0x080601c8

080a14f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <malloc+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	681b      	ldr	r3, [r3, #0]
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	080601a0 	.word	0x080601a0

080a1504 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <free+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	685b      	ldr	r3, [r3, #4]
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601a0 	.word	0x080601a0

080a1514 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <snprintf+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	69db      	ldr	r3, [r3, #28]
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601a0 	.word	0x080601a0

080a1524 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1524:	2100      	movs	r1, #0
 80a1526:	f7ff bf69 	b.w	80a13fc <system_delay_ms>

080a152a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a152a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a152c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a152e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1530:	b113      	cbz	r3, 80a1538 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1532:	2203      	movs	r2, #3
 80a1534:	4601      	mov	r1, r0
 80a1536:	4798      	blx	r3
    }
 80a1538:	4620      	mov	r0, r4
 80a153a:	bd10      	pop	{r4, pc}

080a153c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a153c:	4770      	bx	lr

080a153e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a153e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1540:	4606      	mov	r6, r0
 80a1542:	4615      	mov	r5, r2
 80a1544:	460c      	mov	r4, r1
 80a1546:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1548:	42bc      	cmp	r4, r7
 80a154a:	d006      	beq.n	80a155a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a154c:	6833      	ldr	r3, [r6, #0]
 80a154e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1552:	689b      	ldr	r3, [r3, #8]
 80a1554:	4630      	mov	r0, r6
 80a1556:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1558:	e7f6      	b.n	80a1548 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a155a:	4628      	mov	r0, r5
 80a155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a155e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a155e:	2200      	movs	r2, #0
 80a1560:	7c00      	ldrb	r0, [r0, #16]
 80a1562:	f7ff be29 	b.w	80a11b8 <HAL_I2C_Write_Data>

080a1566 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1566:	2100      	movs	r1, #0
 80a1568:	7c00      	ldrb	r0, [r0, #16]
 80a156a:	f7ff be2d 	b.w	80a11c8 <HAL_I2C_Available_Data>

080a156e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a156e:	2100      	movs	r1, #0
 80a1570:	7c00      	ldrb	r0, [r0, #16]
 80a1572:	f7ff be31 	b.w	80a11d8 <HAL_I2C_Read_Data>

080a1576 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1576:	2100      	movs	r1, #0
 80a1578:	7c00      	ldrb	r0, [r0, #16]
 80a157a:	f7ff be35 	b.w	80a11e8 <HAL_I2C_Peek_Data>

080a157e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a157e:	2100      	movs	r1, #0
 80a1580:	7c00      	ldrb	r0, [r0, #16]
 80a1582:	f7ff be39 	b.w	80a11f8 <HAL_I2C_Flush_Data>

080a1586 <_ZN7TwoWireD0Ev>:
 80a1586:	b510      	push	{r4, lr}
 80a1588:	4604      	mov	r4, r0
 80a158a:	2114      	movs	r1, #20
 80a158c:	f001 f8a1 	bl	80a26d2 <_ZdlPvj>
 80a1590:	4620      	mov	r0, r4
 80a1592:	bd10      	pop	{r4, pc}

080a1594 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1594:	b510      	push	{r4, lr}
 80a1596:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1598:	2300      	movs	r3, #0
 80a159a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15a0:	60a3      	str	r3, [r4, #8]
 80a15a2:	4b04      	ldr	r3, [pc, #16]	; (80a15b4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a15a4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a15a6:	4608      	mov	r0, r1
 80a15a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a15aa:	4611      	mov	r1, r2
 80a15ac:	f7ff fe34 	bl	80a1218 <HAL_I2C_Init>
}
 80a15b0:	4620      	mov	r0, r4
 80a15b2:	bd10      	pop	{r4, pc}
 80a15b4:	080a4074 	.word	0x080a4074

080a15b8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a15b8:	2100      	movs	r1, #0
 80a15ba:	7c00      	ldrb	r0, [r0, #16]
 80a15bc:	f7ff be24 	b.w	80a1208 <HAL_I2C_Is_Enabled>

080a15c0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a15c0:	f7ff bdda 	b.w	80a1178 <HAL_Interrupts_Disable_All>

080a15c4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a15c4:	f7ff bdd0 	b.w	80a1168 <HAL_Interrupts_Enable_All>

080a15c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a15c8:	4770      	bx	lr

080a15ca <_ZN9IPAddressD0Ev>:
 80a15ca:	b510      	push	{r4, lr}
 80a15cc:	4604      	mov	r4, r0
 80a15ce:	2118      	movs	r1, #24
 80a15d0:	f001 f87f 	bl	80a26d2 <_ZdlPvj>
 80a15d4:	4620      	mov	r0, r4
 80a15d6:	bd10      	pop	{r4, pc}

080a15d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a15d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15da:	460f      	mov	r7, r1
 80a15dc:	f100 0608 	add.w	r6, r0, #8
 80a15e0:	1d05      	adds	r5, r0, #4
 80a15e2:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a15e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a15e8:	220a      	movs	r2, #10
 80a15ea:	4638      	mov	r0, r7
 80a15ec:	f000 f90d 	bl	80a180a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a15f0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a15f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a15f4:	d007      	beq.n	80a1606 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a15f6:	2c00      	cmp	r4, #0
 80a15f8:	d0f4      	beq.n	80a15e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a15fa:	212e      	movs	r1, #46	; 0x2e
 80a15fc:	4638      	mov	r0, r7
 80a15fe:	f000 f8eb 	bl	80a17d8 <_ZN5Print5printEc>
 80a1602:	4404      	add	r4, r0
 80a1604:	e7ee      	b.n	80a15e4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1606:	4620      	mov	r0, r4
 80a1608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a160c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a160c:	b510      	push	{r4, lr}
 80a160e:	4604      	mov	r4, r0
 80a1610:	4b04      	ldr	r3, [pc, #16]	; (80a1624 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1612:	2211      	movs	r2, #17
 80a1614:	f840 3b04 	str.w	r3, [r0], #4
 80a1618:	2100      	movs	r1, #0
 80a161a:	f002 f93e 	bl	80a389a <memset>
{
    clear();
}
 80a161e:	4620      	mov	r0, r4
 80a1620:	bd10      	pop	{r4, pc}
 80a1622:	bf00      	nop
 80a1624:	080a409c 	.word	0x080a409c

080a1628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1628:	4603      	mov	r3, r0
 80a162a:	4a07      	ldr	r2, [pc, #28]	; (80a1648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a162c:	b510      	push	{r4, lr}
 80a162e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1632:	f101 0210 	add.w	r2, r1, #16
 80a1636:	f851 4b04 	ldr.w	r4, [r1], #4
 80a163a:	4291      	cmp	r1, r2
 80a163c:	f843 4b04 	str.w	r4, [r3], #4
 80a1640:	d1f9      	bne.n	80a1636 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1642:	780a      	ldrb	r2, [r1, #0]
 80a1644:	701a      	strb	r2, [r3, #0]
}
 80a1646:	bd10      	pop	{r4, pc}
 80a1648:	080a409c 	.word	0x080a409c

080a164c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a164c:	4a02      	ldr	r2, [pc, #8]	; (80a1658 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a164e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1650:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1652:	2204      	movs	r2, #4
 80a1654:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1656:	4770      	bx	lr
 80a1658:	080a409c 	.word	0x080a409c

080a165c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a165c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a165e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1662:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1666:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a166a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a166e:	2304      	movs	r3, #4
 80a1670:	6041      	str	r1, [r0, #4]
 80a1672:	7503      	strb	r3, [r0, #20]
 80a1674:	bd10      	pop	{r4, pc}
	...

080a1678 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a167a:	4d04      	ldr	r5, [pc, #16]	; (80a168c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a167c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a167e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1682:	9500      	str	r5, [sp, #0]
 80a1684:	f7ff ffea 	bl	80a165c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1688:	b003      	add	sp, #12
 80a168a:	bd30      	pop	{r4, r5, pc}
 80a168c:	080a409c 	.word	0x080a409c

080a1690 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1690:	4a01      	ldr	r2, [pc, #4]	; (80a1698 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1694:	601a      	str	r2, [r3, #0]
 80a1696:	4770      	bx	lr
 80a1698:	080a411e 	.word	0x080a411e
 80a169c:	20000110 	.word	0x20000110

080a16a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a16a0:	2300      	movs	r3, #0
 80a16a2:	461a      	mov	r2, r3
 80a16a4:	6840      	ldr	r0, [r0, #4]
 80a16a6:	f7ff bed5 	b.w	80a1454 <network_connect>

080a16aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a16aa:	2200      	movs	r2, #0
 80a16ac:	2102      	movs	r1, #2
 80a16ae:	6840      	ldr	r0, [r0, #4]
 80a16b0:	f7ff bee0 	b.w	80a1474 <network_disconnect>

080a16b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a16b4:	2200      	movs	r2, #0
 80a16b6:	4611      	mov	r1, r2
 80a16b8:	6840      	ldr	r0, [r0, #4]
 80a16ba:	f7ff bed3 	b.w	80a1464 <network_connecting>

080a16be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a16be:	2200      	movs	r2, #0
 80a16c0:	4611      	mov	r1, r2
 80a16c2:	6840      	ldr	r0, [r0, #4]
 80a16c4:	f7ff bede 	b.w	80a1484 <network_ready>

080a16c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a16c8:	2300      	movs	r3, #0
 80a16ca:	461a      	mov	r2, r3
 80a16cc:	4619      	mov	r1, r3
 80a16ce:	6840      	ldr	r0, [r0, #4]
 80a16d0:	f7ff bee0 	b.w	80a1494 <network_on>

080a16d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a16d4:	2300      	movs	r3, #0
 80a16d6:	461a      	mov	r2, r3
 80a16d8:	4619      	mov	r1, r3
 80a16da:	6840      	ldr	r0, [r0, #4]
 80a16dc:	f7ff bee2 	b.w	80a14a4 <network_off>

080a16e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a16e0:	2200      	movs	r2, #0
 80a16e2:	f081 0101 	eor.w	r1, r1, #1
 80a16e6:	6840      	ldr	r0, [r0, #4]
 80a16e8:	f7ff bee4 	b.w	80a14b4 <network_listen>

080a16ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a16ec:	2200      	movs	r2, #0
 80a16ee:	6840      	ldr	r0, [r0, #4]
 80a16f0:	f7ff bef0 	b.w	80a14d4 <network_set_listen_timeout>

080a16f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a16f4:	2200      	movs	r2, #0
 80a16f6:	4611      	mov	r1, r2
 80a16f8:	6840      	ldr	r0, [r0, #4]
 80a16fa:	f7ff bef3 	b.w	80a14e4 <network_get_listen_timeout>

080a16fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a16fe:	2200      	movs	r2, #0
 80a1700:	4611      	mov	r1, r2
 80a1702:	6840      	ldr	r0, [r0, #4]
 80a1704:	f7ff bede 	b.w	80a14c4 <network_listening>

080a1708 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1708:	b570      	push	{r4, r5, r6, lr}
 80a170a:	4616      	mov	r6, r2
 80a170c:	b08e      	sub	sp, #56	; 0x38
 80a170e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1710:	a808      	add	r0, sp, #32
 80a1712:	f7ff ff7b 	bl	80a160c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1716:	2211      	movs	r2, #17
 80a1718:	2100      	movs	r1, #0
 80a171a:	a803      	add	r0, sp, #12
 80a171c:	f002 f8bd 	bl	80a389a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1720:	4630      	mov	r0, r6
 80a1722:	f002 f8f5 	bl	80a3910 <strlen>
 80a1726:	2500      	movs	r5, #0
 80a1728:	4b0a      	ldr	r3, [pc, #40]	; (80a1754 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a172a:	9500      	str	r5, [sp, #0]
 80a172c:	b281      	uxth	r1, r0
 80a172e:	685b      	ldr	r3, [r3, #4]
 80a1730:	aa03      	add	r2, sp, #12
 80a1732:	4630      	mov	r0, r6
 80a1734:	f7ff fe4a 	bl	80a13cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1738:	b120      	cbz	r0, 80a1744 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a173a:	4629      	mov	r1, r5
 80a173c:	4620      	mov	r0, r4
 80a173e:	f7ff ff85 	bl	80a164c <_ZN9IPAddressC1Em>
 80a1742:	e003      	b.n	80a174c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1744:	a903      	add	r1, sp, #12
 80a1746:	4620      	mov	r0, r4
 80a1748:	f7ff ff6e 	bl	80a1628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a174c:	4620      	mov	r0, r4
 80a174e:	b00e      	add	sp, #56	; 0x38
 80a1750:	bd70      	pop	{r4, r5, r6, pc}
 80a1752:	bf00      	nop
 80a1754:	20000598 	.word	0x20000598

080a1758 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1758:	4b03      	ldr	r3, [pc, #12]	; (80a1768 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a175a:	4a04      	ldr	r2, [pc, #16]	; (80a176c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a175c:	2804      	cmp	r0, #4
 80a175e:	bf0c      	ite	eq
 80a1760:	4610      	moveq	r0, r2
 80a1762:	4618      	movne	r0, r3
 80a1764:	4770      	bx	lr
 80a1766:	bf00      	nop
 80a1768:	20000114 	.word	0x20000114
 80a176c:	20000598 	.word	0x20000598

080a1770 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1770:	4b02      	ldr	r3, [pc, #8]	; (80a177c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1772:	4a03      	ldr	r2, [pc, #12]	; (80a1780 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1774:	601a      	str	r2, [r3, #0]
 80a1776:	2200      	movs	r2, #0
 80a1778:	605a      	str	r2, [r3, #4]
 80a177a:	4770      	bx	lr
 80a177c:	20000114 	.word	0x20000114
 80a1780:	080a418c 	.word	0x080a418c

080a1784 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1786:	4606      	mov	r6, r0
 80a1788:	460d      	mov	r5, r1
 80a178a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a178c:	2400      	movs	r4, #0
  while (size--) {
 80a178e:	42bd      	cmp	r5, r7
 80a1790:	d00c      	beq.n	80a17ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1792:	6833      	ldr	r3, [r6, #0]
 80a1794:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1798:	689b      	ldr	r3, [r3, #8]
 80a179a:	4630      	mov	r0, r6
 80a179c:	4798      	blx	r3
     if (chunk>=0)
 80a179e:	2800      	cmp	r0, #0
 80a17a0:	db01      	blt.n	80a17a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a17a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a17a4:	e7f3      	b.n	80a178e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a17a6:	2c00      	cmp	r4, #0
 80a17a8:	bf08      	it	eq
 80a17aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a17ac:	4620      	mov	r0, r4
 80a17ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a17b0:	b570      	push	{r4, r5, r6, lr}
 80a17b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a17b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a17b6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a17b8:	b149      	cbz	r1, 80a17ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a17ba:	f002 f8a9 	bl	80a3910 <strlen>
 80a17be:	682b      	ldr	r3, [r5, #0]
 80a17c0:	4602      	mov	r2, r0
 80a17c2:	4621      	mov	r1, r4
 80a17c4:	4628      	mov	r0, r5
    }
 80a17c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a17ca:	68db      	ldr	r3, [r3, #12]
 80a17cc:	4718      	bx	r3
    }
 80a17ce:	bd70      	pop	{r4, r5, r6, pc}

080a17d0 <_ZN5Print5printEPKc>:
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	f7ff ffed 	bl	80a17b0 <_ZN5Print5writeEPKc>
 80a17d6:	bd08      	pop	{r3, pc}

080a17d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a17d8:	6803      	ldr	r3, [r0, #0]
 80a17da:	689b      	ldr	r3, [r3, #8]
 80a17dc:	4718      	bx	r3

080a17de <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a17de:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a17e0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a17e2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a17e4:	f7ff fff8 	bl	80a17d8 <_ZN5Print5printEc>
  n += print('\n');
 80a17e8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a17ea:	4604      	mov	r4, r0
  n += print('\n');
 80a17ec:	4628      	mov	r0, r5
 80a17ee:	f7ff fff3 	bl	80a17d8 <_ZN5Print5printEc>
  return n;
}
 80a17f2:	4420      	add	r0, r4
 80a17f4:	bd38      	pop	{r3, r4, r5, pc}

080a17f6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a17f6:	b538      	push	{r3, r4, r5, lr}
 80a17f8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a17fa:	f7ff ffd9 	bl	80a17b0 <_ZN5Print5writeEPKc>
 80a17fe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1800:	4628      	mov	r0, r5
 80a1802:	f7ff ffec 	bl	80a17de <_ZN5Print7printlnEv>
  return n;
}
 80a1806:	4420      	add	r0, r4
 80a1808:	bd38      	pop	{r3, r4, r5, pc}

080a180a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a180a:	2a01      	cmp	r2, #1
 80a180c:	bf98      	it	ls
 80a180e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1810:	b530      	push	{r4, r5, lr}
 80a1812:	460b      	mov	r3, r1
 80a1814:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1816:	2100      	movs	r1, #0
 80a1818:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a181c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1820:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1824:	fb05 3312 	mls	r3, r5, r2, r3
 80a1828:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a182a:	2b09      	cmp	r3, #9
 80a182c:	bf94      	ite	ls
 80a182e:	3330      	addls	r3, #48	; 0x30
 80a1830:	3337      	addhi	r3, #55	; 0x37
 80a1832:	b2db      	uxtb	r3, r3
 80a1834:	4621      	mov	r1, r4
 80a1836:	f804 3901 	strb.w	r3, [r4], #-1
 80a183a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a183c:	2d00      	cmp	r5, #0
 80a183e:	d1ef      	bne.n	80a1820 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1840:	f7ff ffb6 	bl	80a17b0 <_ZN5Print5writeEPKc>
}
 80a1844:	b00b      	add	sp, #44	; 0x2c
 80a1846:	bd30      	pop	{r4, r5, pc}

080a1848 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a184c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a184e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1850:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1852:	4617      	mov	r7, r2
 80a1854:	461e      	mov	r6, r3
 80a1856:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a185a:	f001 fcf1 	bl	80a3240 <__aeabi_dcmpun>
 80a185e:	b108      	cbz	r0, 80a1864 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1860:	494d      	ldr	r1, [pc, #308]	; (80a1998 <_ZN5Print10printFloatEdh+0x150>)
 80a1862:	e012      	b.n	80a188a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1864:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a186c:	4b4b      	ldr	r3, [pc, #300]	; (80a199c <_ZN5Print10printFloatEdh+0x154>)
 80a186e:	4638      	mov	r0, r7
 80a1870:	4621      	mov	r1, r4
 80a1872:	f001 fce5 	bl	80a3240 <__aeabi_dcmpun>
 80a1876:	b968      	cbnz	r0, 80a1894 <_ZN5Print10printFloatEdh+0x4c>
 80a1878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a187c:	4b47      	ldr	r3, [pc, #284]	; (80a199c <_ZN5Print10printFloatEdh+0x154>)
 80a187e:	4638      	mov	r0, r7
 80a1880:	4621      	mov	r1, r4
 80a1882:	f001 fcbf 	bl	80a3204 <__aeabi_dcmple>
 80a1886:	b928      	cbnz	r0, 80a1894 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1888:	4945      	ldr	r1, [pc, #276]	; (80a19a0 <_ZN5Print10printFloatEdh+0x158>)
 80a188a:	4640      	mov	r0, r8
 80a188c:	f7ff ff90 	bl	80a17b0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1894:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1898:	4b42      	ldr	r3, [pc, #264]	; (80a19a4 <_ZN5Print10printFloatEdh+0x15c>)
 80a189a:	4638      	mov	r0, r7
 80a189c:	4631      	mov	r1, r6
 80a189e:	f001 fcc5 	bl	80a322c <__aeabi_dcmpgt>
 80a18a2:	b108      	cbz	r0, 80a18a8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a18a4:	4940      	ldr	r1, [pc, #256]	; (80a19a8 <_ZN5Print10printFloatEdh+0x160>)
 80a18a6:	e7f0      	b.n	80a188a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a18a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a18ac:	4b3f      	ldr	r3, [pc, #252]	; (80a19ac <_ZN5Print10printFloatEdh+0x164>)
 80a18ae:	4638      	mov	r0, r7
 80a18b0:	4631      	mov	r1, r6
 80a18b2:	f001 fc9d 	bl	80a31f0 <__aeabi_dcmplt>
 80a18b6:	2800      	cmp	r0, #0
 80a18b8:	d1f4      	bne.n	80a18a4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a18ba:	2200      	movs	r2, #0
 80a18bc:	2300      	movs	r3, #0
 80a18be:	4638      	mov	r0, r7
 80a18c0:	4631      	mov	r1, r6
 80a18c2:	f001 fc95 	bl	80a31f0 <__aeabi_dcmplt>
 80a18c6:	b138      	cbz	r0, 80a18d8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a18c8:	212d      	movs	r1, #45	; 0x2d
 80a18ca:	4640      	mov	r0, r8
 80a18cc:	f7ff ff84 	bl	80a17d8 <_ZN5Print5printEc>
     number = -number;
 80a18d0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a18d4:	4604      	mov	r4, r0
 80a18d6:	e000      	b.n	80a18da <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a18d8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a18da:	4935      	ldr	r1, [pc, #212]	; (80a19b0 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a18dc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a18e0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a18e2:	fa5f f389 	uxtb.w	r3, r9
 80a18e6:	429d      	cmp	r5, r3
 80a18e8:	d906      	bls.n	80a18f8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a18ea:	2200      	movs	r2, #0
 80a18ec:	4b31      	ldr	r3, [pc, #196]	; (80a19b4 <_ZN5Print10printFloatEdh+0x16c>)
 80a18ee:	f001 fb37 	bl	80a2f60 <__aeabi_ddiv>
 80a18f2:	f109 0901 	add.w	r9, r9, #1
 80a18f6:	e7f4      	b.n	80a18e2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a18f8:	463a      	mov	r2, r7
 80a18fa:	4633      	mov	r3, r6
 80a18fc:	f001 f854 	bl	80a29a8 <__adddf3>
 80a1900:	460f      	mov	r7, r1
 80a1902:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1904:	f001 fcda 	bl	80a32bc <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1908:	220a      	movs	r2, #10
 80a190a:	4601      	mov	r1, r0
 80a190c:	4681      	mov	r9, r0
 80a190e:	4640      	mov	r0, r8
 80a1910:	f7ff ff7b 	bl	80a180a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1914:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1916:	b3e5      	cbz	r5, 80a1992 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1918:	4648      	mov	r0, r9
 80a191a:	f001 f981 	bl	80a2c20 <__aeabi_ui2d>
 80a191e:	4602      	mov	r2, r0
 80a1920:	460b      	mov	r3, r1
 80a1922:	4630      	mov	r0, r6
 80a1924:	4639      	mov	r1, r7
 80a1926:	f001 f83d 	bl	80a29a4 <__aeabi_dsub>
 80a192a:	4606      	mov	r6, r0
 80a192c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a192e:	4640      	mov	r0, r8
 80a1930:	4921      	ldr	r1, [pc, #132]	; (80a19b8 <_ZN5Print10printFloatEdh+0x170>)
 80a1932:	f7ff ff3d 	bl	80a17b0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1936:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1938:	2200      	movs	r2, #0
 80a193a:	4b1e      	ldr	r3, [pc, #120]	; (80a19b4 <_ZN5Print10printFloatEdh+0x16c>)
 80a193c:	4630      	mov	r0, r6
 80a193e:	4639      	mov	r1, r7
 80a1940:	f001 f9e4 	bl	80a2d0c <__aeabi_dmul>
 80a1944:	4606      	mov	r6, r0
 80a1946:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1948:	f001 fc90 	bl	80a326c <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a194c:	f1b0 0a00 	subs.w	sl, r0, #0
 80a1950:	da07      	bge.n	80a1962 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a1952:	212d      	movs	r1, #45	; 0x2d
 80a1954:	4640      	mov	r0, r8
 80a1956:	f7ff ff3f 	bl	80a17d8 <_ZN5Print5printEc>
            val = -n;
 80a195a:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a195e:	4681      	mov	r9, r0
 80a1960:	e002      	b.n	80a1968 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a1962:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a1964:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1968:	220a      	movs	r2, #10
 80a196a:	4640      	mov	r0, r8
 80a196c:	f7ff ff4d 	bl	80a180a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a1970:	4448      	add	r0, r9
 80a1972:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1974:	4650      	mov	r0, sl
 80a1976:	f001 f963 	bl	80a2c40 <__aeabi_i2d>
 80a197a:	4602      	mov	r2, r0
 80a197c:	460b      	mov	r3, r1
 80a197e:	4630      	mov	r0, r6
 80a1980:	4639      	mov	r1, r7
 80a1982:	f001 f80f 	bl	80a29a4 <__aeabi_dsub>
 80a1986:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1988:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a198c:	4606      	mov	r6, r0
 80a198e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1990:	d1d2      	bne.n	80a1938 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1992:	4620      	mov	r0, r4
 80a1994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1998:	080a41b8 	.word	0x080a41b8
 80a199c:	7fefffff 	.word	0x7fefffff
 80a19a0:	080a41c0 	.word	0x080a41c0
 80a19a4:	41efffff 	.word	0x41efffff
 80a19a8:	080a41bc 	.word	0x080a41bc
 80a19ac:	c1efffff 	.word	0xc1efffff
 80a19b0:	3fe00000 	.word	0x3fe00000
 80a19b4:	40240000 	.word	0x40240000
 80a19b8:	080a3b40 	.word	0x080a3b40

080a19bc <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a19bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19be:	4605      	mov	r5, r0
 80a19c0:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a19c2:	4608      	mov	r0, r1
 80a19c4:	f001 f94e 	bl	80a2c64 <__aeabi_f2d>
 80a19c8:	b2e4      	uxtb	r4, r4
 80a19ca:	4602      	mov	r2, r0
 80a19cc:	9400      	str	r4, [sp, #0]
 80a19ce:	460b      	mov	r3, r1
 80a19d0:	4628      	mov	r0, r5
 80a19d2:	f7ff ff39 	bl	80a1848 <_ZN5Print10printFloatEdh>
}
 80a19d6:	b003      	add	sp, #12
 80a19d8:	bd30      	pop	{r4, r5, pc}

080a19da <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a19da:	b510      	push	{r4, lr}
 80a19dc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a19de:	f7ff fda4 	bl	80a152a <_ZNSt14_Function_baseD1Ev>
 80a19e2:	4620      	mov	r0, r4
 80a19e4:	bd10      	pop	{r4, pc}
	...

080a19e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19e8:	4803      	ldr	r0, [pc, #12]	; (80a19f8 <_GLOBAL__sub_I_RGB+0x10>)
 80a19ea:	2300      	movs	r3, #0
 80a19ec:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a19ee:	4a03      	ldr	r2, [pc, #12]	; (80a19fc <_GLOBAL__sub_I_RGB+0x14>)
 80a19f0:	4903      	ldr	r1, [pc, #12]	; (80a1a00 <_GLOBAL__sub_I_RGB+0x18>)
 80a19f2:	f000 be69 	b.w	80a26c8 <__aeabi_atexit>
 80a19f6:	bf00      	nop
 80a19f8:	2000011c 	.word	0x2000011c
 80a19fc:	20000094 	.word	0x20000094
 80a1a00:	080a19db 	.word	0x080a19db

080a1a04 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1a04:	b510      	push	{r4, lr}
 80a1a06:	4b04      	ldr	r3, [pc, #16]	; (80a1a18 <_ZN8SPIClassD1Ev+0x14>)
 80a1a08:	4604      	mov	r4, r0
 80a1a0a:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1a0c:	68c0      	ldr	r0, [r0, #12]
 80a1a0e:	b108      	cbz	r0, 80a1a14 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a1a10:	f7ff fb5a 	bl	80a10c8 <os_mutex_recursive_destroy>
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	bd10      	pop	{r4, pc}
 80a1a18:	080a41cc 	.word	0x080a41cc

080a1a1c <_ZN8SPIClassD0Ev>:
 80a1a1c:	b510      	push	{r4, lr}
 80a1a1e:	4604      	mov	r4, r0
 80a1a20:	f7ff fff0 	bl	80a1a04 <_ZN8SPIClassD1Ev>
 80a1a24:	4620      	mov	r0, r4
 80a1a26:	2110      	movs	r1, #16
 80a1a28:	f000 fe53 	bl	80a26d2 <_ZdlPvj>
 80a1a2c:	4620      	mov	r0, r4
 80a1a2e:	bd10      	pop	{r4, pc}

080a1a30 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1a30:	b570      	push	{r4, r5, r6, lr}
 80a1a32:	4604      	mov	r4, r0
 80a1a34:	460e      	mov	r6, r1
 80a1a36:	4b07      	ldr	r3, [pc, #28]	; (80a1a54 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1a38:	2500      	movs	r5, #0
 80a1a3a:	6003      	str	r3, [r0, #0]
 80a1a3c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a1a40:	f7ff fb3a 	bl	80a10b8 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1a44:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1a46:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a1a48:	f7ff fc30 	bl	80a12ac <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1a4c:	60a5      	str	r5, [r4, #8]
}
 80a1a4e:	4620      	mov	r0, r4
 80a1a50:	bd70      	pop	{r4, r5, r6, pc}
 80a1a52:	bf00      	nop
 80a1a54:	080a41cc 	.word	0x080a41cc

080a1a58 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1a58:	7900      	ldrb	r0, [r0, #4]
 80a1a5a:	f7ff bc2f 	b.w	80a12bc <HAL_SPI_Is_Enabled>

080a1a5e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a1a5e:	b510      	push	{r4, lr}
 80a1a60:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1a62:	f7ff fb49 	bl	80a10f8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a1a66:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a1a68:	6823      	ldr	r3, [r4, #0]
 80a1a6a:	4620      	mov	r0, r4
 80a1a6c:	695b      	ldr	r3, [r3, #20]
 80a1a6e:	4798      	blx	r3
    if (c >= 0) return c;
 80a1a70:	2800      	cmp	r0, #0
 80a1a72:	da08      	bge.n	80a1a86 <_ZN6Stream9timedReadEv+0x28>
 80a1a74:	f7ff fb40 	bl	80a10f8 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 80a1a78:	68e3      	ldr	r3, [r4, #12]
 80a1a7a:	1ac0      	subs	r0, r0, r3
 80a1a7c:	68a3      	ldr	r3, [r4, #8]
 80a1a7e:	4298      	cmp	r0, r3
 80a1a80:	d3f2      	bcc.n	80a1a68 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 80a1a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1a86:	bd10      	pop	{r4, pc}

080a1a88 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a1a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a8c:	4680      	mov	r8, r0
 80a1a8e:	460d      	mov	r5, r1
 80a1a90:	460c      	mov	r4, r1
 80a1a92:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 80a1a94:	42bc      	cmp	r4, r7
 80a1a96:	eba4 0605 	sub.w	r6, r4, r5
 80a1a9a:	d007      	beq.n	80a1aac <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80a1a9c:	4640      	mov	r0, r8
 80a1a9e:	f7ff ffde 	bl	80a1a5e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a1aa2:	2800      	cmp	r0, #0
 80a1aa4:	db02      	blt.n	80a1aac <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 80a1aa6:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 80a1aaa:	e7f3      	b.n	80a1a94 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 80a1aac:	4630      	mov	r0, r6
 80a1aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1ab2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1ab2:	b510      	push	{r4, lr}
 80a1ab4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1ab6:	6800      	ldr	r0, [r0, #0]
 80a1ab8:	b118      	cbz	r0, 80a1ac2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a1aba:	f7ff fd23 	bl	80a1504 <free>
            wakeupSource_ = nullptr;
 80a1abe:	2300      	movs	r3, #0
 80a1ac0:	6023      	str	r3, [r4, #0]
 80a1ac2:	bd10      	pop	{r4, pc}

080a1ac4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1ac4:	b510      	push	{r4, lr}
 80a1ac6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a1ac8:	f7ff fff3 	bl	80a1ab2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	bd10      	pop	{r4, pc}

080a1ad0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1ad4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1ad6:	4c08      	ldr	r4, [pc, #32]	; (80a1af8 <_GLOBAL__sub_I_System+0x28>)
 80a1ad8:	2000      	movs	r0, #0
 80a1ada:	6020      	str	r0, [r4, #0]
 80a1adc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1ade:	71a0      	strb	r0, [r4, #6]
 80a1ae0:	8120      	strh	r0, [r4, #8]
 80a1ae2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1ae4:	f7ff fc82 	bl	80a13ec <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1ae8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1aee:	4a03      	ldr	r2, [pc, #12]	; (80a1afc <_GLOBAL__sub_I_System+0x2c>)
 80a1af0:	4903      	ldr	r1, [pc, #12]	; (80a1b00 <_GLOBAL__sub_I_System+0x30>)
 80a1af2:	f000 bde9 	b.w	80a26c8 <__aeabi_atexit>
 80a1af6:	bf00      	nop
 80a1af8:	2000012c 	.word	0x2000012c
 80a1afc:	20000094 	.word	0x20000094
 80a1b00:	080a1ac5 	.word	0x080a1ac5

080a1b04 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b06:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b08:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1b0a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b0e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1b10:	2201      	movs	r2, #1
 80a1b12:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1b16:	4621      	mov	r1, r4
 80a1b18:	47a8      	blx	r5
}
 80a1b1a:	b003      	add	sp, #12
 80a1b1c:	bd30      	pop	{r4, r5, pc}

080a1b1e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1b1e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b20:	6803      	ldr	r3, [r0, #0]
 80a1b22:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1b24:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1b28:	46a4      	mov	ip, r4
}
 80a1b2a:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b2c:	4760      	bx	ip

080a1b2e <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b30:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a1b32:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1b34:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1b38:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1b3a:	4621      	mov	r1, r4
 80a1b3c:	4613      	mov	r3, r2
 80a1b3e:	2201      	movs	r2, #1
 80a1b40:	47a8      	blx	r5
}
 80a1b42:	b003      	add	sp, #12
 80a1b44:	bd30      	pop	{r4, r5, pc}

080a1b46 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1b46:	4770      	bx	lr

080a1b48 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1b48:	4770      	bx	lr

080a1b4a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1b4a:	2000      	movs	r0, #0
 80a1b4c:	4770      	bx	lr

080a1b4e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1b4e:	b510      	push	{r4, lr}
 80a1b50:	4604      	mov	r4, r0
 80a1b52:	2114      	movs	r1, #20
 80a1b54:	f000 fdbd 	bl	80a26d2 <_ZdlPvj>
 80a1b58:	4620      	mov	r0, r4
 80a1b5a:	bd10      	pop	{r4, pc}

080a1b5c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1b5c:	f7fe baa1 	b.w	80a00a2 <_ZdlPv>

080a1b60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1b60:	b510      	push	{r4, lr}
 80a1b62:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1b64:	6803      	ldr	r3, [r0, #0]
 80a1b66:	689b      	ldr	r3, [r3, #8]
 80a1b68:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1b6a:	68a3      	ldr	r3, [r4, #8]
 80a1b6c:	3b01      	subs	r3, #1
 80a1b6e:	60a3      	str	r3, [r4, #8]
 80a1b70:	b92b      	cbnz	r3, 80a1b7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a1b72:	6823      	ldr	r3, [r4, #0]
 80a1b74:	4620      	mov	r0, r4
        }
    }
 80a1b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1b7a:	68db      	ldr	r3, [r3, #12]
 80a1b7c:	4718      	bx	r3
 80a1b7e:	bd10      	pop	{r4, pc}

080a1b80 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1b80:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1b82:	4604      	mov	r4, r0
 80a1b84:	4606      	mov	r6, r0
 80a1b86:	694d      	ldr	r5, [r1, #20]
 80a1b88:	4b04      	ldr	r3, [pc, #16]	; (80a1b9c <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1b8a:	358c      	adds	r5, #140	; 0x8c
 80a1b8c:	f844 3b04 	str.w	r3, [r4], #4
 80a1b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1b94:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1b96:	4630      	mov	r0, r6
 80a1b98:	7023      	strb	r3, [r4, #0]
 80a1b9a:	bd70      	pop	{r4, r5, r6, pc}
 80a1b9c:	080a409c 	.word	0x080a409c

080a1ba0 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1ba0:	b510      	push	{r4, lr}
 80a1ba2:	6943      	ldr	r3, [r0, #20]
 80a1ba4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1ba6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1baa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1bae:	429a      	cmp	r2, r3
 80a1bb0:	d005      	beq.n	80a1bbe <_ZN9TCPClient4peekEv+0x1e>
 80a1bb2:	6962      	ldr	r2, [r4, #20]
 80a1bb4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1bb8:	4413      	add	r3, r2
 80a1bba:	7918      	ldrb	r0, [r3, #4]
 80a1bbc:	bd10      	pop	{r4, pc}
 80a1bbe:	6803      	ldr	r3, [r0, #0]
 80a1bc0:	691b      	ldr	r3, [r3, #16]
 80a1bc2:	4798      	blx	r3
 80a1bc4:	2800      	cmp	r0, #0
 80a1bc6:	d1f4      	bne.n	80a1bb2 <_ZN9TCPClient4peekEv+0x12>
 80a1bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1bcc:	bd10      	pop	{r4, pc}

080a1bce <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1bce:	b510      	push	{r4, lr}
 80a1bd0:	6943      	ldr	r3, [r0, #20]
 80a1bd2:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1bd4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bd8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1bdc:	429a      	cmp	r2, r3
 80a1bde:	d008      	beq.n	80a1bf2 <_ZN9TCPClient4readEv+0x24>
 80a1be0:	6962      	ldr	r2, [r4, #20]
 80a1be2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1be6:	1c59      	adds	r1, r3, #1
 80a1be8:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1bec:	4413      	add	r3, r2
 80a1bee:	7918      	ldrb	r0, [r3, #4]
 80a1bf0:	bd10      	pop	{r4, pc}
 80a1bf2:	6803      	ldr	r3, [r0, #0]
 80a1bf4:	691b      	ldr	r3, [r3, #16]
 80a1bf6:	4798      	blx	r3
 80a1bf8:	2800      	cmp	r0, #0
 80a1bfa:	d1f1      	bne.n	80a1be0 <_ZN9TCPClient4readEv+0x12>
 80a1bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1c00:	bd10      	pop	{r4, pc}

080a1c02 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c04:	6943      	ldr	r3, [r0, #20]
 80a1c06:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1c08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1c0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1c10:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1c12:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1c14:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1c16:	d106      	bne.n	80a1c26 <_ZN9TCPClient4readEPhj+0x24>
 80a1c18:	6803      	ldr	r3, [r0, #0]
 80a1c1a:	691b      	ldr	r3, [r3, #16]
 80a1c1c:	4798      	blx	r3
 80a1c1e:	b910      	cbnz	r0, 80a1c26 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1c24:	e014      	b.n	80a1c50 <_ZN9TCPClient4readEPhj+0x4e>
 80a1c26:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1c28:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1c2a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1c2e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1c32:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1c34:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1c36:	42bc      	cmp	r4, r7
 80a1c38:	bf28      	it	cs
 80a1c3a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1c3c:	3104      	adds	r1, #4
 80a1c3e:	4622      	mov	r2, r4
 80a1c40:	f001 fe20 	bl	80a3884 <memcpy>
 80a1c44:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1c46:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1c4a:	4423      	add	r3, r4
 80a1c4c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1c50:	4620      	mov	r0, r4
 80a1c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c54 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1c54:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1c56:	2300      	movs	r3, #0
 80a1c58:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1c5c:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1c5e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1c62:	4770      	bx	lr

080a1c64 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1c64:	b538      	push	{r3, r4, r5, lr}
 80a1c66:	6942      	ldr	r2, [r0, #20]
 80a1c68:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a1c6a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1c6e:	b11b      	cbz	r3, 80a1c78 <_ZN9TCPClient9availableEv+0x14>
 80a1c70:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1c74:	429a      	cmp	r2, r3
 80a1c76:	d00c      	beq.n	80a1c92 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1c78:	6920      	ldr	r0, [r4, #16]
 80a1c7a:	f7ff fd6d 	bl	80a1758 <_ZN5spark12NetworkClass4fromEm>
 80a1c7e:	6803      	ldr	r3, [r0, #0]
 80a1c80:	68db      	ldr	r3, [r3, #12]
 80a1c82:	4798      	blx	r3
 80a1c84:	b318      	cbz	r0, 80a1cce <_ZN9TCPClient9availableEv+0x6a>
 80a1c86:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1c88:	6818      	ldr	r0, [r3, #0]
 80a1c8a:	f7ff fad7 	bl	80a123c <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1c8e:	b918      	cbnz	r0, 80a1c98 <_ZN9TCPClient9availableEv+0x34>
 80a1c90:	e01d      	b.n	80a1cce <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1c92:	f7ff ffdf 	bl	80a1c54 <_ZN9TCPClient12flush_bufferEv>
 80a1c96:	e7ef      	b.n	80a1c78 <_ZN9TCPClient9availableEv+0x14>
 80a1c98:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a1c9a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1c9e:	297f      	cmp	r1, #127	; 0x7f
 80a1ca0:	d815      	bhi.n	80a1cce <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1ca2:	1d05      	adds	r5, r0, #4
 80a1ca4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1ca8:	2300      	movs	r3, #0
 80a1caa:	4429      	add	r1, r5
 80a1cac:	6800      	ldr	r0, [r0, #0]
 80a1cae:	f7ff fadd 	bl	80a126c <socket_receive>
            if (ret > 0)
 80a1cb2:	2800      	cmp	r0, #0
 80a1cb4:	dd0b      	ble.n	80a1cce <_ZN9TCPClient9availableEv+0x6a>
 80a1cb6:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1cb8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1cbc:	b90a      	cbnz	r2, 80a1cc2 <_ZN9TCPClient9availableEv+0x5e>
 80a1cbe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1cc2:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1cc4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1cc8:	4418      	add	r0, r3
 80a1cca:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1cce:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1cd0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1cd4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1cd8:	1a18      	subs	r0, r3, r0
}
 80a1cda:	bd38      	pop	{r3, r4, r5, pc}

080a1cdc <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1cdc:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1cde:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1ce0:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1ce2:	6818      	ldr	r0, [r3, #0]
 80a1ce4:	f7ff faaa 	bl	80a123c <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1ce8:	b118      	cbz	r0, 80a1cf2 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1cea:	6963      	ldr	r3, [r4, #20]
 80a1cec:	6818      	ldr	r0, [r3, #0]
 80a1cee:	f7ff fac5 	bl	80a127c <socket_close>
 80a1cf2:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1cf4:	f7ff faca 	bl	80a128c <socket_handle_invalid>
 80a1cf8:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1cfa:	6960      	ldr	r0, [r4, #20]
 80a1cfc:	2211      	movs	r2, #17
 80a1cfe:	2100      	movs	r1, #0
 80a1d00:	308c      	adds	r0, #140	; 0x8c
 80a1d02:	f001 fdca 	bl	80a389a <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1d06:	4620      	mov	r0, r4
}
 80a1d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1d0c:	f7ff bfa2 	b.w	80a1c54 <_ZN9TCPClient12flush_bufferEv>

080a1d10 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1d14:	461f      	mov	r7, r3
    stop();
 80a1d16:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1d18:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1d1c:	4606      	mov	r6, r0
 80a1d1e:	460c      	mov	r4, r1
 80a1d20:	4615      	mov	r5, r2
    stop();
 80a1d22:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1d24:	4638      	mov	r0, r7
 80a1d26:	f7ff fd17 	bl	80a1758 <_ZN5spark12NetworkClass4fromEm>
 80a1d2a:	6803      	ldr	r3, [r0, #0]
 80a1d2c:	68db      	ldr	r3, [r3, #12]
 80a1d2e:	4798      	blx	r3
 80a1d30:	2800      	cmp	r0, #0
 80a1d32:	d056      	beq.n	80a1de2 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1d34:	9700      	str	r7, [sp, #0]
 80a1d36:	462b      	mov	r3, r5
 80a1d38:	2206      	movs	r2, #6
 80a1d3a:	2101      	movs	r1, #1
 80a1d3c:	2002      	movs	r0, #2
 80a1d3e:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1d42:	f7ff fa83 	bl	80a124c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1d46:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1d48:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1d4c:	2700      	movs	r7, #0
 80a1d4e:	9302      	str	r3, [sp, #8]
 80a1d50:	6973      	ldr	r3, [r6, #20]
 80a1d52:	9703      	str	r7, [sp, #12]
 80a1d54:	681b      	ldr	r3, [r3, #0]
 80a1d56:	2001      	movs	r0, #1
 80a1d58:	9301      	str	r3, [sp, #4]
 80a1d5a:	4b23      	ldr	r3, [pc, #140]	; (80a1de8 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1d5c:	aa02      	add	r2, sp, #8
 80a1d5e:	9300      	str	r3, [sp, #0]
 80a1d60:	4922      	ldr	r1, [pc, #136]	; (80a1dec <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1d62:	463b      	mov	r3, r7
 80a1d64:	f7ff fb3a 	bl	80a13dc <log_message>

          if (socket_handle_valid(d_->sock))
 80a1d68:	6973      	ldr	r3, [r6, #20]
 80a1d6a:	6818      	ldr	r0, [r3, #0]
 80a1d6c:	f7ff fa66 	bl	80a123c <socket_handle_valid>
 80a1d70:	2800      	cmp	r0, #0
 80a1d72:	d036      	beq.n	80a1de2 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1d74:	4630      	mov	r0, r6
 80a1d76:	f7ff ff6d 	bl	80a1c54 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1d7a:	2302      	movs	r3, #2
 80a1d7c:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1d80:	0a2b      	lsrs	r3, r5, #8
 80a1d82:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1d86:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1d88:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1d8c:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1d90:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1d92:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1d96:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1d9a:	7963      	ldrb	r3, [r4, #5]
 80a1d9c:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1da0:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1da4:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1da8:	f7ff fb08 	bl	80a13bc <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1dac:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1dae:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1db0:	2210      	movs	r2, #16
 80a1db2:	a902      	add	r1, sp, #8
 80a1db4:	6818      	ldr	r0, [r3, #0]
 80a1db6:	f7ff fa51 	bl	80a125c <socket_connect>
 80a1dba:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1dbc:	4628      	mov	r0, r5
 80a1dbe:	f7ff fafd 	bl	80a13bc <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1dc4:	6975      	ldr	r5, [r6, #20]
 80a1dc6:	358c      	adds	r5, #140	; 0x8c
 80a1dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1dca:	6823      	ldr	r3, [r4, #0]
 80a1dcc:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1dce:	f1b8 0f00 	cmp.w	r8, #0
 80a1dd2:	d005      	beq.n	80a1de0 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1dd4:	6833      	ldr	r3, [r6, #0]
 80a1dd6:	4630      	mov	r0, r6
 80a1dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1dda:	4798      	blx	r3
 80a1ddc:	4638      	mov	r0, r7
 80a1dde:	e000      	b.n	80a1de2 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1de0:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1de2:	b00a      	add	sp, #40	; 0x28
 80a1de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1de8:	080a4243 	.word	0x080a4243
 80a1dec:	080a423c 	.word	0x080a423c

080a1df0 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1df0:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1df2:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1df4:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1df6:	6818      	ldr	r0, [r3, #0]
 80a1df8:	f7ff fa20 	bl	80a123c <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1dfc:	b908      	cbnz	r0, 80a1e02 <_ZN9TCPClient6statusEv+0x12>
 80a1dfe:	2000      	movs	r0, #0
 80a1e00:	bd10      	pop	{r4, pc}
 80a1e02:	6920      	ldr	r0, [r4, #16]
 80a1e04:	f7ff fca8 	bl	80a1758 <_ZN5spark12NetworkClass4fromEm>
 80a1e08:	6803      	ldr	r3, [r0, #0]
 80a1e0a:	68db      	ldr	r3, [r3, #12]
 80a1e0c:	4798      	blx	r3
 80a1e0e:	2800      	cmp	r0, #0
 80a1e10:	d0f5      	beq.n	80a1dfe <_ZN9TCPClient6statusEv+0xe>
 80a1e12:	6963      	ldr	r3, [r4, #20]
 80a1e14:	6818      	ldr	r0, [r3, #0]
 80a1e16:	f7ff fa09 	bl	80a122c <socket_active_status>
 80a1e1a:	fab0 f080 	clz	r0, r0
 80a1e1e:	0940      	lsrs	r0, r0, #5
}
 80a1e20:	bd10      	pop	{r4, pc}

080a1e22 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1e22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1e26:	2500      	movs	r5, #0
 80a1e28:	6045      	str	r5, [r0, #4]
 80a1e2a:	4604      	mov	r4, r0
 80a1e2c:	460e      	mov	r6, r1
 80a1e2e:	4617      	mov	r7, r2
 80a1e30:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1e32:	f7ff ffdd 	bl	80a1df0 <_ZN9TCPClient6statusEv>
 80a1e36:	b160      	cbz	r0, 80a1e52 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1e38:	6960      	ldr	r0, [r4, #20]
 80a1e3a:	9501      	str	r5, [sp, #4]
 80a1e3c:	f8cd 8000 	str.w	r8, [sp]
 80a1e40:	462b      	mov	r3, r5
 80a1e42:	463a      	mov	r2, r7
 80a1e44:	4631      	mov	r1, r6
 80a1e46:	6800      	ldr	r0, [r0, #0]
 80a1e48:	f7ff fa28 	bl	80a129c <socket_send_ex>
    if (ret < 0) {
 80a1e4c:	2800      	cmp	r0, #0
 80a1e4e:	da03      	bge.n	80a1e58 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1e50:	e001      	b.n	80a1e56 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1e56:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1e58:	b002      	add	sp, #8
 80a1e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1e5e <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1e5e:	b538      	push	{r3, r4, r5, lr}
 80a1e60:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1e62:	f7ff ffc5 	bl	80a1df0 <_ZN9TCPClient6statusEv>
 80a1e66:	bb00      	cbnz	r0, 80a1eaa <_ZN9TCPClient9connectedEv+0x4c>
 80a1e68:	6963      	ldr	r3, [r4, #20]
 80a1e6a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1e6e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1e72:	4291      	cmp	r1, r2
 80a1e74:	d119      	bne.n	80a1eaa <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1e76:	6818      	ldr	r0, [r3, #0]
 80a1e78:	f7ff f9e0 	bl	80a123c <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1e7c:	b128      	cbz	r0, 80a1e8a <_ZN9TCPClient9connectedEv+0x2c>
 80a1e7e:	6963      	ldr	r3, [r4, #20]
 80a1e80:	6818      	ldr	r0, [r3, #0]
 80a1e82:	f7ff f9d3 	bl	80a122c <socket_active_status>
 80a1e86:	2801      	cmp	r0, #1
 80a1e88:	d001      	beq.n	80a1e8e <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1e8a:	2500      	movs	r5, #0
 80a1e8c:	e00e      	b.n	80a1eac <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1e8e:	6823      	ldr	r3, [r4, #0]
 80a1e90:	4620      	mov	r0, r4
 80a1e92:	691b      	ldr	r3, [r3, #16]
 80a1e94:	4798      	blx	r3
 80a1e96:	2800      	cmp	r0, #0
 80a1e98:	bf14      	ite	ne
 80a1e9a:	2501      	movne	r5, #1
 80a1e9c:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1e9e:	d105      	bne.n	80a1eac <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a1ea0:	6823      	ldr	r3, [r4, #0]
 80a1ea2:	4620      	mov	r0, r4
 80a1ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ea6:	4798      	blx	r3
 80a1ea8:	e000      	b.n	80a1eac <_ZN9TCPClient9connectedEv+0x4e>
 80a1eaa:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1eac:	4628      	mov	r0, r5
 80a1eae:	bd38      	pop	{r3, r4, r5, pc}

080a1eb0 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1eb0:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1eb2:	f7ff ff9d 	bl	80a1df0 <_ZN9TCPClient6statusEv>
}
 80a1eb6:	3000      	adds	r0, #0
 80a1eb8:	bf18      	it	ne
 80a1eba:	2001      	movne	r0, #1
 80a1ebc:	bd08      	pop	{r3, pc}

080a1ebe <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a1ebe:	b510      	push	{r4, lr}
 80a1ec0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a1ec2:	2300      	movs	r3, #0
 80a1ec4:	6001      	str	r1, [r0, #0]
 80a1ec6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a1eca:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a1ece:	3088      	adds	r0, #136	; 0x88
 80a1ed0:	f7ff fb9c 	bl	80a160c <_ZN9IPAddressC1Ev>
}
 80a1ed4:	4620      	mov	r0, r4
 80a1ed6:	bd10      	pop	{r4, pc}

080a1ed8 <_ZN9TCPClientC1Em>:
 80a1ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1edc:	b570      	push	{r4, r5, r6, lr}
 80a1ede:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1ee0:	4a14      	ldr	r2, [pc, #80]	; (80a1f34 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1ee2:	2300      	movs	r3, #0
 80a1ee4:	6043      	str	r3, [r0, #4]
 80a1ee6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1ee8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1eea:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1eec:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1eee:	20a0      	movs	r0, #160	; 0xa0
 80a1ef0:	460e      	mov	r6, r1
 80a1ef2:	f7fe f8d4 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1ef6:	4605      	mov	r5, r0
 80a1ef8:	b110      	cbz	r0, 80a1f00 <_ZN9TCPClientC1Em+0x28>
 80a1efa:	4631      	mov	r1, r6
 80a1efc:	f7ff ffdf 	bl	80a1ebe <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1f00:	2014      	movs	r0, #20
 80a1f02:	f7fe f8cc 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1f06:	4603      	mov	r3, r0
 80a1f08:	b128      	cbz	r0, 80a1f16 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1f0a:	2201      	movs	r2, #1
 80a1f0c:	6042      	str	r2, [r0, #4]
 80a1f0e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1f10:	4a09      	ldr	r2, [pc, #36]	; (80a1f38 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1f12:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1f14:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1f16:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1f18:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1f1a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1f1c:	b128      	cbz	r0, 80a1f2a <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1f1e:	6843      	ldr	r3, [r0, #4]
 80a1f20:	3b01      	subs	r3, #1
 80a1f22:	6043      	str	r3, [r0, #4]
 80a1f24:	b90b      	cbnz	r3, 80a1f2a <_ZN9TCPClientC1Em+0x52>
 80a1f26:	f7ff fe1b 	bl	80a1b60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1f2a:	4620      	mov	r0, r4
 80a1f2c:	f7ff fe92 	bl	80a1c54 <_ZN9TCPClient12flush_bufferEv>
}
 80a1f30:	4620      	mov	r0, r4
 80a1f32:	bd70      	pop	{r4, r5, r6, pc}
 80a1f34:	080a41f8 	.word	0x080a41f8
 80a1f38:	080a41dc 	.word	0x080a41dc

080a1f3c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1f3c:	b510      	push	{r4, lr}
 80a1f3e:	4604      	mov	r4, r0
 80a1f40:	f7ff f9a4 	bl	80a128c <socket_handle_invalid>
 80a1f44:	4601      	mov	r1, r0
 80a1f46:	4620      	mov	r0, r4
 80a1f48:	f7ff ffc6 	bl	80a1ed8 <_ZN9TCPClientC1Em>
{
}
 80a1f4c:	4620      	mov	r0, r4
 80a1f4e:	bd10      	pop	{r4, pc}

080a1f50 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a1f50:	b510      	push	{r4, lr}
 80a1f52:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1f54:	6800      	ldr	r0, [r0, #0]
 80a1f56:	f7ff f971 	bl	80a123c <socket_handle_valid>
 80a1f5a:	b110      	cbz	r0, 80a1f62 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1f5c:	6820      	ldr	r0, [r4, #0]
 80a1f5e:	f7ff f98d 	bl	80a127c <socket_close>
    }
}
 80a1f62:	4620      	mov	r0, r4
 80a1f64:	bd10      	pop	{r4, pc}

080a1f66 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1f66:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1f68:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a1f6a:	4620      	mov	r0, r4
 80a1f6c:	f7ff fff0 	bl	80a1f50 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1f70:	b124      	cbz	r4, 80a1f7c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1f78:	f7fe b893 	b.w	80a00a2 <_ZdlPv>
 80a1f7c:	bd10      	pop	{r4, pc}
	...

080a1f80 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1f84:	461f      	mov	r7, r3
    stop();
 80a1f86:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1f88:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1f8c:	4606      	mov	r6, r0
 80a1f8e:	460d      	mov	r5, r1
 80a1f90:	4690      	mov	r8, r2
    stop();
 80a1f92:	4798      	blx	r3
    if (Network.ready())
 80a1f94:	4813      	ldr	r0, [pc, #76]	; (80a1fe4 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1f96:	f7ff fb92 	bl	80a16be <_ZN5spark12NetworkClass5readyEv>
 80a1f9a:	b300      	cbz	r0, 80a1fde <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a1f9c:	a802      	add	r0, sp, #8
 80a1f9e:	f7ff fb35 	bl	80a160c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1fa2:	4628      	mov	r0, r5
 80a1fa4:	f001 fcb4 	bl	80a3910 <strlen>
 80a1fa8:	2400      	movs	r4, #0
 80a1faa:	b281      	uxth	r1, r0
 80a1fac:	9400      	str	r4, [sp, #0]
 80a1fae:	463b      	mov	r3, r7
 80a1fb0:	aa03      	add	r2, sp, #12
 80a1fb2:	4628      	mov	r0, r5
 80a1fb4:	f7ff fa0a 	bl	80a13cc <inet_gethostbyname>
 80a1fb8:	b980      	cbnz	r0, 80a1fdc <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a1fba:	6833      	ldr	r3, [r6, #0]
 80a1fbc:	ad09      	add	r5, sp, #36	; 0x24
 80a1fbe:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1fc2:	4b09      	ldr	r3, [pc, #36]	; (80a1fe8 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1fc4:	ac03      	add	r4, sp, #12
 80a1fc6:	9308      	str	r3, [sp, #32]
 80a1fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1fcc:	6823      	ldr	r3, [r4, #0]
 80a1fce:	4642      	mov	r2, r8
 80a1fd0:	702b      	strb	r3, [r5, #0]
 80a1fd2:	a908      	add	r1, sp, #32
 80a1fd4:	463b      	mov	r3, r7
 80a1fd6:	4630      	mov	r0, r6
 80a1fd8:	47c8      	blx	r9
 80a1fda:	e000      	b.n	80a1fde <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a1fdc:	4620      	mov	r0, r4
}
 80a1fde:	b00f      	add	sp, #60	; 0x3c
 80a1fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1fe4:	20000114 	.word	0x20000114
 80a1fe8:	080a409c 	.word	0x080a409c

080a1fec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1fec:	4b02      	ldr	r3, [pc, #8]	; (80a1ff8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1fee:	681a      	ldr	r2, [r3, #0]
 80a1ff0:	4b02      	ldr	r3, [pc, #8]	; (80a1ffc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1ff2:	601a      	str	r2, [r3, #0]
 80a1ff4:	4770      	bx	lr
 80a1ff6:	bf00      	nop
 80a1ff8:	20000024 	.word	0x20000024
 80a1ffc:	20000138 	.word	0x20000138

080a2000 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2000:	4770      	bx	lr

080a2002 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2002:	7441      	strb	r1, [r0, #17]
 80a2004:	4770      	bx	lr

080a2006 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2006:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2008:	7c00      	ldrb	r0, [r0, #16]
 80a200a:	f7ff f997 	bl	80a133c <HAL_USART_Available_Data_For_Write>
}
 80a200e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2012:	bd08      	pop	{r3, pc}

080a2014 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2014:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2016:	7c00      	ldrb	r0, [r0, #16]
 80a2018:	f7ff f968 	bl	80a12ec <HAL_USART_Available_Data>
}
 80a201c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2020:	bd08      	pop	{r3, pc}

080a2022 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2022:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2024:	7c00      	ldrb	r0, [r0, #16]
 80a2026:	f7ff f971 	bl	80a130c <HAL_USART_Peek_Data>
}
 80a202a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a202e:	bf28      	it	cs
 80a2030:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2034:	bd08      	pop	{r3, pc}

080a2036 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2036:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2038:	7c00      	ldrb	r0, [r0, #16]
 80a203a:	f7ff f95f 	bl	80a12fc <HAL_USART_Read_Data>
}
 80a203e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2042:	bf28      	it	cs
 80a2044:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2048:	bd08      	pop	{r3, pc}

080a204a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a204a:	7c00      	ldrb	r0, [r0, #16]
 80a204c:	f7ff b966 	b.w	80a131c <HAL_USART_Flush_Data>

080a2050 <_ZN11USARTSerialD0Ev>:
 80a2050:	b510      	push	{r4, lr}
 80a2052:	4604      	mov	r4, r0
 80a2054:	2114      	movs	r1, #20
 80a2056:	f000 fb3c 	bl	80a26d2 <_ZdlPvj>
 80a205a:	4620      	mov	r0, r4
 80a205c:	bd10      	pop	{r4, pc}

080a205e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a205e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2060:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2062:	4604      	mov	r4, r0
 80a2064:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2066:	b925      	cbnz	r5, 80a2072 <_ZN11USARTSerial5writeEh+0x14>
 80a2068:	7c00      	ldrb	r0, [r0, #16]
 80a206a:	f7ff f967 	bl	80a133c <HAL_USART_Available_Data_For_Write>
 80a206e:	2800      	cmp	r0, #0
 80a2070:	dd05      	ble.n	80a207e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2072:	4631      	mov	r1, r6
 80a2074:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a207a:	f7ff b92f 	b.w	80a12dc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a207e:	4628      	mov	r0, r5
 80a2080:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2084 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2084:	b510      	push	{r4, lr}
 80a2086:	4604      	mov	r4, r0
 80a2088:	4608      	mov	r0, r1
 80a208a:	4611      	mov	r1, r2
 80a208c:	2200      	movs	r2, #0
 80a208e:	6062      	str	r2, [r4, #4]
 80a2090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2094:	60a2      	str	r2, [r4, #8]
 80a2096:	4a05      	ldr	r2, [pc, #20]	; (80a20ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2098:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a209a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a209c:	2201      	movs	r2, #1
 80a209e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a20a0:	461a      	mov	r2, r3
 80a20a2:	f7ff f913 	bl	80a12cc <HAL_USART_Init>
}
 80a20a6:	4620      	mov	r0, r4
 80a20a8:	bd10      	pop	{r4, pc}
 80a20aa:	bf00      	nop
 80a20ac:	080a4288 	.word	0x080a4288

080a20b0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a20b0:	7c00      	ldrb	r0, [r0, #16]
 80a20b2:	f7ff b93b 	b.w	80a132c <HAL_USART_Is_Enabled>
	...

080a20b8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a20b8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a20ba:	4d0c      	ldr	r5, [pc, #48]	; (80a20ec <_Z22__fetch_global_Serial1v+0x34>)
 80a20bc:	6829      	ldr	r1, [r5, #0]
 80a20be:	f011 0401 	ands.w	r4, r1, #1
 80a20c2:	d111      	bne.n	80a20e8 <_Z22__fetch_global_Serial1v+0x30>
 80a20c4:	4628      	mov	r0, r5
 80a20c6:	f7fd ffee 	bl	80a00a6 <__cxa_guard_acquire>
 80a20ca:	b168      	cbz	r0, 80a20e8 <_Z22__fetch_global_Serial1v+0x30>
 80a20cc:	4a08      	ldr	r2, [pc, #32]	; (80a20f0 <_Z22__fetch_global_Serial1v+0x38>)
 80a20ce:	4621      	mov	r1, r4
 80a20d0:	4b08      	ldr	r3, [pc, #32]	; (80a20f4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a20d2:	4809      	ldr	r0, [pc, #36]	; (80a20f8 <_Z22__fetch_global_Serial1v+0x40>)
 80a20d4:	f7ff ffd6 	bl	80a2084 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a20d8:	4628      	mov	r0, r5
 80a20da:	f7fd ffe9 	bl	80a00b0 <__cxa_guard_release>
 80a20de:	4a07      	ldr	r2, [pc, #28]	; (80a20fc <_Z22__fetch_global_Serial1v+0x44>)
 80a20e0:	4907      	ldr	r1, [pc, #28]	; (80a2100 <_Z22__fetch_global_Serial1v+0x48>)
 80a20e2:	4805      	ldr	r0, [pc, #20]	; (80a20f8 <_Z22__fetch_global_Serial1v+0x40>)
 80a20e4:	f000 faf0 	bl	80a26c8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a20e8:	4803      	ldr	r0, [pc, #12]	; (80a20f8 <_Z22__fetch_global_Serial1v+0x40>)
 80a20ea:	bd38      	pop	{r3, r4, r5, pc}
 80a20ec:	200001d4 	.word	0x200001d4
 80a20f0:	200001d8 	.word	0x200001d8
 80a20f4:	20000150 	.word	0x20000150
 80a20f8:	2000013c 	.word	0x2000013c
 80a20fc:	20000094 	.word	0x20000094
 80a2100:	080a2001 	.word	0x080a2001

080a2104 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2104:	7441      	strb	r1, [r0, #17]
 80a2106:	4770      	bx	lr

080a2108 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2108:	4770      	bx	lr

080a210a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a210a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a210c:	2100      	movs	r1, #0
 80a210e:	7c00      	ldrb	r0, [r0, #16]
 80a2110:	f7ff f93c 	bl	80a138c <HAL_USB_USART_Receive_Data>
}
 80a2114:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2118:	bf28      	it	cs
 80a211a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a211e:	bd08      	pop	{r3, pc}

080a2120 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2120:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2122:	2101      	movs	r1, #1
 80a2124:	7c00      	ldrb	r0, [r0, #16]
 80a2126:	f7ff f931 	bl	80a138c <HAL_USB_USART_Receive_Data>
}
 80a212a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a212e:	bf28      	it	cs
 80a2130:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2134:	bd08      	pop	{r3, pc}

080a2136 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2136:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2138:	7c00      	ldrb	r0, [r0, #16]
 80a213a:	f7ff f91f 	bl	80a137c <HAL_USB_USART_Available_Data_For_Write>
}
 80a213e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2142:	bd08      	pop	{r3, pc}

080a2144 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2144:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2146:	7c00      	ldrb	r0, [r0, #16]
 80a2148:	f7ff f910 	bl	80a136c <HAL_USB_USART_Available_Data>
}
 80a214c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2150:	bd08      	pop	{r3, pc}

080a2152 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2152:	7c00      	ldrb	r0, [r0, #16]
 80a2154:	f7ff b92a 	b.w	80a13ac <HAL_USB_USART_Flush_Data>

080a2158 <_ZN9USBSerialD0Ev>:
 80a2158:	b510      	push	{r4, lr}
 80a215a:	4604      	mov	r4, r0
 80a215c:	2114      	movs	r1, #20
 80a215e:	f000 fab8 	bl	80a26d2 <_ZdlPvj>
 80a2162:	4620      	mov	r0, r4
 80a2164:	bd10      	pop	{r4, pc}

080a2166 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2166:	b538      	push	{r3, r4, r5, lr}
 80a2168:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a216a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a216c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a216e:	f7ff f905 	bl	80a137c <HAL_USB_USART_Available_Data_For_Write>
 80a2172:	2800      	cmp	r0, #0
 80a2174:	dc01      	bgt.n	80a217a <_ZN9USBSerial5writeEh+0x14>
 80a2176:	7c60      	ldrb	r0, [r4, #17]
 80a2178:	b128      	cbz	r0, 80a2186 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a217a:	4629      	mov	r1, r5
 80a217c:	7c20      	ldrb	r0, [r4, #16]
 80a217e:	f7ff f90d 	bl	80a139c <HAL_USB_USART_Send_Data>
 80a2182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2186:	bd38      	pop	{r3, r4, r5, pc}

080a2188 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2188:	b510      	push	{r4, lr}
 80a218a:	4604      	mov	r4, r0
 80a218c:	2300      	movs	r3, #0
 80a218e:	6063      	str	r3, [r4, #4]
 80a2190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2194:	60a3      	str	r3, [r4, #8]
 80a2196:	4b05      	ldr	r3, [pc, #20]	; (80a21ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2198:	4608      	mov	r0, r1
 80a219a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a219c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a219e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a21a0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a21a2:	4611      	mov	r1, r2
 80a21a4:	f7ff f8d2 	bl	80a134c <HAL_USB_USART_Init>
}
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	bd10      	pop	{r4, pc}
 80a21ac:	080a42b8 	.word	0x080a42b8

080a21b0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a21b0:	2200      	movs	r2, #0
 80a21b2:	7c00      	ldrb	r0, [r0, #16]
 80a21b4:	f7ff b8d2 	b.w	80a135c <HAL_USB_USART_Begin>

080a21b8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a21b8:	b510      	push	{r4, lr}
 80a21ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a21bc:	2214      	movs	r2, #20
 80a21be:	2100      	movs	r1, #0
 80a21c0:	f001 fb6b 	bl	80a389a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a21c4:	4b05      	ldr	r3, [pc, #20]	; (80a21dc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a21c6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a21c8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a21ca:	4b05      	ldr	r3, [pc, #20]	; (80a21e0 <_Z19acquireSerialBufferv+0x28>)
 80a21cc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a21ce:	f240 1301 	movw	r3, #257	; 0x101
 80a21d2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a21d4:	2381      	movs	r3, #129	; 0x81
 80a21d6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a21d8:	bd10      	pop	{r4, pc}
 80a21da:	bf00      	nop
 80a21dc:	200002e1 	.word	0x200002e1
 80a21e0:	20000260 	.word	0x20000260

080a21e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a21e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21e6:	4d0e      	ldr	r5, [pc, #56]	; (80a2220 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a21e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a21ea:	a801      	add	r0, sp, #4
 80a21ec:	f7ff ffe4 	bl	80a21b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21f0:	6829      	ldr	r1, [r5, #0]
 80a21f2:	f011 0401 	ands.w	r4, r1, #1
 80a21f6:	d110      	bne.n	80a221a <_Z16_fetch_usbserialv+0x36>
 80a21f8:	4628      	mov	r0, r5
 80a21fa:	f7fd ff54 	bl	80a00a6 <__cxa_guard_acquire>
 80a21fe:	b160      	cbz	r0, 80a221a <_Z16_fetch_usbserialv+0x36>
 80a2200:	aa01      	add	r2, sp, #4
 80a2202:	4621      	mov	r1, r4
 80a2204:	4807      	ldr	r0, [pc, #28]	; (80a2224 <_Z16_fetch_usbserialv+0x40>)
 80a2206:	f7ff ffbf 	bl	80a2188 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a220a:	4628      	mov	r0, r5
 80a220c:	f7fd ff50 	bl	80a00b0 <__cxa_guard_release>
 80a2210:	4a05      	ldr	r2, [pc, #20]	; (80a2228 <_Z16_fetch_usbserialv+0x44>)
 80a2212:	4906      	ldr	r1, [pc, #24]	; (80a222c <_Z16_fetch_usbserialv+0x48>)
 80a2214:	4803      	ldr	r0, [pc, #12]	; (80a2224 <_Z16_fetch_usbserialv+0x40>)
 80a2216:	f000 fa57 	bl	80a26c8 <__aeabi_atexit>
	return _usbserial;
}
 80a221a:	4802      	ldr	r0, [pc, #8]	; (80a2224 <_Z16_fetch_usbserialv+0x40>)
 80a221c:	b007      	add	sp, #28
 80a221e:	bd30      	pop	{r4, r5, pc}
 80a2220:	2000025c 	.word	0x2000025c
 80a2224:	200003e4 	.word	0x200003e4
 80a2228:	20000094 	.word	0x20000094
 80a222c:	080a2109 	.word	0x080a2109

080a2230 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2230:	b510      	push	{r4, lr}
 80a2232:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2234:	2214      	movs	r2, #20
 80a2236:	2100      	movs	r1, #0
 80a2238:	f001 fb2f 	bl	80a389a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a223c:	4b05      	ldr	r3, [pc, #20]	; (80a2254 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a223e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2240:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2242:	4b05      	ldr	r3, [pc, #20]	; (80a2258 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2244:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2246:	f240 1301 	movw	r3, #257	; 0x101
 80a224a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a224c:	2381      	movs	r3, #129	; 0x81
 80a224e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2250:	bd10      	pop	{r4, pc}
 80a2252:	bf00      	nop
 80a2254:	20000494 	.word	0x20000494
 80a2258:	200003fc 	.word	0x200003fc

080a225c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a225c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a225e:	4c0e      	ldr	r4, [pc, #56]	; (80a2298 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2260:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2262:	a801      	add	r0, sp, #4
 80a2264:	f7ff ffe4 	bl	80a2230 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2268:	6823      	ldr	r3, [r4, #0]
 80a226a:	07db      	lsls	r3, r3, #31
 80a226c:	d410      	bmi.n	80a2290 <_Z17_fetch_usbserial1v+0x34>
 80a226e:	4620      	mov	r0, r4
 80a2270:	f7fd ff19 	bl	80a00a6 <__cxa_guard_acquire>
 80a2274:	b160      	cbz	r0, 80a2290 <_Z17_fetch_usbserial1v+0x34>
 80a2276:	aa01      	add	r2, sp, #4
 80a2278:	2101      	movs	r1, #1
 80a227a:	4808      	ldr	r0, [pc, #32]	; (80a229c <_Z17_fetch_usbserial1v+0x40>)
 80a227c:	f7ff ff84 	bl	80a2188 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2280:	4620      	mov	r0, r4
 80a2282:	f7fd ff15 	bl	80a00b0 <__cxa_guard_release>
 80a2286:	4a06      	ldr	r2, [pc, #24]	; (80a22a0 <_Z17_fetch_usbserial1v+0x44>)
 80a2288:	4906      	ldr	r1, [pc, #24]	; (80a22a4 <_Z17_fetch_usbserial1v+0x48>)
 80a228a:	4804      	ldr	r0, [pc, #16]	; (80a229c <_Z17_fetch_usbserial1v+0x40>)
 80a228c:	f000 fa1c 	bl	80a26c8 <__aeabi_atexit>
  return _usbserial1;
}
 80a2290:	4802      	ldr	r0, [pc, #8]	; (80a229c <_Z17_fetch_usbserial1v+0x40>)
 80a2292:	b006      	add	sp, #24
 80a2294:	bd10      	pop	{r4, pc}
 80a2296:	bf00      	nop
 80a2298:	200003f8 	.word	0x200003f8
 80a229c:	20000480 	.word	0x20000480
 80a22a0:	20000094 	.word	0x20000094
 80a22a4:	080a2109 	.word	0x080a2109

080a22a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a22a8:	2200      	movs	r2, #0
 80a22aa:	4611      	mov	r1, r2
 80a22ac:	6840      	ldr	r0, [r0, #4]
 80a22ae:	f7ff b8e9 	b.w	80a1484 <network_ready>

080a22b2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a22b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a22b4:	4616      	mov	r6, r2
 80a22b6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a22b8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a22ba:	460f      	mov	r7, r1
 80a22bc:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a22be:	2100      	movs	r1, #0
 80a22c0:	a803      	add	r0, sp, #12
 80a22c2:	f001 faea 	bl	80a389a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a22c6:	4630      	mov	r0, r6
 80a22c8:	f001 fb22 	bl	80a3910 <strlen>
 80a22cc:	2500      	movs	r5, #0
 80a22ce:	9500      	str	r5, [sp, #0]
 80a22d0:	b281      	uxth	r1, r0
 80a22d2:	687b      	ldr	r3, [r7, #4]
 80a22d4:	aa03      	add	r2, sp, #12
 80a22d6:	4630      	mov	r0, r6
 80a22d8:	f7ff f878 	bl	80a13cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a22dc:	b120      	cbz	r0, 80a22e8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a22de:	4629      	mov	r1, r5
 80a22e0:	4620      	mov	r0, r4
 80a22e2:	f7ff f9b3 	bl	80a164c <_ZN9IPAddressC1Em>
 80a22e6:	e003      	b.n	80a22f0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a22e8:	a903      	add	r1, sp, #12
 80a22ea:	4620      	mov	r0, r4
 80a22ec:	f7ff f99c 	bl	80a1628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a22f0:	4620      	mov	r0, r4
 80a22f2:	b009      	add	sp, #36	; 0x24
 80a22f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a22f6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a22f6:	2200      	movs	r2, #0
 80a22f8:	4611      	mov	r1, r2
 80a22fa:	6840      	ldr	r0, [r0, #4]
 80a22fc:	f7ff b8e2 	b.w	80a14c4 <network_listening>

080a2300 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2300:	2200      	movs	r2, #0
 80a2302:	4611      	mov	r1, r2
 80a2304:	6840      	ldr	r0, [r0, #4]
 80a2306:	f7ff b8ed 	b.w	80a14e4 <network_get_listen_timeout>

080a230a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a230a:	2200      	movs	r2, #0
 80a230c:	6840      	ldr	r0, [r0, #4]
 80a230e:	f7ff b8e1 	b.w	80a14d4 <network_set_listen_timeout>

080a2312 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2312:	2200      	movs	r2, #0
 80a2314:	f081 0101 	eor.w	r1, r1, #1
 80a2318:	6840      	ldr	r0, [r0, #4]
 80a231a:	f7ff b8cb 	b.w	80a14b4 <network_listen>

080a231e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a231e:	2300      	movs	r3, #0
 80a2320:	461a      	mov	r2, r3
 80a2322:	4619      	mov	r1, r3
 80a2324:	6840      	ldr	r0, [r0, #4]
 80a2326:	f7ff b8bd 	b.w	80a14a4 <network_off>

080a232a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a232a:	2300      	movs	r3, #0
 80a232c:	461a      	mov	r2, r3
 80a232e:	4619      	mov	r1, r3
 80a2330:	6840      	ldr	r0, [r0, #4]
 80a2332:	f7ff b8af 	b.w	80a1494 <network_on>

080a2336 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2336:	2200      	movs	r2, #0
 80a2338:	4611      	mov	r1, r2
 80a233a:	6840      	ldr	r0, [r0, #4]
 80a233c:	f7ff b892 	b.w	80a1464 <network_connecting>

080a2340 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2340:	2200      	movs	r2, #0
 80a2342:	2102      	movs	r1, #2
 80a2344:	6840      	ldr	r0, [r0, #4]
 80a2346:	f7ff b895 	b.w	80a1474 <network_disconnect>

080a234a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a234a:	2300      	movs	r3, #0
 80a234c:	461a      	mov	r2, r3
 80a234e:	6840      	ldr	r0, [r0, #4]
 80a2350:	f7ff b880 	b.w	80a1454 <network_connect>

080a2354 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2354:	4b02      	ldr	r3, [pc, #8]	; (80a2360 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2356:	2204      	movs	r2, #4
 80a2358:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a235a:	4a02      	ldr	r2, [pc, #8]	; (80a2364 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a235c:	601a      	str	r2, [r3, #0]
 80a235e:	4770      	bx	lr
 80a2360:	20000598 	.word	0x20000598
 80a2364:	080a42e8 	.word	0x080a42e8

080a2368 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2368:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a236a:	4b14      	ldr	r3, [pc, #80]	; (80a23bc <serialEventRun+0x54>)
 80a236c:	b133      	cbz	r3, 80a237c <serialEventRun+0x14>
 80a236e:	f7ff ff39 	bl	80a21e4 <_Z16_fetch_usbserialv>
 80a2372:	6803      	ldr	r3, [r0, #0]
 80a2374:	691b      	ldr	r3, [r3, #16]
 80a2376:	4798      	blx	r3
 80a2378:	2800      	cmp	r0, #0
 80a237a:	dc16      	bgt.n	80a23aa <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a237c:	4b10      	ldr	r3, [pc, #64]	; (80a23c0 <serialEventRun+0x58>)
 80a237e:	b133      	cbz	r3, 80a238e <serialEventRun+0x26>
 80a2380:	f7ff fe9a 	bl	80a20b8 <_Z22__fetch_global_Serial1v>
 80a2384:	6803      	ldr	r3, [r0, #0]
 80a2386:	691b      	ldr	r3, [r3, #16]
 80a2388:	4798      	blx	r3
 80a238a:	2800      	cmp	r0, #0
 80a238c:	dc10      	bgt.n	80a23b0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a238e:	4b0d      	ldr	r3, [pc, #52]	; (80a23c4 <serialEventRun+0x5c>)
 80a2390:	b10b      	cbz	r3, 80a2396 <serialEventRun+0x2e>
 80a2392:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2396:	4b0c      	ldr	r3, [pc, #48]	; (80a23c8 <serialEventRun+0x60>)
 80a2398:	b17b      	cbz	r3, 80a23ba <serialEventRun+0x52>
 80a239a:	f7ff ff5f 	bl	80a225c <_Z17_fetch_usbserial1v>
 80a239e:	6803      	ldr	r3, [r0, #0]
 80a23a0:	691b      	ldr	r3, [r3, #16]
 80a23a2:	4798      	blx	r3
 80a23a4:	2800      	cmp	r0, #0
 80a23a6:	dc06      	bgt.n	80a23b6 <serialEventRun+0x4e>
 80a23a8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a23aa:	f3af 8000 	nop.w
 80a23ae:	e7e5      	b.n	80a237c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a23b0:	f3af 8000 	nop.w
 80a23b4:	e7eb      	b.n	80a238e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a23b6:	f3af 8000 	nop.w
 80a23ba:	bd08      	pop	{r3, pc}
	...

080a23cc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a23cc:	b508      	push	{r3, lr}
	serialEventRun();
 80a23ce:	f7ff ffcb 	bl	80a2368 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a23d2:	f7fe fe91 	bl	80a10f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a23d6:	4b01      	ldr	r3, [pc, #4]	; (80a23dc <_post_loop+0x10>)
 80a23d8:	6018      	str	r0, [r3, #0]
 80a23da:	bd08      	pop	{r3, pc}
 80a23dc:	200005a8 	.word	0x200005a8

080a23e0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a23e0:	4802      	ldr	r0, [pc, #8]	; (80a23ec <_Z33system_initialize_user_backup_ramv+0xc>)
 80a23e2:	4a03      	ldr	r2, [pc, #12]	; (80a23f0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a23e4:	4903      	ldr	r1, [pc, #12]	; (80a23f4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a23e6:	1a12      	subs	r2, r2, r0
 80a23e8:	f001 ba4c 	b.w	80a3884 <memcpy>
 80a23ec:	40024000 	.word	0x40024000
 80a23f0:	40024004 	.word	0x40024004
 80a23f4:	080a44c0 	.word	0x080a44c0

080a23f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a23f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23fa:	2300      	movs	r3, #0
 80a23fc:	9300      	str	r3, [sp, #0]
 80a23fe:	461a      	mov	r2, r3
 80a2400:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2404:	f7ff f80c 	bl	80a1420 <system_ctrl_set_result>
}
 80a2408:	b003      	add	sp, #12
 80a240a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2410 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2410:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2412:	8843      	ldrh	r3, [r0, #2]
 80a2414:	2b0a      	cmp	r3, #10
 80a2416:	d008      	beq.n	80a242a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2418:	2b50      	cmp	r3, #80	; 0x50
 80a241a:	d109      	bne.n	80a2430 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a241c:	4b09      	ldr	r3, [pc, #36]	; (80a2444 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a241e:	681b      	ldr	r3, [r3, #0]
 80a2420:	b13b      	cbz	r3, 80a2432 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2422:	b003      	add	sp, #12
 80a2424:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2428:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a242a:	f7ff ffe5 	bl	80a23f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a242e:	e006      	b.n	80a243e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2430:	2300      	movs	r3, #0
 80a2432:	9300      	str	r3, [sp, #0]
 80a2434:	461a      	mov	r2, r3
 80a2436:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a243a:	f7fe fff1 	bl	80a1420 <system_ctrl_set_result>
        break;
    }
}
 80a243e:	b003      	add	sp, #12
 80a2440:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2444:	200005a0 	.word	0x200005a0

080a2448 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2448:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a244a:	4c10      	ldr	r4, [pc, #64]	; (80a248c <module_user_init_hook+0x44>)
 80a244c:	4d10      	ldr	r5, [pc, #64]	; (80a2490 <module_user_init_hook+0x48>)
 80a244e:	6823      	ldr	r3, [r4, #0]
 80a2450:	42ab      	cmp	r3, r5
 80a2452:	4b10      	ldr	r3, [pc, #64]	; (80a2494 <module_user_init_hook+0x4c>)
 80a2454:	bf0c      	ite	eq
 80a2456:	2201      	moveq	r2, #1
 80a2458:	2200      	movne	r2, #0
 80a245a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a245c:	d002      	beq.n	80a2464 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a245e:	f7ff ffbf 	bl	80a23e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2462:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2464:	f7fe fe38 	bl	80a10d8 <HAL_RNG_GetRandomNumber>
 80a2468:	4604      	mov	r4, r0
    srand(seed);
 80a246a:	f001 fa1f 	bl	80a38ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a246e:	4b0a      	ldr	r3, [pc, #40]	; (80a2498 <module_user_init_hook+0x50>)
 80a2470:	b113      	cbz	r3, 80a2478 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2472:	4620      	mov	r0, r4
 80a2474:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2478:	2100      	movs	r1, #0
 80a247a:	4807      	ldr	r0, [pc, #28]	; (80a2498 <module_user_init_hook+0x50>)
 80a247c:	f7fe ffe2 	bl	80a1444 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2484:	2100      	movs	r1, #0
 80a2486:	4805      	ldr	r0, [pc, #20]	; (80a249c <module_user_init_hook+0x54>)
 80a2488:	f7fe bfc0 	b.w	80a140c <system_ctrl_set_app_request_handler>
 80a248c:	40024000 	.word	0x40024000
 80a2490:	9a271c1e 	.word	0x9a271c1e
 80a2494:	200005a4 	.word	0x200005a4
 80a2498:	00000000 	.word	0x00000000
 80a249c:	080a2411 	.word	0x080a2411

080a24a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a24a0:	b510      	push	{r4, lr}
 80a24a2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a24a4:	f000 f8f0 	bl	80a2688 <_ZN8particle7globals11instanceSpiEv>
 80a24a8:	f7ff fad6 	bl	80a1a58 <_ZN8SPIClass9isEnabledEv>
 80a24ac:	b128      	cbz	r0, 80a24ba <pinAvailable+0x1a>
 80a24ae:	f1a4 030d 	sub.w	r3, r4, #13
 80a24b2:	2b02      	cmp	r3, #2
 80a24b4:	d801      	bhi.n	80a24ba <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a24b6:	2000      	movs	r0, #0
 80a24b8:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a24ba:	f000 f8a7 	bl	80a260c <_Z19__fetch_global_Wirev>
 80a24be:	f7ff f87b 	bl	80a15b8 <_ZN7TwoWire9isEnabledEv>
 80a24c2:	b108      	cbz	r0, 80a24c8 <pinAvailable+0x28>
 80a24c4:	2c01      	cmp	r4, #1
 80a24c6:	d9f6      	bls.n	80a24b6 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a24c8:	f7ff fdf6 	bl	80a20b8 <_Z22__fetch_global_Serial1v>
 80a24cc:	f7ff fdf0 	bl	80a20b0 <_ZN11USARTSerial9isEnabledEv>
 80a24d0:	b118      	cbz	r0, 80a24da <pinAvailable+0x3a>
 80a24d2:	f1a4 0312 	sub.w	r3, r4, #18
 80a24d6:	2b01      	cmp	r3, #1
 80a24d8:	d9ed      	bls.n	80a24b6 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a24da:	2c17      	cmp	r4, #23
 80a24dc:	bf8c      	ite	hi
 80a24de:	2000      	movhi	r0, #0
 80a24e0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a24e2:	bd10      	pop	{r4, pc}

080a24e4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24e4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a24e6:	b538      	push	{r3, r4, r5, lr}
 80a24e8:	4604      	mov	r4, r0
 80a24ea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24ec:	d80a      	bhi.n	80a2504 <pinMode+0x20>
 80a24ee:	29ff      	cmp	r1, #255	; 0xff
 80a24f0:	d008      	beq.n	80a2504 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a24f2:	f7ff ffd5 	bl	80a24a0 <pinAvailable>
 80a24f6:	b128      	cbz	r0, 80a2504 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a24f8:	4629      	mov	r1, r5
 80a24fa:	4620      	mov	r0, r4
}
 80a24fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2500:	f7fe be12 	b.w	80a1128 <HAL_Pin_Mode>
 80a2504:	bd38      	pop	{r3, r4, r5, pc}

080a2506 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2506:	b538      	push	{r3, r4, r5, lr}
 80a2508:	4604      	mov	r4, r0
 80a250a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a250c:	f7fe fe14 	bl	80a1138 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2510:	28ff      	cmp	r0, #255	; 0xff
 80a2512:	d010      	beq.n	80a2536 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2514:	2806      	cmp	r0, #6
 80a2516:	d804      	bhi.n	80a2522 <digitalWrite+0x1c>
 80a2518:	234d      	movs	r3, #77	; 0x4d
 80a251a:	fa23 f000 	lsr.w	r0, r3, r0
 80a251e:	07c3      	lsls	r3, r0, #31
 80a2520:	d409      	bmi.n	80a2536 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2522:	4620      	mov	r0, r4
 80a2524:	f7ff ffbc 	bl	80a24a0 <pinAvailable>
 80a2528:	b128      	cbz	r0, 80a2536 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a252a:	4629      	mov	r1, r5
 80a252c:	4620      	mov	r0, r4
}
 80a252e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2532:	f7fe be09 	b.w	80a1148 <HAL_GPIO_Write>
 80a2536:	bd38      	pop	{r3, r4, r5, pc}

080a2538 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2538:	b510      	push	{r4, lr}
 80a253a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a253c:	f7fe fdfc 	bl	80a1138 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2540:	3804      	subs	r0, #4
 80a2542:	b2c0      	uxtb	r0, r0
 80a2544:	2801      	cmp	r0, #1
 80a2546:	d908      	bls.n	80a255a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2548:	4620      	mov	r0, r4
 80a254a:	f7ff ffa9 	bl	80a24a0 <pinAvailable>
 80a254e:	b120      	cbz	r0, 80a255a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2550:	4620      	mov	r0, r4
}
 80a2552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2556:	f7fe bdff 	b.w	80a1158 <HAL_GPIO_Read>
}
 80a255a:	2000      	movs	r0, #0
 80a255c:	bd10      	pop	{r4, pc}

080a255e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a255e:	b510      	push	{r4, lr}
 80a2560:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2562:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2564:	bf9c      	itt	ls
 80a2566:	340a      	addls	r4, #10
 80a2568:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a256a:	4620      	mov	r0, r4
 80a256c:	f7ff ff98 	bl	80a24a0 <pinAvailable>
 80a2570:	b150      	cbz	r0, 80a2588 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2572:	2103      	movs	r1, #3
 80a2574:	4620      	mov	r0, r4
 80a2576:	f7fe fdcf 	bl	80a1118 <HAL_Validate_Pin_Function>
 80a257a:	2803      	cmp	r0, #3
 80a257c:	d104      	bne.n	80a2588 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a257e:	4620      	mov	r0, r4
}
 80a2580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2584:	f7fe be08 	b.w	80a1198 <HAL_ADC_Read>
}
 80a2588:	2000      	movs	r0, #0
 80a258a:	bd10      	pop	{r4, pc}

080a258c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a258c:	b538      	push	{r3, r4, r5, lr}
 80a258e:	4604      	mov	r4, r0
 80a2590:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a2592:	f7ff ff85 	bl	80a24a0 <pinAvailable>
 80a2596:	b1f0      	cbz	r0, 80a25d6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a2598:	2104      	movs	r1, #4
 80a259a:	4620      	mov	r0, r4
 80a259c:	f7fe fdbc 	bl	80a1118 <HAL_Validate_Pin_Function>
 80a25a0:	2804      	cmp	r0, #4
 80a25a2:	d105      	bne.n	80a25b0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a25a4:	b2a9      	uxth	r1, r5
 80a25a6:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a25a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a25ac:	f7fe bdec 	b.w	80a1188 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a25b0:	2102      	movs	r1, #2
 80a25b2:	4620      	mov	r0, r4
 80a25b4:	f7fe fdb0 	bl	80a1118 <HAL_Validate_Pin_Function>
 80a25b8:	2802      	cmp	r0, #2
 80a25ba:	d10c      	bne.n	80a25d6 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a25bc:	4620      	mov	r0, r4
 80a25be:	f7fe fdbb 	bl	80a1138 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a25c2:	2801      	cmp	r0, #1
 80a25c4:	d001      	beq.n	80a25ca <_Z11analogWritetm+0x3e>
 80a25c6:	2804      	cmp	r0, #4
 80a25c8:	d105      	bne.n	80a25d6 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a25ca:	4629      	mov	r1, r5
 80a25cc:	4620      	mov	r0, r4
    }
}
 80a25ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a25d2:	f7fe bde9 	b.w	80a11a8 <HAL_PWM_Write_Ext>
 80a25d6:	bd38      	pop	{r3, r4, r5, pc}

080a25d8 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a25d8:	b570      	push	{r4, r5, r6, lr}
 80a25da:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a25dc:	2514      	movs	r5, #20
 80a25de:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25e0:	4e09      	ldr	r6, [pc, #36]	; (80a2608 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a25e2:	2100      	movs	r1, #0
 80a25e4:	f001 f959 	bl	80a389a <memset>
 80a25e8:	8025      	strh	r5, [r4, #0]
 80a25ea:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25ec:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a25ee:	60a5      	str	r5, [r4, #8]
 80a25f0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25f2:	4628      	mov	r0, r5
 80a25f4:	f000 f887 	bl	80a2706 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25f8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a25fa:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25fc:	4628      	mov	r0, r5
 80a25fe:	f000 f882 	bl	80a2706 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2602:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2604:	4620      	mov	r0, r4
 80a2606:	bd70      	pop	{r4, r5, r6, pc}
 80a2608:	080a4314 	.word	0x080a4314

080a260c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a260c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a260e:	4d0e      	ldr	r5, [pc, #56]	; (80a2648 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2610:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2612:	6829      	ldr	r1, [r5, #0]
 80a2614:	f011 0401 	ands.w	r4, r1, #1
 80a2618:	d113      	bne.n	80a2642 <_Z19__fetch_global_Wirev+0x36>
 80a261a:	4628      	mov	r0, r5
 80a261c:	f7fd fd43 	bl	80a00a6 <__cxa_guard_acquire>
 80a2620:	b178      	cbz	r0, 80a2642 <_Z19__fetch_global_Wirev+0x36>
 80a2622:	a801      	add	r0, sp, #4
 80a2624:	f7ff ffd8 	bl	80a25d8 <_Z17acquireWireBufferv>
 80a2628:	aa01      	add	r2, sp, #4
 80a262a:	4621      	mov	r1, r4
 80a262c:	4807      	ldr	r0, [pc, #28]	; (80a264c <_Z19__fetch_global_Wirev+0x40>)
 80a262e:	f7fe ffb1 	bl	80a1594 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2632:	4628      	mov	r0, r5
 80a2634:	f7fd fd3c 	bl	80a00b0 <__cxa_guard_release>
 80a2638:	4a05      	ldr	r2, [pc, #20]	; (80a2650 <_Z19__fetch_global_Wirev+0x44>)
 80a263a:	4906      	ldr	r1, [pc, #24]	; (80a2654 <_Z19__fetch_global_Wirev+0x48>)
 80a263c:	4803      	ldr	r0, [pc, #12]	; (80a264c <_Z19__fetch_global_Wirev+0x40>)
 80a263e:	f000 f843 	bl	80a26c8 <__aeabi_atexit>
	return wire;
}
 80a2642:	4802      	ldr	r0, [pc, #8]	; (80a264c <_Z19__fetch_global_Wirev+0x40>)
 80a2644:	b007      	add	sp, #28
 80a2646:	bd30      	pop	{r4, r5, pc}
 80a2648:	200005ac 	.word	0x200005ac
 80a264c:	200005b0 	.word	0x200005b0
 80a2650:	20000094 	.word	0x20000094
 80a2654:	080a153d 	.word	0x080a153d

080a2658 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2658:	b513      	push	{r0, r1, r4, lr}
 80a265a:	4c08      	ldr	r4, [pc, #32]	; (80a267c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a265c:	2300      	movs	r3, #0
 80a265e:	461a      	mov	r2, r3
 80a2660:	4619      	mov	r1, r3
 80a2662:	9300      	str	r3, [sp, #0]
 80a2664:	4620      	mov	r0, r4
 80a2666:	f7ff f807 	bl	80a1678 <_ZN9IPAddressC1Ehhhh>
 80a266a:	4620      	mov	r0, r4
 80a266c:	4a04      	ldr	r2, [pc, #16]	; (80a2680 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a266e:	4905      	ldr	r1, [pc, #20]	; (80a2684 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2670:	b002      	add	sp, #8
 80a2672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2676:	f000 b827 	b.w	80a26c8 <__aeabi_atexit>
 80a267a:	bf00      	nop
 80a267c:	200005c4 	.word	0x200005c4
 80a2680:	20000094 	.word	0x20000094
 80a2684:	080a15c9 	.word	0x080a15c9

080a2688 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a2688:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a268a:	4d0b      	ldr	r5, [pc, #44]	; (80a26b8 <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a268c:	6829      	ldr	r1, [r5, #0]
 80a268e:	f011 0401 	ands.w	r4, r1, #1
 80a2692:	d10f      	bne.n	80a26b4 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a2694:	4628      	mov	r0, r5
 80a2696:	f7fd fd06 	bl	80a00a6 <__cxa_guard_acquire>
 80a269a:	b158      	cbz	r0, 80a26b4 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a269c:	4621      	mov	r1, r4
 80a269e:	4807      	ldr	r0, [pc, #28]	; (80a26bc <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a26a0:	f7ff f9c6 	bl	80a1a30 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a26a4:	4628      	mov	r0, r5
 80a26a6:	f7fd fd03 	bl	80a00b0 <__cxa_guard_release>
 80a26aa:	4a05      	ldr	r2, [pc, #20]	; (80a26c0 <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a26ac:	4905      	ldr	r1, [pc, #20]	; (80a26c4 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a26ae:	4803      	ldr	r0, [pc, #12]	; (80a26bc <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a26b0:	f000 f80a 	bl	80a26c8 <__aeabi_atexit>
    return instance;
}
 80a26b4:	4801      	ldr	r0, [pc, #4]	; (80a26bc <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a26b6:	bd38      	pop	{r3, r4, r5, pc}
 80a26b8:	200005ec 	.word	0x200005ec
 80a26bc:	200005dc 	.word	0x200005dc
 80a26c0:	20000094 	.word	0x20000094
 80a26c4:	080a1a05 	.word	0x080a1a05

080a26c8 <__aeabi_atexit>:
 80a26c8:	460b      	mov	r3, r1
 80a26ca:	4601      	mov	r1, r0
 80a26cc:	4618      	mov	r0, r3
 80a26ce:	f001 b8cb 	b.w	80a3868 <__cxa_atexit>

080a26d2 <_ZdlPvj>:
 80a26d2:	f7fd bce6 	b.w	80a00a2 <_ZdlPv>
	...

080a26d8 <_ZSt15get_new_handlerv>:
 80a26d8:	4b02      	ldr	r3, [pc, #8]	; (80a26e4 <_ZSt15get_new_handlerv+0xc>)
 80a26da:	6818      	ldr	r0, [r3, #0]
 80a26dc:	f3bf 8f5f 	dmb	sy
 80a26e0:	4770      	bx	lr
 80a26e2:	bf00      	nop
 80a26e4:	200005f0 	.word	0x200005f0

080a26e8 <_ZnwjRKSt9nothrow_t>:
 80a26e8:	b510      	push	{r4, lr}
 80a26ea:	2800      	cmp	r0, #0
 80a26ec:	bf14      	ite	ne
 80a26ee:	4604      	movne	r4, r0
 80a26f0:	2401      	moveq	r4, #1
 80a26f2:	4620      	mov	r0, r4
 80a26f4:	f7fe fefe 	bl	80a14f4 <malloc>
 80a26f8:	b920      	cbnz	r0, 80a2704 <_ZnwjRKSt9nothrow_t+0x1c>
 80a26fa:	f7ff ffed 	bl	80a26d8 <_ZSt15get_new_handlerv>
 80a26fe:	b108      	cbz	r0, 80a2704 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2700:	4780      	blx	r0
 80a2702:	e7f6      	b.n	80a26f2 <_ZnwjRKSt9nothrow_t+0xa>
 80a2704:	bd10      	pop	{r4, pc}

080a2706 <_ZnajRKSt9nothrow_t>:
 80a2706:	f7ff bfef 	b.w	80a26e8 <_ZnwjRKSt9nothrow_t>
	...

080a270c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a270c:	4b24      	ldr	r3, [pc, #144]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a270e:	681a      	ldr	r2, [r3, #0]
 80a2710:	07d0      	lsls	r0, r2, #31
 80a2712:	bf5c      	itt	pl
 80a2714:	2201      	movpl	r2, #1
 80a2716:	601a      	strpl	r2, [r3, #0]
 80a2718:	4b22      	ldr	r3, [pc, #136]	; (80a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a271a:	681a      	ldr	r2, [r3, #0]
 80a271c:	07d1      	lsls	r1, r2, #31
 80a271e:	bf5c      	itt	pl
 80a2720:	2201      	movpl	r2, #1
 80a2722:	601a      	strpl	r2, [r3, #0]
 80a2724:	4b20      	ldr	r3, [pc, #128]	; (80a27a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2726:	681a      	ldr	r2, [r3, #0]
 80a2728:	07d2      	lsls	r2, r2, #31
 80a272a:	bf5c      	itt	pl
 80a272c:	2201      	movpl	r2, #1
 80a272e:	601a      	strpl	r2, [r3, #0]
 80a2730:	4b1e      	ldr	r3, [pc, #120]	; (80a27ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2732:	681a      	ldr	r2, [r3, #0]
 80a2734:	07d0      	lsls	r0, r2, #31
 80a2736:	bf5c      	itt	pl
 80a2738:	2201      	movpl	r2, #1
 80a273a:	601a      	strpl	r2, [r3, #0]
 80a273c:	4b1c      	ldr	r3, [pc, #112]	; (80a27b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a273e:	681a      	ldr	r2, [r3, #0]
 80a2740:	07d1      	lsls	r1, r2, #31
 80a2742:	bf5c      	itt	pl
 80a2744:	2201      	movpl	r2, #1
 80a2746:	601a      	strpl	r2, [r3, #0]
 80a2748:	4b1a      	ldr	r3, [pc, #104]	; (80a27b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a274a:	681a      	ldr	r2, [r3, #0]
 80a274c:	07d2      	lsls	r2, r2, #31
 80a274e:	bf5c      	itt	pl
 80a2750:	2201      	movpl	r2, #1
 80a2752:	601a      	strpl	r2, [r3, #0]
 80a2754:	4b18      	ldr	r3, [pc, #96]	; (80a27b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2756:	681a      	ldr	r2, [r3, #0]
 80a2758:	07d0      	lsls	r0, r2, #31
 80a275a:	bf5c      	itt	pl
 80a275c:	2201      	movpl	r2, #1
 80a275e:	601a      	strpl	r2, [r3, #0]
 80a2760:	4b16      	ldr	r3, [pc, #88]	; (80a27bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2762:	681a      	ldr	r2, [r3, #0]
 80a2764:	07d1      	lsls	r1, r2, #31
 80a2766:	bf5c      	itt	pl
 80a2768:	2201      	movpl	r2, #1
 80a276a:	601a      	strpl	r2, [r3, #0]
 80a276c:	4b14      	ldr	r3, [pc, #80]	; (80a27c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a276e:	681a      	ldr	r2, [r3, #0]
 80a2770:	07d2      	lsls	r2, r2, #31
 80a2772:	bf5c      	itt	pl
 80a2774:	2201      	movpl	r2, #1
 80a2776:	601a      	strpl	r2, [r3, #0]
 80a2778:	4b12      	ldr	r3, [pc, #72]	; (80a27c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a277a:	681a      	ldr	r2, [r3, #0]
 80a277c:	07d0      	lsls	r0, r2, #31
 80a277e:	bf5c      	itt	pl
 80a2780:	2201      	movpl	r2, #1
 80a2782:	601a      	strpl	r2, [r3, #0]
 80a2784:	4b10      	ldr	r3, [pc, #64]	; (80a27c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2786:	681a      	ldr	r2, [r3, #0]
 80a2788:	07d1      	lsls	r1, r2, #31
 80a278a:	bf5c      	itt	pl
 80a278c:	2201      	movpl	r2, #1
 80a278e:	601a      	strpl	r2, [r3, #0]
 80a2790:	4b0e      	ldr	r3, [pc, #56]	; (80a27cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2792:	681a      	ldr	r2, [r3, #0]
 80a2794:	07d2      	lsls	r2, r2, #31
 80a2796:	bf5c      	itt	pl
 80a2798:	2201      	movpl	r2, #1
 80a279a:	601a      	strpl	r2, [r3, #0]
 80a279c:	4770      	bx	lr
 80a279e:	bf00      	nop
 80a27a0:	20000620 	.word	0x20000620
 80a27a4:	2000061c 	.word	0x2000061c
 80a27a8:	20000618 	.word	0x20000618
 80a27ac:	20000614 	.word	0x20000614
 80a27b0:	20000610 	.word	0x20000610
 80a27b4:	2000060c 	.word	0x2000060c
 80a27b8:	20000608 	.word	0x20000608
 80a27bc:	20000604 	.word	0x20000604
 80a27c0:	20000600 	.word	0x20000600
 80a27c4:	200005fc 	.word	0x200005fc
 80a27c8:	200005f8 	.word	0x200005f8
 80a27cc:	200005f4 	.word	0x200005f4

080a27d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a27d0:	4b18      	ldr	r3, [pc, #96]	; (80a2834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a27d2:	681a      	ldr	r2, [r3, #0]
 80a27d4:	07d1      	lsls	r1, r2, #31
 80a27d6:	bf5c      	itt	pl
 80a27d8:	2201      	movpl	r2, #1
 80a27da:	601a      	strpl	r2, [r3, #0]
 80a27dc:	4b16      	ldr	r3, [pc, #88]	; (80a2838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a27de:	681a      	ldr	r2, [r3, #0]
 80a27e0:	07d2      	lsls	r2, r2, #31
 80a27e2:	bf5c      	itt	pl
 80a27e4:	2201      	movpl	r2, #1
 80a27e6:	601a      	strpl	r2, [r3, #0]
 80a27e8:	4b14      	ldr	r3, [pc, #80]	; (80a283c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a27ea:	681a      	ldr	r2, [r3, #0]
 80a27ec:	07d0      	lsls	r0, r2, #31
 80a27ee:	bf5c      	itt	pl
 80a27f0:	2201      	movpl	r2, #1
 80a27f2:	601a      	strpl	r2, [r3, #0]
 80a27f4:	4b12      	ldr	r3, [pc, #72]	; (80a2840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a27f6:	681a      	ldr	r2, [r3, #0]
 80a27f8:	07d1      	lsls	r1, r2, #31
 80a27fa:	bf5c      	itt	pl
 80a27fc:	2201      	movpl	r2, #1
 80a27fe:	601a      	strpl	r2, [r3, #0]
 80a2800:	4b10      	ldr	r3, [pc, #64]	; (80a2844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2802:	681a      	ldr	r2, [r3, #0]
 80a2804:	07d2      	lsls	r2, r2, #31
 80a2806:	bf5c      	itt	pl
 80a2808:	2201      	movpl	r2, #1
 80a280a:	601a      	strpl	r2, [r3, #0]
 80a280c:	4b0e      	ldr	r3, [pc, #56]	; (80a2848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a280e:	681a      	ldr	r2, [r3, #0]
 80a2810:	07d0      	lsls	r0, r2, #31
 80a2812:	bf5c      	itt	pl
 80a2814:	2201      	movpl	r2, #1
 80a2816:	601a      	strpl	r2, [r3, #0]
 80a2818:	4b0c      	ldr	r3, [pc, #48]	; (80a284c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a281a:	681a      	ldr	r2, [r3, #0]
 80a281c:	07d1      	lsls	r1, r2, #31
 80a281e:	bf5c      	itt	pl
 80a2820:	2201      	movpl	r2, #1
 80a2822:	601a      	strpl	r2, [r3, #0]
 80a2824:	4b0a      	ldr	r3, [pc, #40]	; (80a2850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2826:	681a      	ldr	r2, [r3, #0]
 80a2828:	07d2      	lsls	r2, r2, #31
 80a282a:	bf5c      	itt	pl
 80a282c:	2201      	movpl	r2, #1
 80a282e:	601a      	strpl	r2, [r3, #0]
 80a2830:	4770      	bx	lr
 80a2832:	bf00      	nop
 80a2834:	20000640 	.word	0x20000640
 80a2838:	2000063c 	.word	0x2000063c
 80a283c:	20000638 	.word	0x20000638
 80a2840:	20000634 	.word	0x20000634
 80a2844:	20000630 	.word	0x20000630
 80a2848:	2000062c 	.word	0x2000062c
 80a284c:	20000628 	.word	0x20000628
 80a2850:	20000624 	.word	0x20000624

080a2854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2854:	4b18      	ldr	r3, [pc, #96]	; (80a28b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2856:	681a      	ldr	r2, [r3, #0]
 80a2858:	07d1      	lsls	r1, r2, #31
 80a285a:	bf5c      	itt	pl
 80a285c:	2201      	movpl	r2, #1
 80a285e:	601a      	strpl	r2, [r3, #0]
 80a2860:	4b16      	ldr	r3, [pc, #88]	; (80a28bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2862:	681a      	ldr	r2, [r3, #0]
 80a2864:	07d2      	lsls	r2, r2, #31
 80a2866:	bf5c      	itt	pl
 80a2868:	2201      	movpl	r2, #1
 80a286a:	601a      	strpl	r2, [r3, #0]
 80a286c:	4b14      	ldr	r3, [pc, #80]	; (80a28c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a286e:	681a      	ldr	r2, [r3, #0]
 80a2870:	07d0      	lsls	r0, r2, #31
 80a2872:	bf5c      	itt	pl
 80a2874:	2201      	movpl	r2, #1
 80a2876:	601a      	strpl	r2, [r3, #0]
 80a2878:	4b12      	ldr	r3, [pc, #72]	; (80a28c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a287a:	681a      	ldr	r2, [r3, #0]
 80a287c:	07d1      	lsls	r1, r2, #31
 80a287e:	bf5c      	itt	pl
 80a2880:	2201      	movpl	r2, #1
 80a2882:	601a      	strpl	r2, [r3, #0]
 80a2884:	4b10      	ldr	r3, [pc, #64]	; (80a28c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2886:	681a      	ldr	r2, [r3, #0]
 80a2888:	07d2      	lsls	r2, r2, #31
 80a288a:	bf5c      	itt	pl
 80a288c:	2201      	movpl	r2, #1
 80a288e:	601a      	strpl	r2, [r3, #0]
 80a2890:	4b0e      	ldr	r3, [pc, #56]	; (80a28cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2892:	681a      	ldr	r2, [r3, #0]
 80a2894:	07d0      	lsls	r0, r2, #31
 80a2896:	bf5c      	itt	pl
 80a2898:	2201      	movpl	r2, #1
 80a289a:	601a      	strpl	r2, [r3, #0]
 80a289c:	4b0c      	ldr	r3, [pc, #48]	; (80a28d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a289e:	681a      	ldr	r2, [r3, #0]
 80a28a0:	07d1      	lsls	r1, r2, #31
 80a28a2:	bf5c      	itt	pl
 80a28a4:	2201      	movpl	r2, #1
 80a28a6:	601a      	strpl	r2, [r3, #0]
 80a28a8:	4b0a      	ldr	r3, [pc, #40]	; (80a28d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a28aa:	681a      	ldr	r2, [r3, #0]
 80a28ac:	07d2      	lsls	r2, r2, #31
 80a28ae:	bf5c      	itt	pl
 80a28b0:	2201      	movpl	r2, #1
 80a28b2:	601a      	strpl	r2, [r3, #0]
 80a28b4:	4770      	bx	lr
 80a28b6:	bf00      	nop
 80a28b8:	20000660 	.word	0x20000660
 80a28bc:	2000065c 	.word	0x2000065c
 80a28c0:	20000658 	.word	0x20000658
 80a28c4:	20000654 	.word	0x20000654
 80a28c8:	20000650 	.word	0x20000650
 80a28cc:	2000064c 	.word	0x2000064c
 80a28d0:	20000648 	.word	0x20000648
 80a28d4:	20000644 	.word	0x20000644

080a28d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a28d8:	4b24      	ldr	r3, [pc, #144]	; (80a296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a28da:	681a      	ldr	r2, [r3, #0]
 80a28dc:	07d0      	lsls	r0, r2, #31
 80a28de:	bf5c      	itt	pl
 80a28e0:	2201      	movpl	r2, #1
 80a28e2:	601a      	strpl	r2, [r3, #0]
 80a28e4:	4b22      	ldr	r3, [pc, #136]	; (80a2970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a28e6:	681a      	ldr	r2, [r3, #0]
 80a28e8:	07d1      	lsls	r1, r2, #31
 80a28ea:	bf5c      	itt	pl
 80a28ec:	2201      	movpl	r2, #1
 80a28ee:	601a      	strpl	r2, [r3, #0]
 80a28f0:	4b20      	ldr	r3, [pc, #128]	; (80a2974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a28f2:	681a      	ldr	r2, [r3, #0]
 80a28f4:	07d2      	lsls	r2, r2, #31
 80a28f6:	bf5c      	itt	pl
 80a28f8:	2201      	movpl	r2, #1
 80a28fa:	601a      	strpl	r2, [r3, #0]
 80a28fc:	4b1e      	ldr	r3, [pc, #120]	; (80a2978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a28fe:	681a      	ldr	r2, [r3, #0]
 80a2900:	07d0      	lsls	r0, r2, #31
 80a2902:	bf5c      	itt	pl
 80a2904:	2201      	movpl	r2, #1
 80a2906:	601a      	strpl	r2, [r3, #0]
 80a2908:	4b1c      	ldr	r3, [pc, #112]	; (80a297c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a290a:	681a      	ldr	r2, [r3, #0]
 80a290c:	07d1      	lsls	r1, r2, #31
 80a290e:	bf5c      	itt	pl
 80a2910:	2201      	movpl	r2, #1
 80a2912:	601a      	strpl	r2, [r3, #0]
 80a2914:	4b1a      	ldr	r3, [pc, #104]	; (80a2980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2916:	681a      	ldr	r2, [r3, #0]
 80a2918:	07d2      	lsls	r2, r2, #31
 80a291a:	bf5c      	itt	pl
 80a291c:	2201      	movpl	r2, #1
 80a291e:	601a      	strpl	r2, [r3, #0]
 80a2920:	4b18      	ldr	r3, [pc, #96]	; (80a2984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2922:	681a      	ldr	r2, [r3, #0]
 80a2924:	07d0      	lsls	r0, r2, #31
 80a2926:	bf5c      	itt	pl
 80a2928:	2201      	movpl	r2, #1
 80a292a:	601a      	strpl	r2, [r3, #0]
 80a292c:	4b16      	ldr	r3, [pc, #88]	; (80a2988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a292e:	681a      	ldr	r2, [r3, #0]
 80a2930:	07d1      	lsls	r1, r2, #31
 80a2932:	bf5c      	itt	pl
 80a2934:	2201      	movpl	r2, #1
 80a2936:	601a      	strpl	r2, [r3, #0]
 80a2938:	4b14      	ldr	r3, [pc, #80]	; (80a298c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a293a:	681a      	ldr	r2, [r3, #0]
 80a293c:	07d2      	lsls	r2, r2, #31
 80a293e:	bf5c      	itt	pl
 80a2940:	2201      	movpl	r2, #1
 80a2942:	601a      	strpl	r2, [r3, #0]
 80a2944:	4b12      	ldr	r3, [pc, #72]	; (80a2990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2946:	681a      	ldr	r2, [r3, #0]
 80a2948:	07d0      	lsls	r0, r2, #31
 80a294a:	bf5c      	itt	pl
 80a294c:	2201      	movpl	r2, #1
 80a294e:	601a      	strpl	r2, [r3, #0]
 80a2950:	4b10      	ldr	r3, [pc, #64]	; (80a2994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2952:	681a      	ldr	r2, [r3, #0]
 80a2954:	07d1      	lsls	r1, r2, #31
 80a2956:	bf5c      	itt	pl
 80a2958:	2201      	movpl	r2, #1
 80a295a:	601a      	strpl	r2, [r3, #0]
 80a295c:	4b0e      	ldr	r3, [pc, #56]	; (80a2998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a295e:	681a      	ldr	r2, [r3, #0]
 80a2960:	07d2      	lsls	r2, r2, #31
 80a2962:	bf5c      	itt	pl
 80a2964:	2201      	movpl	r2, #1
 80a2966:	601a      	strpl	r2, [r3, #0]
 80a2968:	4770      	bx	lr
 80a296a:	bf00      	nop
 80a296c:	20000690 	.word	0x20000690
 80a2970:	2000068c 	.word	0x2000068c
 80a2974:	20000688 	.word	0x20000688
 80a2978:	20000684 	.word	0x20000684
 80a297c:	20000680 	.word	0x20000680
 80a2980:	2000067c 	.word	0x2000067c
 80a2984:	20000678 	.word	0x20000678
 80a2988:	20000674 	.word	0x20000674
 80a298c:	20000670 	.word	0x20000670
 80a2990:	2000066c 	.word	0x2000066c
 80a2994:	20000668 	.word	0x20000668
 80a2998:	20000664 	.word	0x20000664

080a299c <__aeabi_drsub>:
 80a299c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a29a0:	e002      	b.n	80a29a8 <__adddf3>
 80a29a2:	bf00      	nop

080a29a4 <__aeabi_dsub>:
 80a29a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a29a8 <__adddf3>:
 80a29a8:	b530      	push	{r4, r5, lr}
 80a29aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a29ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a29b2:	ea94 0f05 	teq	r4, r5
 80a29b6:	bf08      	it	eq
 80a29b8:	ea90 0f02 	teqeq	r0, r2
 80a29bc:	bf1f      	itttt	ne
 80a29be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a29c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a29c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a29ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a29ce:	f000 80e2 	beq.w	80a2b96 <__adddf3+0x1ee>
 80a29d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a29d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a29da:	bfb8      	it	lt
 80a29dc:	426d      	neglt	r5, r5
 80a29de:	dd0c      	ble.n	80a29fa <__adddf3+0x52>
 80a29e0:	442c      	add	r4, r5
 80a29e2:	ea80 0202 	eor.w	r2, r0, r2
 80a29e6:	ea81 0303 	eor.w	r3, r1, r3
 80a29ea:	ea82 0000 	eor.w	r0, r2, r0
 80a29ee:	ea83 0101 	eor.w	r1, r3, r1
 80a29f2:	ea80 0202 	eor.w	r2, r0, r2
 80a29f6:	ea81 0303 	eor.w	r3, r1, r3
 80a29fa:	2d36      	cmp	r5, #54	; 0x36
 80a29fc:	bf88      	it	hi
 80a29fe:	bd30      	pophi	{r4, r5, pc}
 80a2a00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2a04:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2a08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2a0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2a10:	d002      	beq.n	80a2a18 <__adddf3+0x70>
 80a2a12:	4240      	negs	r0, r0
 80a2a14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2a1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2a20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2a24:	d002      	beq.n	80a2a2c <__adddf3+0x84>
 80a2a26:	4252      	negs	r2, r2
 80a2a28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2a2c:	ea94 0f05 	teq	r4, r5
 80a2a30:	f000 80a7 	beq.w	80a2b82 <__adddf3+0x1da>
 80a2a34:	f1a4 0401 	sub.w	r4, r4, #1
 80a2a38:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2a3c:	db0d      	blt.n	80a2a5a <__adddf3+0xb2>
 80a2a3e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2a42:	fa22 f205 	lsr.w	r2, r2, r5
 80a2a46:	1880      	adds	r0, r0, r2
 80a2a48:	f141 0100 	adc.w	r1, r1, #0
 80a2a4c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2a50:	1880      	adds	r0, r0, r2
 80a2a52:	fa43 f305 	asr.w	r3, r3, r5
 80a2a56:	4159      	adcs	r1, r3
 80a2a58:	e00e      	b.n	80a2a78 <__adddf3+0xd0>
 80a2a5a:	f1a5 0520 	sub.w	r5, r5, #32
 80a2a5e:	f10e 0e20 	add.w	lr, lr, #32
 80a2a62:	2a01      	cmp	r2, #1
 80a2a64:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2a68:	bf28      	it	cs
 80a2a6a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2a6e:	fa43 f305 	asr.w	r3, r3, r5
 80a2a72:	18c0      	adds	r0, r0, r3
 80a2a74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2a78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a7c:	d507      	bpl.n	80a2a8e <__adddf3+0xe6>
 80a2a7e:	f04f 0e00 	mov.w	lr, #0
 80a2a82:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2a86:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2a8a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2a8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2a92:	d31b      	bcc.n	80a2acc <__adddf3+0x124>
 80a2a94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2a98:	d30c      	bcc.n	80a2ab4 <__adddf3+0x10c>
 80a2a9a:	0849      	lsrs	r1, r1, #1
 80a2a9c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2aa0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2aa4:	f104 0401 	add.w	r4, r4, #1
 80a2aa8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2aac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2ab0:	f080 809a 	bcs.w	80a2be8 <__adddf3+0x240>
 80a2ab4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2ab8:	bf08      	it	eq
 80a2aba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2abe:	f150 0000 	adcs.w	r0, r0, #0
 80a2ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2ac6:	ea41 0105 	orr.w	r1, r1, r5
 80a2aca:	bd30      	pop	{r4, r5, pc}
 80a2acc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2ad0:	4140      	adcs	r0, r0
 80a2ad2:	eb41 0101 	adc.w	r1, r1, r1
 80a2ad6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ada:	f1a4 0401 	sub.w	r4, r4, #1
 80a2ade:	d1e9      	bne.n	80a2ab4 <__adddf3+0x10c>
 80a2ae0:	f091 0f00 	teq	r1, #0
 80a2ae4:	bf04      	itt	eq
 80a2ae6:	4601      	moveq	r1, r0
 80a2ae8:	2000      	moveq	r0, #0
 80a2aea:	fab1 f381 	clz	r3, r1
 80a2aee:	bf08      	it	eq
 80a2af0:	3320      	addeq	r3, #32
 80a2af2:	f1a3 030b 	sub.w	r3, r3, #11
 80a2af6:	f1b3 0220 	subs.w	r2, r3, #32
 80a2afa:	da0c      	bge.n	80a2b16 <__adddf3+0x16e>
 80a2afc:	320c      	adds	r2, #12
 80a2afe:	dd08      	ble.n	80a2b12 <__adddf3+0x16a>
 80a2b00:	f102 0c14 	add.w	ip, r2, #20
 80a2b04:	f1c2 020c 	rsb	r2, r2, #12
 80a2b08:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2b0c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b10:	e00c      	b.n	80a2b2c <__adddf3+0x184>
 80a2b12:	f102 0214 	add.w	r2, r2, #20
 80a2b16:	bfd8      	it	le
 80a2b18:	f1c2 0c20 	rsble	ip, r2, #32
 80a2b1c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2b20:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2b24:	bfdc      	itt	le
 80a2b26:	ea41 010c 	orrle.w	r1, r1, ip
 80a2b2a:	4090      	lslle	r0, r2
 80a2b2c:	1ae4      	subs	r4, r4, r3
 80a2b2e:	bfa2      	ittt	ge
 80a2b30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2b34:	4329      	orrge	r1, r5
 80a2b36:	bd30      	popge	{r4, r5, pc}
 80a2b38:	ea6f 0404 	mvn.w	r4, r4
 80a2b3c:	3c1f      	subs	r4, #31
 80a2b3e:	da1c      	bge.n	80a2b7a <__adddf3+0x1d2>
 80a2b40:	340c      	adds	r4, #12
 80a2b42:	dc0e      	bgt.n	80a2b62 <__adddf3+0x1ba>
 80a2b44:	f104 0414 	add.w	r4, r4, #20
 80a2b48:	f1c4 0220 	rsb	r2, r4, #32
 80a2b4c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2b50:	fa01 f302 	lsl.w	r3, r1, r2
 80a2b54:	ea40 0003 	orr.w	r0, r0, r3
 80a2b58:	fa21 f304 	lsr.w	r3, r1, r4
 80a2b5c:	ea45 0103 	orr.w	r1, r5, r3
 80a2b60:	bd30      	pop	{r4, r5, pc}
 80a2b62:	f1c4 040c 	rsb	r4, r4, #12
 80a2b66:	f1c4 0220 	rsb	r2, r4, #32
 80a2b6a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b6e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2b72:	ea40 0003 	orr.w	r0, r0, r3
 80a2b76:	4629      	mov	r1, r5
 80a2b78:	bd30      	pop	{r4, r5, pc}
 80a2b7a:	fa21 f004 	lsr.w	r0, r1, r4
 80a2b7e:	4629      	mov	r1, r5
 80a2b80:	bd30      	pop	{r4, r5, pc}
 80a2b82:	f094 0f00 	teq	r4, #0
 80a2b86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2b8a:	bf06      	itte	eq
 80a2b8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2b90:	3401      	addeq	r4, #1
 80a2b92:	3d01      	subne	r5, #1
 80a2b94:	e74e      	b.n	80a2a34 <__adddf3+0x8c>
 80a2b96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2b9a:	bf18      	it	ne
 80a2b9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ba0:	d029      	beq.n	80a2bf6 <__adddf3+0x24e>
 80a2ba2:	ea94 0f05 	teq	r4, r5
 80a2ba6:	bf08      	it	eq
 80a2ba8:	ea90 0f02 	teqeq	r0, r2
 80a2bac:	d005      	beq.n	80a2bba <__adddf3+0x212>
 80a2bae:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2bb2:	bf04      	itt	eq
 80a2bb4:	4619      	moveq	r1, r3
 80a2bb6:	4610      	moveq	r0, r2
 80a2bb8:	bd30      	pop	{r4, r5, pc}
 80a2bba:	ea91 0f03 	teq	r1, r3
 80a2bbe:	bf1e      	ittt	ne
 80a2bc0:	2100      	movne	r1, #0
 80a2bc2:	2000      	movne	r0, #0
 80a2bc4:	bd30      	popne	{r4, r5, pc}
 80a2bc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2bca:	d105      	bne.n	80a2bd8 <__adddf3+0x230>
 80a2bcc:	0040      	lsls	r0, r0, #1
 80a2bce:	4149      	adcs	r1, r1
 80a2bd0:	bf28      	it	cs
 80a2bd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2bd6:	bd30      	pop	{r4, r5, pc}
 80a2bd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2bdc:	bf3c      	itt	cc
 80a2bde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2be2:	bd30      	popcc	{r4, r5, pc}
 80a2be4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2be8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2bec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2bf0:	f04f 0000 	mov.w	r0, #0
 80a2bf4:	bd30      	pop	{r4, r5, pc}
 80a2bf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2bfa:	bf1a      	itte	ne
 80a2bfc:	4619      	movne	r1, r3
 80a2bfe:	4610      	movne	r0, r2
 80a2c00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2c04:	bf1c      	itt	ne
 80a2c06:	460b      	movne	r3, r1
 80a2c08:	4602      	movne	r2, r0
 80a2c0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2c0e:	bf06      	itte	eq
 80a2c10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2c14:	ea91 0f03 	teqeq	r1, r3
 80a2c18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2c1c:	bd30      	pop	{r4, r5, pc}
 80a2c1e:	bf00      	nop

080a2c20 <__aeabi_ui2d>:
 80a2c20:	f090 0f00 	teq	r0, #0
 80a2c24:	bf04      	itt	eq
 80a2c26:	2100      	moveq	r1, #0
 80a2c28:	4770      	bxeq	lr
 80a2c2a:	b530      	push	{r4, r5, lr}
 80a2c2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c30:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c34:	f04f 0500 	mov.w	r5, #0
 80a2c38:	f04f 0100 	mov.w	r1, #0
 80a2c3c:	e750      	b.n	80a2ae0 <__adddf3+0x138>
 80a2c3e:	bf00      	nop

080a2c40 <__aeabi_i2d>:
 80a2c40:	f090 0f00 	teq	r0, #0
 80a2c44:	bf04      	itt	eq
 80a2c46:	2100      	moveq	r1, #0
 80a2c48:	4770      	bxeq	lr
 80a2c4a:	b530      	push	{r4, r5, lr}
 80a2c4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2c58:	bf48      	it	mi
 80a2c5a:	4240      	negmi	r0, r0
 80a2c5c:	f04f 0100 	mov.w	r1, #0
 80a2c60:	e73e      	b.n	80a2ae0 <__adddf3+0x138>
 80a2c62:	bf00      	nop

080a2c64 <__aeabi_f2d>:
 80a2c64:	0042      	lsls	r2, r0, #1
 80a2c66:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2c6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2c72:	bf1f      	itttt	ne
 80a2c74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2c78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2c7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2c80:	4770      	bxne	lr
 80a2c82:	f092 0f00 	teq	r2, #0
 80a2c86:	bf14      	ite	ne
 80a2c88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2c8c:	4770      	bxeq	lr
 80a2c8e:	b530      	push	{r4, r5, lr}
 80a2c90:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2c98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c9c:	e720      	b.n	80a2ae0 <__adddf3+0x138>
 80a2c9e:	bf00      	nop

080a2ca0 <__aeabi_ul2d>:
 80a2ca0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ca4:	bf08      	it	eq
 80a2ca6:	4770      	bxeq	lr
 80a2ca8:	b530      	push	{r4, r5, lr}
 80a2caa:	f04f 0500 	mov.w	r5, #0
 80a2cae:	e00a      	b.n	80a2cc6 <__aeabi_l2d+0x16>

080a2cb0 <__aeabi_l2d>:
 80a2cb0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2cb4:	bf08      	it	eq
 80a2cb6:	4770      	bxeq	lr
 80a2cb8:	b530      	push	{r4, r5, lr}
 80a2cba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2cbe:	d502      	bpl.n	80a2cc6 <__aeabi_l2d+0x16>
 80a2cc0:	4240      	negs	r0, r0
 80a2cc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2cc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2cca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2cce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2cd2:	f43f aedc 	beq.w	80a2a8e <__adddf3+0xe6>
 80a2cd6:	f04f 0203 	mov.w	r2, #3
 80a2cda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2cde:	bf18      	it	ne
 80a2ce0:	3203      	addne	r2, #3
 80a2ce2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2ce6:	bf18      	it	ne
 80a2ce8:	3203      	addne	r2, #3
 80a2cea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2cee:	f1c2 0320 	rsb	r3, r2, #32
 80a2cf2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2cf6:	fa20 f002 	lsr.w	r0, r0, r2
 80a2cfa:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2cfe:	ea40 000e 	orr.w	r0, r0, lr
 80a2d02:	fa21 f102 	lsr.w	r1, r1, r2
 80a2d06:	4414      	add	r4, r2
 80a2d08:	e6c1      	b.n	80a2a8e <__adddf3+0xe6>
 80a2d0a:	bf00      	nop

080a2d0c <__aeabi_dmul>:
 80a2d0c:	b570      	push	{r4, r5, r6, lr}
 80a2d0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2d12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2d16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2d1a:	bf1d      	ittte	ne
 80a2d1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2d20:	ea94 0f0c 	teqne	r4, ip
 80a2d24:	ea95 0f0c 	teqne	r5, ip
 80a2d28:	f000 f8de 	bleq	80a2ee8 <__aeabi_dmul+0x1dc>
 80a2d2c:	442c      	add	r4, r5
 80a2d2e:	ea81 0603 	eor.w	r6, r1, r3
 80a2d32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2d36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2d3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2d3e:	bf18      	it	ne
 80a2d40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2d4c:	d038      	beq.n	80a2dc0 <__aeabi_dmul+0xb4>
 80a2d4e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2d52:	f04f 0500 	mov.w	r5, #0
 80a2d56:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2d5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2d5e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2d62:	f04f 0600 	mov.w	r6, #0
 80a2d66:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2d6a:	f09c 0f00 	teq	ip, #0
 80a2d6e:	bf18      	it	ne
 80a2d70:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2d74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2d78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2d7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2d80:	d204      	bcs.n	80a2d8c <__aeabi_dmul+0x80>
 80a2d82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2d86:	416d      	adcs	r5, r5
 80a2d88:	eb46 0606 	adc.w	r6, r6, r6
 80a2d8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2d90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2d94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2d98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2d9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2da0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2da4:	bf88      	it	hi
 80a2da6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2daa:	d81e      	bhi.n	80a2dea <__aeabi_dmul+0xde>
 80a2dac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2db0:	bf08      	it	eq
 80a2db2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2db6:	f150 0000 	adcs.w	r0, r0, #0
 80a2dba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2dbe:	bd70      	pop	{r4, r5, r6, pc}
 80a2dc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2dc4:	ea46 0101 	orr.w	r1, r6, r1
 80a2dc8:	ea40 0002 	orr.w	r0, r0, r2
 80a2dcc:	ea81 0103 	eor.w	r1, r1, r3
 80a2dd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2dd4:	bfc2      	ittt	gt
 80a2dd6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2dda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2dde:	bd70      	popgt	{r4, r5, r6, pc}
 80a2de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2de4:	f04f 0e00 	mov.w	lr, #0
 80a2de8:	3c01      	subs	r4, #1
 80a2dea:	f300 80ab 	bgt.w	80a2f44 <__aeabi_dmul+0x238>
 80a2dee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2df2:	bfde      	ittt	le
 80a2df4:	2000      	movle	r0, #0
 80a2df6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2dfa:	bd70      	pople	{r4, r5, r6, pc}
 80a2dfc:	f1c4 0400 	rsb	r4, r4, #0
 80a2e00:	3c20      	subs	r4, #32
 80a2e02:	da35      	bge.n	80a2e70 <__aeabi_dmul+0x164>
 80a2e04:	340c      	adds	r4, #12
 80a2e06:	dc1b      	bgt.n	80a2e40 <__aeabi_dmul+0x134>
 80a2e08:	f104 0414 	add.w	r4, r4, #20
 80a2e0c:	f1c4 0520 	rsb	r5, r4, #32
 80a2e10:	fa00 f305 	lsl.w	r3, r0, r5
 80a2e14:	fa20 f004 	lsr.w	r0, r0, r4
 80a2e18:	fa01 f205 	lsl.w	r2, r1, r5
 80a2e1c:	ea40 0002 	orr.w	r0, r0, r2
 80a2e20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2e24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2e28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2e2c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2e30:	eb42 0106 	adc.w	r1, r2, r6
 80a2e34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e38:	bf08      	it	eq
 80a2e3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e3e:	bd70      	pop	{r4, r5, r6, pc}
 80a2e40:	f1c4 040c 	rsb	r4, r4, #12
 80a2e44:	f1c4 0520 	rsb	r5, r4, #32
 80a2e48:	fa00 f304 	lsl.w	r3, r0, r4
 80a2e4c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2e50:	fa01 f204 	lsl.w	r2, r1, r4
 80a2e54:	ea40 0002 	orr.w	r0, r0, r2
 80a2e58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2e60:	f141 0100 	adc.w	r1, r1, #0
 80a2e64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e68:	bf08      	it	eq
 80a2e6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e6e:	bd70      	pop	{r4, r5, r6, pc}
 80a2e70:	f1c4 0520 	rsb	r5, r4, #32
 80a2e74:	fa00 f205 	lsl.w	r2, r0, r5
 80a2e78:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2e7c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2e80:	fa01 f205 	lsl.w	r2, r1, r5
 80a2e84:	ea43 0302 	orr.w	r3, r3, r2
 80a2e88:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e90:	fa21 f204 	lsr.w	r2, r1, r4
 80a2e94:	ea20 0002 	bic.w	r0, r0, r2
 80a2e98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2e9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2ea0:	bf08      	it	eq
 80a2ea2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2ea6:	bd70      	pop	{r4, r5, r6, pc}
 80a2ea8:	f094 0f00 	teq	r4, #0
 80a2eac:	d10f      	bne.n	80a2ece <__aeabi_dmul+0x1c2>
 80a2eae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2eb2:	0040      	lsls	r0, r0, #1
 80a2eb4:	eb41 0101 	adc.w	r1, r1, r1
 80a2eb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ebc:	bf08      	it	eq
 80a2ebe:	3c01      	subeq	r4, #1
 80a2ec0:	d0f7      	beq.n	80a2eb2 <__aeabi_dmul+0x1a6>
 80a2ec2:	ea41 0106 	orr.w	r1, r1, r6
 80a2ec6:	f095 0f00 	teq	r5, #0
 80a2eca:	bf18      	it	ne
 80a2ecc:	4770      	bxne	lr
 80a2ece:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2ed2:	0052      	lsls	r2, r2, #1
 80a2ed4:	eb43 0303 	adc.w	r3, r3, r3
 80a2ed8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2edc:	bf08      	it	eq
 80a2ede:	3d01      	subeq	r5, #1
 80a2ee0:	d0f7      	beq.n	80a2ed2 <__aeabi_dmul+0x1c6>
 80a2ee2:	ea43 0306 	orr.w	r3, r3, r6
 80a2ee6:	4770      	bx	lr
 80a2ee8:	ea94 0f0c 	teq	r4, ip
 80a2eec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2ef0:	bf18      	it	ne
 80a2ef2:	ea95 0f0c 	teqne	r5, ip
 80a2ef6:	d00c      	beq.n	80a2f12 <__aeabi_dmul+0x206>
 80a2ef8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2efc:	bf18      	it	ne
 80a2efe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f02:	d1d1      	bne.n	80a2ea8 <__aeabi_dmul+0x19c>
 80a2f04:	ea81 0103 	eor.w	r1, r1, r3
 80a2f08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f0c:	f04f 0000 	mov.w	r0, #0
 80a2f10:	bd70      	pop	{r4, r5, r6, pc}
 80a2f12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f16:	bf06      	itte	eq
 80a2f18:	4610      	moveq	r0, r2
 80a2f1a:	4619      	moveq	r1, r3
 80a2f1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f20:	d019      	beq.n	80a2f56 <__aeabi_dmul+0x24a>
 80a2f22:	ea94 0f0c 	teq	r4, ip
 80a2f26:	d102      	bne.n	80a2f2e <__aeabi_dmul+0x222>
 80a2f28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2f2c:	d113      	bne.n	80a2f56 <__aeabi_dmul+0x24a>
 80a2f2e:	ea95 0f0c 	teq	r5, ip
 80a2f32:	d105      	bne.n	80a2f40 <__aeabi_dmul+0x234>
 80a2f34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2f38:	bf1c      	itt	ne
 80a2f3a:	4610      	movne	r0, r2
 80a2f3c:	4619      	movne	r1, r3
 80a2f3e:	d10a      	bne.n	80a2f56 <__aeabi_dmul+0x24a>
 80a2f40:	ea81 0103 	eor.w	r1, r1, r3
 80a2f44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2f4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2f50:	f04f 0000 	mov.w	r0, #0
 80a2f54:	bd70      	pop	{r4, r5, r6, pc}
 80a2f56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2f5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2f5e:	bd70      	pop	{r4, r5, r6, pc}

080a2f60 <__aeabi_ddiv>:
 80a2f60:	b570      	push	{r4, r5, r6, lr}
 80a2f62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2f66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2f6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2f6e:	bf1d      	ittte	ne
 80a2f70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2f74:	ea94 0f0c 	teqne	r4, ip
 80a2f78:	ea95 0f0c 	teqne	r5, ip
 80a2f7c:	f000 f8a7 	bleq	80a30ce <__aeabi_ddiv+0x16e>
 80a2f80:	eba4 0405 	sub.w	r4, r4, r5
 80a2f84:	ea81 0e03 	eor.w	lr, r1, r3
 80a2f88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2f90:	f000 8088 	beq.w	80a30a4 <__aeabi_ddiv+0x144>
 80a2f94:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2f98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2f9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2fa0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2fa4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2fa8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2fac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2fb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2fb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2fb8:	429d      	cmp	r5, r3
 80a2fba:	bf08      	it	eq
 80a2fbc:	4296      	cmpeq	r6, r2
 80a2fbe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2fc2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2fc6:	d202      	bcs.n	80a2fce <__aeabi_ddiv+0x6e>
 80a2fc8:	085b      	lsrs	r3, r3, #1
 80a2fca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fce:	1ab6      	subs	r6, r6, r2
 80a2fd0:	eb65 0503 	sbc.w	r5, r5, r3
 80a2fd4:	085b      	lsrs	r3, r3, #1
 80a2fd6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2fde:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2fe2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2fe6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2fea:	bf22      	ittt	cs
 80a2fec:	1ab6      	subcs	r6, r6, r2
 80a2fee:	4675      	movcs	r5, lr
 80a2ff0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2ff4:	085b      	lsrs	r3, r3, #1
 80a2ff6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2ffa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2ffe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3002:	bf22      	ittt	cs
 80a3004:	1ab6      	subcs	r6, r6, r2
 80a3006:	4675      	movcs	r5, lr
 80a3008:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a300c:	085b      	lsrs	r3, r3, #1
 80a300e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3012:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3016:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a301a:	bf22      	ittt	cs
 80a301c:	1ab6      	subcs	r6, r6, r2
 80a301e:	4675      	movcs	r5, lr
 80a3020:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3024:	085b      	lsrs	r3, r3, #1
 80a3026:	ea4f 0232 	mov.w	r2, r2, rrx
 80a302a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a302e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3032:	bf22      	ittt	cs
 80a3034:	1ab6      	subcs	r6, r6, r2
 80a3036:	4675      	movcs	r5, lr
 80a3038:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a303c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3040:	d018      	beq.n	80a3074 <__aeabi_ddiv+0x114>
 80a3042:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3046:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a304a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a304e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3052:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3056:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a305a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a305e:	d1c0      	bne.n	80a2fe2 <__aeabi_ddiv+0x82>
 80a3060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3064:	d10b      	bne.n	80a307e <__aeabi_ddiv+0x11e>
 80a3066:	ea41 0100 	orr.w	r1, r1, r0
 80a306a:	f04f 0000 	mov.w	r0, #0
 80a306e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3072:	e7b6      	b.n	80a2fe2 <__aeabi_ddiv+0x82>
 80a3074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3078:	bf04      	itt	eq
 80a307a:	4301      	orreq	r1, r0
 80a307c:	2000      	moveq	r0, #0
 80a307e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3082:	bf88      	it	hi
 80a3084:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3088:	f63f aeaf 	bhi.w	80a2dea <__aeabi_dmul+0xde>
 80a308c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3090:	bf04      	itt	eq
 80a3092:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3096:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a309a:	f150 0000 	adcs.w	r0, r0, #0
 80a309e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a30a2:	bd70      	pop	{r4, r5, r6, pc}
 80a30a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a30a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a30ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a30b0:	bfc2      	ittt	gt
 80a30b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a30b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a30ba:	bd70      	popgt	{r4, r5, r6, pc}
 80a30bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a30c0:	f04f 0e00 	mov.w	lr, #0
 80a30c4:	3c01      	subs	r4, #1
 80a30c6:	e690      	b.n	80a2dea <__aeabi_dmul+0xde>
 80a30c8:	ea45 0e06 	orr.w	lr, r5, r6
 80a30cc:	e68d      	b.n	80a2dea <__aeabi_dmul+0xde>
 80a30ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a30d2:	ea94 0f0c 	teq	r4, ip
 80a30d6:	bf08      	it	eq
 80a30d8:	ea95 0f0c 	teqeq	r5, ip
 80a30dc:	f43f af3b 	beq.w	80a2f56 <__aeabi_dmul+0x24a>
 80a30e0:	ea94 0f0c 	teq	r4, ip
 80a30e4:	d10a      	bne.n	80a30fc <__aeabi_ddiv+0x19c>
 80a30e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a30ea:	f47f af34 	bne.w	80a2f56 <__aeabi_dmul+0x24a>
 80a30ee:	ea95 0f0c 	teq	r5, ip
 80a30f2:	f47f af25 	bne.w	80a2f40 <__aeabi_dmul+0x234>
 80a30f6:	4610      	mov	r0, r2
 80a30f8:	4619      	mov	r1, r3
 80a30fa:	e72c      	b.n	80a2f56 <__aeabi_dmul+0x24a>
 80a30fc:	ea95 0f0c 	teq	r5, ip
 80a3100:	d106      	bne.n	80a3110 <__aeabi_ddiv+0x1b0>
 80a3102:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3106:	f43f aefd 	beq.w	80a2f04 <__aeabi_dmul+0x1f8>
 80a310a:	4610      	mov	r0, r2
 80a310c:	4619      	mov	r1, r3
 80a310e:	e722      	b.n	80a2f56 <__aeabi_dmul+0x24a>
 80a3110:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3114:	bf18      	it	ne
 80a3116:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a311a:	f47f aec5 	bne.w	80a2ea8 <__aeabi_dmul+0x19c>
 80a311e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3122:	f47f af0d 	bne.w	80a2f40 <__aeabi_dmul+0x234>
 80a3126:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a312a:	f47f aeeb 	bne.w	80a2f04 <__aeabi_dmul+0x1f8>
 80a312e:	e712      	b.n	80a2f56 <__aeabi_dmul+0x24a>

080a3130 <__gedf2>:
 80a3130:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3134:	e006      	b.n	80a3144 <__cmpdf2+0x4>
 80a3136:	bf00      	nop

080a3138 <__ledf2>:
 80a3138:	f04f 0c01 	mov.w	ip, #1
 80a313c:	e002      	b.n	80a3144 <__cmpdf2+0x4>
 80a313e:	bf00      	nop

080a3140 <__cmpdf2>:
 80a3140:	f04f 0c01 	mov.w	ip, #1
 80a3144:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3148:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a314c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3150:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3154:	bf18      	it	ne
 80a3156:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a315a:	d01b      	beq.n	80a3194 <__cmpdf2+0x54>
 80a315c:	b001      	add	sp, #4
 80a315e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3162:	bf0c      	ite	eq
 80a3164:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3168:	ea91 0f03 	teqne	r1, r3
 80a316c:	bf02      	ittt	eq
 80a316e:	ea90 0f02 	teqeq	r0, r2
 80a3172:	2000      	moveq	r0, #0
 80a3174:	4770      	bxeq	lr
 80a3176:	f110 0f00 	cmn.w	r0, #0
 80a317a:	ea91 0f03 	teq	r1, r3
 80a317e:	bf58      	it	pl
 80a3180:	4299      	cmppl	r1, r3
 80a3182:	bf08      	it	eq
 80a3184:	4290      	cmpeq	r0, r2
 80a3186:	bf2c      	ite	cs
 80a3188:	17d8      	asrcs	r0, r3, #31
 80a318a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a318e:	f040 0001 	orr.w	r0, r0, #1
 80a3192:	4770      	bx	lr
 80a3194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a319c:	d102      	bne.n	80a31a4 <__cmpdf2+0x64>
 80a319e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a31a2:	d107      	bne.n	80a31b4 <__cmpdf2+0x74>
 80a31a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a31a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a31ac:	d1d6      	bne.n	80a315c <__cmpdf2+0x1c>
 80a31ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a31b2:	d0d3      	beq.n	80a315c <__cmpdf2+0x1c>
 80a31b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a31b8:	4770      	bx	lr
 80a31ba:	bf00      	nop

080a31bc <__aeabi_cdrcmple>:
 80a31bc:	4684      	mov	ip, r0
 80a31be:	4610      	mov	r0, r2
 80a31c0:	4662      	mov	r2, ip
 80a31c2:	468c      	mov	ip, r1
 80a31c4:	4619      	mov	r1, r3
 80a31c6:	4663      	mov	r3, ip
 80a31c8:	e000      	b.n	80a31cc <__aeabi_cdcmpeq>
 80a31ca:	bf00      	nop

080a31cc <__aeabi_cdcmpeq>:
 80a31cc:	b501      	push	{r0, lr}
 80a31ce:	f7ff ffb7 	bl	80a3140 <__cmpdf2>
 80a31d2:	2800      	cmp	r0, #0
 80a31d4:	bf48      	it	mi
 80a31d6:	f110 0f00 	cmnmi.w	r0, #0
 80a31da:	bd01      	pop	{r0, pc}

080a31dc <__aeabi_dcmpeq>:
 80a31dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a31e0:	f7ff fff4 	bl	80a31cc <__aeabi_cdcmpeq>
 80a31e4:	bf0c      	ite	eq
 80a31e6:	2001      	moveq	r0, #1
 80a31e8:	2000      	movne	r0, #0
 80a31ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a31ee:	bf00      	nop

080a31f0 <__aeabi_dcmplt>:
 80a31f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a31f4:	f7ff ffea 	bl	80a31cc <__aeabi_cdcmpeq>
 80a31f8:	bf34      	ite	cc
 80a31fa:	2001      	movcc	r0, #1
 80a31fc:	2000      	movcs	r0, #0
 80a31fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3202:	bf00      	nop

080a3204 <__aeabi_dcmple>:
 80a3204:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3208:	f7ff ffe0 	bl	80a31cc <__aeabi_cdcmpeq>
 80a320c:	bf94      	ite	ls
 80a320e:	2001      	movls	r0, #1
 80a3210:	2000      	movhi	r0, #0
 80a3212:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3216:	bf00      	nop

080a3218 <__aeabi_dcmpge>:
 80a3218:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a321c:	f7ff ffce 	bl	80a31bc <__aeabi_cdrcmple>
 80a3220:	bf94      	ite	ls
 80a3222:	2001      	movls	r0, #1
 80a3224:	2000      	movhi	r0, #0
 80a3226:	f85d fb08 	ldr.w	pc, [sp], #8
 80a322a:	bf00      	nop

080a322c <__aeabi_dcmpgt>:
 80a322c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3230:	f7ff ffc4 	bl	80a31bc <__aeabi_cdrcmple>
 80a3234:	bf34      	ite	cc
 80a3236:	2001      	movcc	r0, #1
 80a3238:	2000      	movcs	r0, #0
 80a323a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a323e:	bf00      	nop

080a3240 <__aeabi_dcmpun>:
 80a3240:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3248:	d102      	bne.n	80a3250 <__aeabi_dcmpun+0x10>
 80a324a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a324e:	d10a      	bne.n	80a3266 <__aeabi_dcmpun+0x26>
 80a3250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3258:	d102      	bne.n	80a3260 <__aeabi_dcmpun+0x20>
 80a325a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a325e:	d102      	bne.n	80a3266 <__aeabi_dcmpun+0x26>
 80a3260:	f04f 0000 	mov.w	r0, #0
 80a3264:	4770      	bx	lr
 80a3266:	f04f 0001 	mov.w	r0, #1
 80a326a:	4770      	bx	lr

080a326c <__aeabi_d2iz>:
 80a326c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3270:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3274:	d215      	bcs.n	80a32a2 <__aeabi_d2iz+0x36>
 80a3276:	d511      	bpl.n	80a329c <__aeabi_d2iz+0x30>
 80a3278:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a327c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3280:	d912      	bls.n	80a32a8 <__aeabi_d2iz+0x3c>
 80a3282:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a328a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a328e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3292:	fa23 f002 	lsr.w	r0, r3, r2
 80a3296:	bf18      	it	ne
 80a3298:	4240      	negne	r0, r0
 80a329a:	4770      	bx	lr
 80a329c:	f04f 0000 	mov.w	r0, #0
 80a32a0:	4770      	bx	lr
 80a32a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a32a6:	d105      	bne.n	80a32b4 <__aeabi_d2iz+0x48>
 80a32a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a32ac:	bf08      	it	eq
 80a32ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a32b2:	4770      	bx	lr
 80a32b4:	f04f 0000 	mov.w	r0, #0
 80a32b8:	4770      	bx	lr
 80a32ba:	bf00      	nop

080a32bc <__aeabi_d2uiz>:
 80a32bc:	004a      	lsls	r2, r1, #1
 80a32be:	d211      	bcs.n	80a32e4 <__aeabi_d2uiz+0x28>
 80a32c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a32c4:	d211      	bcs.n	80a32ea <__aeabi_d2uiz+0x2e>
 80a32c6:	d50d      	bpl.n	80a32e4 <__aeabi_d2uiz+0x28>
 80a32c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a32cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a32d0:	d40e      	bmi.n	80a32f0 <__aeabi_d2uiz+0x34>
 80a32d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a32d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a32da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a32de:	fa23 f002 	lsr.w	r0, r3, r2
 80a32e2:	4770      	bx	lr
 80a32e4:	f04f 0000 	mov.w	r0, #0
 80a32e8:	4770      	bx	lr
 80a32ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a32ee:	d102      	bne.n	80a32f6 <__aeabi_d2uiz+0x3a>
 80a32f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a32f4:	4770      	bx	lr
 80a32f6:	f04f 0000 	mov.w	r0, #0
 80a32fa:	4770      	bx	lr

080a32fc <__aeabi_d2f>:
 80a32fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3300:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3304:	bf24      	itt	cs
 80a3306:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a330a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a330e:	d90d      	bls.n	80a332c <__aeabi_d2f+0x30>
 80a3310:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3314:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3318:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a331c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3320:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3324:	bf08      	it	eq
 80a3326:	f020 0001 	biceq.w	r0, r0, #1
 80a332a:	4770      	bx	lr
 80a332c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3330:	d121      	bne.n	80a3376 <__aeabi_d2f+0x7a>
 80a3332:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3336:	bfbc      	itt	lt
 80a3338:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a333c:	4770      	bxlt	lr
 80a333e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3342:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3346:	f1c2 0218 	rsb	r2, r2, #24
 80a334a:	f1c2 0c20 	rsb	ip, r2, #32
 80a334e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3352:	fa20 f002 	lsr.w	r0, r0, r2
 80a3356:	bf18      	it	ne
 80a3358:	f040 0001 	orrne.w	r0, r0, #1
 80a335c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3360:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3364:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3368:	ea40 000c 	orr.w	r0, r0, ip
 80a336c:	fa23 f302 	lsr.w	r3, r3, r2
 80a3370:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3374:	e7cc      	b.n	80a3310 <__aeabi_d2f+0x14>
 80a3376:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a337a:	d107      	bne.n	80a338c <__aeabi_d2f+0x90>
 80a337c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3380:	bf1e      	ittt	ne
 80a3382:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3386:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a338a:	4770      	bxne	lr
 80a338c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3390:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3394:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3398:	4770      	bx	lr
 80a339a:	bf00      	nop

080a339c <__aeabi_frsub>:
 80a339c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a33a0:	e002      	b.n	80a33a8 <__addsf3>
 80a33a2:	bf00      	nop

080a33a4 <__aeabi_fsub>:
 80a33a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a33a8 <__addsf3>:
 80a33a8:	0042      	lsls	r2, r0, #1
 80a33aa:	bf1f      	itttt	ne
 80a33ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a33b0:	ea92 0f03 	teqne	r2, r3
 80a33b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a33b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a33bc:	d06a      	beq.n	80a3494 <__addsf3+0xec>
 80a33be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a33c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a33c6:	bfc1      	itttt	gt
 80a33c8:	18d2      	addgt	r2, r2, r3
 80a33ca:	4041      	eorgt	r1, r0
 80a33cc:	4048      	eorgt	r0, r1
 80a33ce:	4041      	eorgt	r1, r0
 80a33d0:	bfb8      	it	lt
 80a33d2:	425b      	neglt	r3, r3
 80a33d4:	2b19      	cmp	r3, #25
 80a33d6:	bf88      	it	hi
 80a33d8:	4770      	bxhi	lr
 80a33da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a33de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a33e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a33e6:	bf18      	it	ne
 80a33e8:	4240      	negne	r0, r0
 80a33ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a33ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a33f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a33f6:	bf18      	it	ne
 80a33f8:	4249      	negne	r1, r1
 80a33fa:	ea92 0f03 	teq	r2, r3
 80a33fe:	d03f      	beq.n	80a3480 <__addsf3+0xd8>
 80a3400:	f1a2 0201 	sub.w	r2, r2, #1
 80a3404:	fa41 fc03 	asr.w	ip, r1, r3
 80a3408:	eb10 000c 	adds.w	r0, r0, ip
 80a340c:	f1c3 0320 	rsb	r3, r3, #32
 80a3410:	fa01 f103 	lsl.w	r1, r1, r3
 80a3414:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3418:	d502      	bpl.n	80a3420 <__addsf3+0x78>
 80a341a:	4249      	negs	r1, r1
 80a341c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3420:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3424:	d313      	bcc.n	80a344e <__addsf3+0xa6>
 80a3426:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a342a:	d306      	bcc.n	80a343a <__addsf3+0x92>
 80a342c:	0840      	lsrs	r0, r0, #1
 80a342e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3432:	f102 0201 	add.w	r2, r2, #1
 80a3436:	2afe      	cmp	r2, #254	; 0xfe
 80a3438:	d251      	bcs.n	80a34de <__addsf3+0x136>
 80a343a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a343e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3442:	bf08      	it	eq
 80a3444:	f020 0001 	biceq.w	r0, r0, #1
 80a3448:	ea40 0003 	orr.w	r0, r0, r3
 80a344c:	4770      	bx	lr
 80a344e:	0049      	lsls	r1, r1, #1
 80a3450:	eb40 0000 	adc.w	r0, r0, r0
 80a3454:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3458:	f1a2 0201 	sub.w	r2, r2, #1
 80a345c:	d1ed      	bne.n	80a343a <__addsf3+0x92>
 80a345e:	fab0 fc80 	clz	ip, r0
 80a3462:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3466:	ebb2 020c 	subs.w	r2, r2, ip
 80a346a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a346e:	bfaa      	itet	ge
 80a3470:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3474:	4252      	neglt	r2, r2
 80a3476:	4318      	orrge	r0, r3
 80a3478:	bfbc      	itt	lt
 80a347a:	40d0      	lsrlt	r0, r2
 80a347c:	4318      	orrlt	r0, r3
 80a347e:	4770      	bx	lr
 80a3480:	f092 0f00 	teq	r2, #0
 80a3484:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3488:	bf06      	itte	eq
 80a348a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a348e:	3201      	addeq	r2, #1
 80a3490:	3b01      	subne	r3, #1
 80a3492:	e7b5      	b.n	80a3400 <__addsf3+0x58>
 80a3494:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3498:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a349c:	bf18      	it	ne
 80a349e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a34a2:	d021      	beq.n	80a34e8 <__addsf3+0x140>
 80a34a4:	ea92 0f03 	teq	r2, r3
 80a34a8:	d004      	beq.n	80a34b4 <__addsf3+0x10c>
 80a34aa:	f092 0f00 	teq	r2, #0
 80a34ae:	bf08      	it	eq
 80a34b0:	4608      	moveq	r0, r1
 80a34b2:	4770      	bx	lr
 80a34b4:	ea90 0f01 	teq	r0, r1
 80a34b8:	bf1c      	itt	ne
 80a34ba:	2000      	movne	r0, #0
 80a34bc:	4770      	bxne	lr
 80a34be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a34c2:	d104      	bne.n	80a34ce <__addsf3+0x126>
 80a34c4:	0040      	lsls	r0, r0, #1
 80a34c6:	bf28      	it	cs
 80a34c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a34cc:	4770      	bx	lr
 80a34ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a34d2:	bf3c      	itt	cc
 80a34d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a34d8:	4770      	bxcc	lr
 80a34da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a34de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a34e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a34e6:	4770      	bx	lr
 80a34e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a34ec:	bf16      	itet	ne
 80a34ee:	4608      	movne	r0, r1
 80a34f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a34f4:	4601      	movne	r1, r0
 80a34f6:	0242      	lsls	r2, r0, #9
 80a34f8:	bf06      	itte	eq
 80a34fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a34fe:	ea90 0f01 	teqeq	r0, r1
 80a3502:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3506:	4770      	bx	lr

080a3508 <__aeabi_ui2f>:
 80a3508:	f04f 0300 	mov.w	r3, #0
 80a350c:	e004      	b.n	80a3518 <__aeabi_i2f+0x8>
 80a350e:	bf00      	nop

080a3510 <__aeabi_i2f>:
 80a3510:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3514:	bf48      	it	mi
 80a3516:	4240      	negmi	r0, r0
 80a3518:	ea5f 0c00 	movs.w	ip, r0
 80a351c:	bf08      	it	eq
 80a351e:	4770      	bxeq	lr
 80a3520:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3524:	4601      	mov	r1, r0
 80a3526:	f04f 0000 	mov.w	r0, #0
 80a352a:	e01c      	b.n	80a3566 <__aeabi_l2f+0x2a>

080a352c <__aeabi_ul2f>:
 80a352c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3530:	bf08      	it	eq
 80a3532:	4770      	bxeq	lr
 80a3534:	f04f 0300 	mov.w	r3, #0
 80a3538:	e00a      	b.n	80a3550 <__aeabi_l2f+0x14>
 80a353a:	bf00      	nop

080a353c <__aeabi_l2f>:
 80a353c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3540:	bf08      	it	eq
 80a3542:	4770      	bxeq	lr
 80a3544:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3548:	d502      	bpl.n	80a3550 <__aeabi_l2f+0x14>
 80a354a:	4240      	negs	r0, r0
 80a354c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3550:	ea5f 0c01 	movs.w	ip, r1
 80a3554:	bf02      	ittt	eq
 80a3556:	4684      	moveq	ip, r0
 80a3558:	4601      	moveq	r1, r0
 80a355a:	2000      	moveq	r0, #0
 80a355c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3560:	bf08      	it	eq
 80a3562:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3566:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a356a:	fabc f28c 	clz	r2, ip
 80a356e:	3a08      	subs	r2, #8
 80a3570:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3574:	db10      	blt.n	80a3598 <__aeabi_l2f+0x5c>
 80a3576:	fa01 fc02 	lsl.w	ip, r1, r2
 80a357a:	4463      	add	r3, ip
 80a357c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3580:	f1c2 0220 	rsb	r2, r2, #32
 80a3584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3588:	fa20 f202 	lsr.w	r2, r0, r2
 80a358c:	eb43 0002 	adc.w	r0, r3, r2
 80a3590:	bf08      	it	eq
 80a3592:	f020 0001 	biceq.w	r0, r0, #1
 80a3596:	4770      	bx	lr
 80a3598:	f102 0220 	add.w	r2, r2, #32
 80a359c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a35a0:	f1c2 0220 	rsb	r2, r2, #32
 80a35a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a35a8:	fa21 f202 	lsr.w	r2, r1, r2
 80a35ac:	eb43 0002 	adc.w	r0, r3, r2
 80a35b0:	bf08      	it	eq
 80a35b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a35b6:	4770      	bx	lr

080a35b8 <__aeabi_fmul>:
 80a35b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a35bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a35c0:	bf1e      	ittt	ne
 80a35c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a35c6:	ea92 0f0c 	teqne	r2, ip
 80a35ca:	ea93 0f0c 	teqne	r3, ip
 80a35ce:	d06f      	beq.n	80a36b0 <__aeabi_fmul+0xf8>
 80a35d0:	441a      	add	r2, r3
 80a35d2:	ea80 0c01 	eor.w	ip, r0, r1
 80a35d6:	0240      	lsls	r0, r0, #9
 80a35d8:	bf18      	it	ne
 80a35da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a35de:	d01e      	beq.n	80a361e <__aeabi_fmul+0x66>
 80a35e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a35e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a35e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a35ec:	fba0 3101 	umull	r3, r1, r0, r1
 80a35f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a35f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a35f8:	bf3e      	ittt	cc
 80a35fa:	0049      	lslcc	r1, r1, #1
 80a35fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3600:	005b      	lslcc	r3, r3, #1
 80a3602:	ea40 0001 	orr.w	r0, r0, r1
 80a3606:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a360a:	2afd      	cmp	r2, #253	; 0xfd
 80a360c:	d81d      	bhi.n	80a364a <__aeabi_fmul+0x92>
 80a360e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3612:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3616:	bf08      	it	eq
 80a3618:	f020 0001 	biceq.w	r0, r0, #1
 80a361c:	4770      	bx	lr
 80a361e:	f090 0f00 	teq	r0, #0
 80a3622:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3626:	bf08      	it	eq
 80a3628:	0249      	lsleq	r1, r1, #9
 80a362a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a362e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3632:	3a7f      	subs	r2, #127	; 0x7f
 80a3634:	bfc2      	ittt	gt
 80a3636:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a363a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a363e:	4770      	bxgt	lr
 80a3640:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3644:	f04f 0300 	mov.w	r3, #0
 80a3648:	3a01      	subs	r2, #1
 80a364a:	dc5d      	bgt.n	80a3708 <__aeabi_fmul+0x150>
 80a364c:	f112 0f19 	cmn.w	r2, #25
 80a3650:	bfdc      	itt	le
 80a3652:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3656:	4770      	bxle	lr
 80a3658:	f1c2 0200 	rsb	r2, r2, #0
 80a365c:	0041      	lsls	r1, r0, #1
 80a365e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3662:	f1c2 0220 	rsb	r2, r2, #32
 80a3666:	fa00 fc02 	lsl.w	ip, r0, r2
 80a366a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a366e:	f140 0000 	adc.w	r0, r0, #0
 80a3672:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3676:	bf08      	it	eq
 80a3678:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a367c:	4770      	bx	lr
 80a367e:	f092 0f00 	teq	r2, #0
 80a3682:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3686:	bf02      	ittt	eq
 80a3688:	0040      	lsleq	r0, r0, #1
 80a368a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a368e:	3a01      	subeq	r2, #1
 80a3690:	d0f9      	beq.n	80a3686 <__aeabi_fmul+0xce>
 80a3692:	ea40 000c 	orr.w	r0, r0, ip
 80a3696:	f093 0f00 	teq	r3, #0
 80a369a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a369e:	bf02      	ittt	eq
 80a36a0:	0049      	lsleq	r1, r1, #1
 80a36a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a36a6:	3b01      	subeq	r3, #1
 80a36a8:	d0f9      	beq.n	80a369e <__aeabi_fmul+0xe6>
 80a36aa:	ea41 010c 	orr.w	r1, r1, ip
 80a36ae:	e78f      	b.n	80a35d0 <__aeabi_fmul+0x18>
 80a36b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a36b4:	ea92 0f0c 	teq	r2, ip
 80a36b8:	bf18      	it	ne
 80a36ba:	ea93 0f0c 	teqne	r3, ip
 80a36be:	d00a      	beq.n	80a36d6 <__aeabi_fmul+0x11e>
 80a36c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a36c4:	bf18      	it	ne
 80a36c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a36ca:	d1d8      	bne.n	80a367e <__aeabi_fmul+0xc6>
 80a36cc:	ea80 0001 	eor.w	r0, r0, r1
 80a36d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a36d4:	4770      	bx	lr
 80a36d6:	f090 0f00 	teq	r0, #0
 80a36da:	bf17      	itett	ne
 80a36dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a36e0:	4608      	moveq	r0, r1
 80a36e2:	f091 0f00 	teqne	r1, #0
 80a36e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a36ea:	d014      	beq.n	80a3716 <__aeabi_fmul+0x15e>
 80a36ec:	ea92 0f0c 	teq	r2, ip
 80a36f0:	d101      	bne.n	80a36f6 <__aeabi_fmul+0x13e>
 80a36f2:	0242      	lsls	r2, r0, #9
 80a36f4:	d10f      	bne.n	80a3716 <__aeabi_fmul+0x15e>
 80a36f6:	ea93 0f0c 	teq	r3, ip
 80a36fa:	d103      	bne.n	80a3704 <__aeabi_fmul+0x14c>
 80a36fc:	024b      	lsls	r3, r1, #9
 80a36fe:	bf18      	it	ne
 80a3700:	4608      	movne	r0, r1
 80a3702:	d108      	bne.n	80a3716 <__aeabi_fmul+0x15e>
 80a3704:	ea80 0001 	eor.w	r0, r0, r1
 80a3708:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a370c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3710:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3714:	4770      	bx	lr
 80a3716:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a371a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a371e:	4770      	bx	lr

080a3720 <__aeabi_fdiv>:
 80a3720:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3724:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3728:	bf1e      	ittt	ne
 80a372a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a372e:	ea92 0f0c 	teqne	r2, ip
 80a3732:	ea93 0f0c 	teqne	r3, ip
 80a3736:	d069      	beq.n	80a380c <__aeabi_fdiv+0xec>
 80a3738:	eba2 0203 	sub.w	r2, r2, r3
 80a373c:	ea80 0c01 	eor.w	ip, r0, r1
 80a3740:	0249      	lsls	r1, r1, #9
 80a3742:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3746:	d037      	beq.n	80a37b8 <__aeabi_fdiv+0x98>
 80a3748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a374c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3750:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3754:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3758:	428b      	cmp	r3, r1
 80a375a:	bf38      	it	cc
 80a375c:	005b      	lslcc	r3, r3, #1
 80a375e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3762:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3766:	428b      	cmp	r3, r1
 80a3768:	bf24      	itt	cs
 80a376a:	1a5b      	subcs	r3, r3, r1
 80a376c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3770:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3774:	bf24      	itt	cs
 80a3776:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a377a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a377e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3782:	bf24      	itt	cs
 80a3784:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3788:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a378c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3790:	bf24      	itt	cs
 80a3792:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3796:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a379a:	011b      	lsls	r3, r3, #4
 80a379c:	bf18      	it	ne
 80a379e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a37a2:	d1e0      	bne.n	80a3766 <__aeabi_fdiv+0x46>
 80a37a4:	2afd      	cmp	r2, #253	; 0xfd
 80a37a6:	f63f af50 	bhi.w	80a364a <__aeabi_fmul+0x92>
 80a37aa:	428b      	cmp	r3, r1
 80a37ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a37b0:	bf08      	it	eq
 80a37b2:	f020 0001 	biceq.w	r0, r0, #1
 80a37b6:	4770      	bx	lr
 80a37b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a37bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a37c0:	327f      	adds	r2, #127	; 0x7f
 80a37c2:	bfc2      	ittt	gt
 80a37c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a37c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a37cc:	4770      	bxgt	lr
 80a37ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a37d2:	f04f 0300 	mov.w	r3, #0
 80a37d6:	3a01      	subs	r2, #1
 80a37d8:	e737      	b.n	80a364a <__aeabi_fmul+0x92>
 80a37da:	f092 0f00 	teq	r2, #0
 80a37de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a37e2:	bf02      	ittt	eq
 80a37e4:	0040      	lsleq	r0, r0, #1
 80a37e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a37ea:	3a01      	subeq	r2, #1
 80a37ec:	d0f9      	beq.n	80a37e2 <__aeabi_fdiv+0xc2>
 80a37ee:	ea40 000c 	orr.w	r0, r0, ip
 80a37f2:	f093 0f00 	teq	r3, #0
 80a37f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a37fa:	bf02      	ittt	eq
 80a37fc:	0049      	lsleq	r1, r1, #1
 80a37fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3802:	3b01      	subeq	r3, #1
 80a3804:	d0f9      	beq.n	80a37fa <__aeabi_fdiv+0xda>
 80a3806:	ea41 010c 	orr.w	r1, r1, ip
 80a380a:	e795      	b.n	80a3738 <__aeabi_fdiv+0x18>
 80a380c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3810:	ea92 0f0c 	teq	r2, ip
 80a3814:	d108      	bne.n	80a3828 <__aeabi_fdiv+0x108>
 80a3816:	0242      	lsls	r2, r0, #9
 80a3818:	f47f af7d 	bne.w	80a3716 <__aeabi_fmul+0x15e>
 80a381c:	ea93 0f0c 	teq	r3, ip
 80a3820:	f47f af70 	bne.w	80a3704 <__aeabi_fmul+0x14c>
 80a3824:	4608      	mov	r0, r1
 80a3826:	e776      	b.n	80a3716 <__aeabi_fmul+0x15e>
 80a3828:	ea93 0f0c 	teq	r3, ip
 80a382c:	d104      	bne.n	80a3838 <__aeabi_fdiv+0x118>
 80a382e:	024b      	lsls	r3, r1, #9
 80a3830:	f43f af4c 	beq.w	80a36cc <__aeabi_fmul+0x114>
 80a3834:	4608      	mov	r0, r1
 80a3836:	e76e      	b.n	80a3716 <__aeabi_fmul+0x15e>
 80a3838:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a383c:	bf18      	it	ne
 80a383e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3842:	d1ca      	bne.n	80a37da <__aeabi_fdiv+0xba>
 80a3844:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3848:	f47f af5c 	bne.w	80a3704 <__aeabi_fmul+0x14c>
 80a384c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3850:	f47f af3c 	bne.w	80a36cc <__aeabi_fmul+0x114>
 80a3854:	e75f      	b.n	80a3716 <__aeabi_fmul+0x15e>
 80a3856:	bf00      	nop

080a3858 <atoi>:
 80a3858:	220a      	movs	r2, #10
 80a385a:	2100      	movs	r1, #0
 80a385c:	f000 b8fa 	b.w	80a3a54 <strtol>

080a3860 <atol>:
 80a3860:	220a      	movs	r2, #10
 80a3862:	2100      	movs	r1, #0
 80a3864:	f000 b8f6 	b.w	80a3a54 <strtol>

080a3868 <__cxa_atexit>:
 80a3868:	b510      	push	{r4, lr}
 80a386a:	4c05      	ldr	r4, [pc, #20]	; (80a3880 <__cxa_atexit+0x18>)
 80a386c:	4613      	mov	r3, r2
 80a386e:	b12c      	cbz	r4, 80a387c <__cxa_atexit+0x14>
 80a3870:	460a      	mov	r2, r1
 80a3872:	4601      	mov	r1, r0
 80a3874:	2002      	movs	r0, #2
 80a3876:	f3af 8000 	nop.w
 80a387a:	bd10      	pop	{r4, pc}
 80a387c:	4620      	mov	r0, r4
 80a387e:	bd10      	pop	{r4, pc}
 80a3880:	00000000 	.word	0x00000000

080a3884 <memcpy>:
 80a3884:	b510      	push	{r4, lr}
 80a3886:	1e43      	subs	r3, r0, #1
 80a3888:	440a      	add	r2, r1
 80a388a:	4291      	cmp	r1, r2
 80a388c:	d004      	beq.n	80a3898 <memcpy+0x14>
 80a388e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3892:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3896:	e7f8      	b.n	80a388a <memcpy+0x6>
 80a3898:	bd10      	pop	{r4, pc}

080a389a <memset>:
 80a389a:	4603      	mov	r3, r0
 80a389c:	4402      	add	r2, r0
 80a389e:	4293      	cmp	r3, r2
 80a38a0:	d002      	beq.n	80a38a8 <memset+0xe>
 80a38a2:	f803 1b01 	strb.w	r1, [r3], #1
 80a38a6:	e7fa      	b.n	80a389e <memset+0x4>
 80a38a8:	4770      	bx	lr
	...

080a38ac <srand>:
 80a38ac:	b538      	push	{r3, r4, r5, lr}
 80a38ae:	4b12      	ldr	r3, [pc, #72]	; (80a38f8 <srand+0x4c>)
 80a38b0:	4605      	mov	r5, r0
 80a38b2:	681c      	ldr	r4, [r3, #0]
 80a38b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a38b6:	b9d3      	cbnz	r3, 80a38ee <srand+0x42>
 80a38b8:	2018      	movs	r0, #24
 80a38ba:	f7fd fe1b 	bl	80a14f4 <malloc>
 80a38be:	f243 330e 	movw	r3, #13070	; 0x330e
 80a38c2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a38c4:	8003      	strh	r3, [r0, #0]
 80a38c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a38ca:	8043      	strh	r3, [r0, #2]
 80a38cc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a38d0:	8083      	strh	r3, [r0, #4]
 80a38d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a38d6:	80c3      	strh	r3, [r0, #6]
 80a38d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a38dc:	8103      	strh	r3, [r0, #8]
 80a38de:	2305      	movs	r3, #5
 80a38e0:	8143      	strh	r3, [r0, #10]
 80a38e2:	230b      	movs	r3, #11
 80a38e4:	8183      	strh	r3, [r0, #12]
 80a38e6:	2201      	movs	r2, #1
 80a38e8:	2300      	movs	r3, #0
 80a38ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a38ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a38f0:	2200      	movs	r2, #0
 80a38f2:	611d      	str	r5, [r3, #16]
 80a38f4:	615a      	str	r2, [r3, #20]
 80a38f6:	bd38      	pop	{r3, r4, r5, pc}
 80a38f8:	20000090 	.word	0x20000090

080a38fc <strcmp>:
 80a38fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3900:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3904:	2a01      	cmp	r2, #1
 80a3906:	bf28      	it	cs
 80a3908:	429a      	cmpcs	r2, r3
 80a390a:	d0f7      	beq.n	80a38fc <strcmp>
 80a390c:	1ad0      	subs	r0, r2, r3
 80a390e:	4770      	bx	lr

080a3910 <strlen>:
 80a3910:	4603      	mov	r3, r0
 80a3912:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3916:	2a00      	cmp	r2, #0
 80a3918:	d1fb      	bne.n	80a3912 <strlen+0x2>
 80a391a:	1a18      	subs	r0, r3, r0
 80a391c:	3801      	subs	r0, #1
 80a391e:	4770      	bx	lr

080a3920 <strncpy>:
 80a3920:	4603      	mov	r3, r0
 80a3922:	b510      	push	{r4, lr}
 80a3924:	b142      	cbz	r2, 80a3938 <strncpy+0x18>
 80a3926:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a392a:	3a01      	subs	r2, #1
 80a392c:	f803 4b01 	strb.w	r4, [r3], #1
 80a3930:	2c00      	cmp	r4, #0
 80a3932:	d1f7      	bne.n	80a3924 <strncpy+0x4>
 80a3934:	441a      	add	r2, r3
 80a3936:	e000      	b.n	80a393a <strncpy+0x1a>
 80a3938:	bd10      	pop	{r4, pc}
 80a393a:	4293      	cmp	r3, r2
 80a393c:	d002      	beq.n	80a3944 <strncpy+0x24>
 80a393e:	f803 4b01 	strb.w	r4, [r3], #1
 80a3942:	e7fa      	b.n	80a393a <strncpy+0x1a>
 80a3944:	bd10      	pop	{r4, pc}
	...

080a3948 <_strtol_r>:
 80a3948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a394c:	460f      	mov	r7, r1
 80a394e:	4680      	mov	r8, r0
 80a3950:	483f      	ldr	r0, [pc, #252]	; (80a3a50 <_strtol_r+0x108>)
 80a3952:	f8d0 9000 	ldr.w	r9, [r0]
 80a3956:	463d      	mov	r5, r7
 80a3958:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a395c:	eb09 0004 	add.w	r0, r9, r4
 80a3960:	7840      	ldrb	r0, [r0, #1]
 80a3962:	f000 0008 	and.w	r0, r0, #8
 80a3966:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a396a:	b108      	cbz	r0, 80a3970 <_strtol_r+0x28>
 80a396c:	462f      	mov	r7, r5
 80a396e:	e7f2      	b.n	80a3956 <_strtol_r+0xe>
 80a3970:	2c2d      	cmp	r4, #45	; 0x2d
 80a3972:	d103      	bne.n	80a397c <_strtol_r+0x34>
 80a3974:	1cbd      	adds	r5, r7, #2
 80a3976:	787c      	ldrb	r4, [r7, #1]
 80a3978:	2601      	movs	r6, #1
 80a397a:	e003      	b.n	80a3984 <_strtol_r+0x3c>
 80a397c:	2c2b      	cmp	r4, #43	; 0x2b
 80a397e:	bf04      	itt	eq
 80a3980:	787c      	ldrbeq	r4, [r7, #1]
 80a3982:	1cbd      	addeq	r5, r7, #2
 80a3984:	b113      	cbz	r3, 80a398c <_strtol_r+0x44>
 80a3986:	2b10      	cmp	r3, #16
 80a3988:	d10a      	bne.n	80a39a0 <_strtol_r+0x58>
 80a398a:	e05b      	b.n	80a3a44 <_strtol_r+0xfc>
 80a398c:	2c30      	cmp	r4, #48	; 0x30
 80a398e:	d157      	bne.n	80a3a40 <_strtol_r+0xf8>
 80a3990:	7828      	ldrb	r0, [r5, #0]
 80a3992:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3996:	2858      	cmp	r0, #88	; 0x58
 80a3998:	d14d      	bne.n	80a3a36 <_strtol_r+0xee>
 80a399a:	786c      	ldrb	r4, [r5, #1]
 80a399c:	2310      	movs	r3, #16
 80a399e:	3502      	adds	r5, #2
 80a39a0:	2e00      	cmp	r6, #0
 80a39a2:	bf14      	ite	ne
 80a39a4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a39a8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a39ac:	fbbc faf3 	udiv	sl, ip, r3
 80a39b0:	2700      	movs	r7, #0
 80a39b2:	4638      	mov	r0, r7
 80a39b4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a39b8:	eb09 0e04 	add.w	lr, r9, r4
 80a39bc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a39c0:	f01e 0f04 	tst.w	lr, #4
 80a39c4:	d001      	beq.n	80a39ca <_strtol_r+0x82>
 80a39c6:	3c30      	subs	r4, #48	; 0x30
 80a39c8:	e00b      	b.n	80a39e2 <_strtol_r+0x9a>
 80a39ca:	f01e 0e03 	ands.w	lr, lr, #3
 80a39ce:	d01b      	beq.n	80a3a08 <_strtol_r+0xc0>
 80a39d0:	f1be 0f01 	cmp.w	lr, #1
 80a39d4:	bf0c      	ite	eq
 80a39d6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a39da:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a39de:	ebce 0404 	rsb	r4, lr, r4
 80a39e2:	42a3      	cmp	r3, r4
 80a39e4:	dd10      	ble.n	80a3a08 <_strtol_r+0xc0>
 80a39e6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a39ea:	d00a      	beq.n	80a3a02 <_strtol_r+0xba>
 80a39ec:	4550      	cmp	r0, sl
 80a39ee:	d806      	bhi.n	80a39fe <_strtol_r+0xb6>
 80a39f0:	d101      	bne.n	80a39f6 <_strtol_r+0xae>
 80a39f2:	4564      	cmp	r4, ip
 80a39f4:	dc03      	bgt.n	80a39fe <_strtol_r+0xb6>
 80a39f6:	fb03 4000 	mla	r0, r3, r0, r4
 80a39fa:	2701      	movs	r7, #1
 80a39fc:	e001      	b.n	80a3a02 <_strtol_r+0xba>
 80a39fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a3a02:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3a06:	e7d7      	b.n	80a39b8 <_strtol_r+0x70>
 80a3a08:	1c7b      	adds	r3, r7, #1
 80a3a0a:	d10c      	bne.n	80a3a26 <_strtol_r+0xde>
 80a3a0c:	2e00      	cmp	r6, #0
 80a3a0e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a3a12:	bf14      	ite	ne
 80a3a14:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a3a18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3a1c:	f8c8 3000 	str.w	r3, [r8]
 80a3a20:	b92a      	cbnz	r2, 80a3a2e <_strtol_r+0xe6>
 80a3a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3a26:	b106      	cbz	r6, 80a3a2a <_strtol_r+0xe2>
 80a3a28:	4240      	negs	r0, r0
 80a3a2a:	b172      	cbz	r2, 80a3a4a <_strtol_r+0x102>
 80a3a2c:	b107      	cbz	r7, 80a3a30 <_strtol_r+0xe8>
 80a3a2e:	1e69      	subs	r1, r5, #1
 80a3a30:	6011      	str	r1, [r2, #0]
 80a3a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3a36:	2430      	movs	r4, #48	; 0x30
 80a3a38:	2b00      	cmp	r3, #0
 80a3a3a:	d1b1      	bne.n	80a39a0 <_strtol_r+0x58>
 80a3a3c:	2308      	movs	r3, #8
 80a3a3e:	e7af      	b.n	80a39a0 <_strtol_r+0x58>
 80a3a40:	230a      	movs	r3, #10
 80a3a42:	e7ad      	b.n	80a39a0 <_strtol_r+0x58>
 80a3a44:	2c30      	cmp	r4, #48	; 0x30
 80a3a46:	d0a3      	beq.n	80a3990 <_strtol_r+0x48>
 80a3a48:	e7aa      	b.n	80a39a0 <_strtol_r+0x58>
 80a3a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3a4e:	bf00      	nop
 80a3a50:	2000002c 	.word	0x2000002c

080a3a54 <strtol>:
 80a3a54:	4613      	mov	r3, r2
 80a3a56:	460a      	mov	r2, r1
 80a3a58:	4601      	mov	r1, r0
 80a3a5a:	4802      	ldr	r0, [pc, #8]	; (80a3a64 <strtol+0x10>)
 80a3a5c:	6800      	ldr	r0, [r0, #0]
 80a3a5e:	f7ff bf73 	b.w	80a3948 <_strtol_r>
 80a3a62:	bf00      	nop
 80a3a64:	20000090 	.word	0x20000090

080a3a68 <dynalib_user>:
 80a3a68:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a3a78:	00000000                                ....

080a3a7c <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a3a7c:	6b6e6c62 00666e69 00726576 2e362e30     blnkinf.ver.0.6.
 80a3a8c:	2d680033 74616562 00303100 66667562     3.h-beat.10.buff
 80a3a9c:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
 80a3aac:	6c636974 68502065 6e6f746f 69756200     ticle Photon.bui
 80a3abc:	4100646c 31207270 30322033 31203032     ld.Apr 13 2020 1
 80a3acc:	34333a37 0035323a 205d0000 00692500     7:34:25...] .%i.
 80a3adc:	00696c25 696d7548 79746964 2000203a     %li.Humidity: . 
 80a3aec:	54000925 65706d65 75746172 203a6572     %..Temperature: 
 80a3afc:	432a2000 6f430020 63656e6e 676e6974     . *C .Connecting
 80a3b0c:	206f7420 006e6900 006d7770 61007764      to .in.pwm.dw.a
 80a3b1c:	6e490077 696c6176 57482064 646d6320     w.Invalid HW cmd
 80a3b2c:	5200203a 79646165 69702820 203a676e     : .Ready (ping: 
 80a3b3c:	29736d00 6e49002e 696c6176 75612064     .ms)..Invalid au
 80a3b4c:	74206874 6e656b6f 6e6f4300 7463656e     th token.Connect
 80a3b5c:	69616620 2e64656c 646f6320 00203a65      failed. code: .
 80a3b6c:	6b636150 74207465 62206f6f 203a6769     Packet too big: 
 80a3b7c:	61655200 52007964 72696465 69746365     .Ready.Redirecti
 80a3b8c:	7420676e 5300206f 65767265 00203a72     ng to .Server: .
 80a3b9c:	72616548 61656274 69742074 756f656d     Heartbeat timeou
 80a3bac:	6f4c0074 206e6967 656d6974 0074756f     t.Login timeout.
 80a3bbc:	25007776 66332e32 200a0d00 5f202020     vw.%2.3f...    _
 80a3bcc:	20205f5f 20205f5f 20202020 20202020     __  __          
 80a3bdc:	0a0d5f5f 2f202020 29205f20 5f2f202f     __..   / _ )/ /_
 80a3bec:	5f5f5f20 20205f5f 5f2f202f 200a0d5f      _____  / /__.. 
 80a3bfc:	5f202f20 202f2020 2f2f202f 5f202f20      / _  / / // / _
 80a3c0c:	202f5c20 2f5f2720 2f200a0d 5f5f5f5f      \/  '_/.. /____
 80a3c1c:	5c2f5f2f 2f202c5f 5f2f2f5f 5c2f5f2f     /_/\_, /_//_/_/\
 80a3c2c:	0a0d5c5f 20202020 20202020 5f5f5f2f     _\..        /___
 80a3c3c:	3076202f 332e362e 206e6f20 74726150     / v0.6.3 on Part
 80a3c4c:	656c6369 6f685020 0d6e6f74 6c62000a     icle Photon...bl
 80a3c5c:	2d6b6e79 756f6c63 6f632e64 0000006d     ynk-cloud.com...

080a3c6c <_ZL23BlynkWriteHandlerVector>:
 80a3c6c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3c7c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3c8c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3c9c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3cac:	080a1083 080a1083 080a1083 080a1083     ................
 80a3cbc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3ccc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3cdc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3cec:	080a1083 080a1083 080a1083 080a1083     ................
 80a3cfc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d0c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d1c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d2c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d3c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d4c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d5c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d6c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d7c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d8c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3d9c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3dac:	080a1083 080a1083 080a1083 080a1083     ................
 80a3dbc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3dcc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3ddc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3dec:	080a1083 080a1083 080a1083 080a1083     ................
 80a3dfc:	080a1083 080a1083 080a1083 080a1083     ................
 80a3e0c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3e1c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3e2c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3e3c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3e4c:	080a1083 080a1083 080a1083 080a1083     ................
 80a3e5c:	080a1083 080a1083 080a1083 080a1083     ................

080a3e6c <_ZL22BlynkReadHandlerVector>:
 80a3e6c:	080a1081 080a0cb5 080a0ccd 080a1081     ................
 80a3e7c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3e8c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3e9c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3eac:	080a1081 080a1081 080a1081 080a1081     ................
 80a3ebc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3ecc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3edc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3eec:	080a1081 080a1081 080a1081 080a1081     ................
 80a3efc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f0c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f1c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f2c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f3c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f4c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f5c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f6c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f7c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f8c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3f9c:	080a1081 080a1081 080a1081 080a1081     ................
 80a3fac:	080a1081 080a1081 080a1081 080a1081     ................
 80a3fbc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3fcc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3fdc:	080a1081 080a1081 080a1081 080a1081     ................
 80a3fec:	080a1081 080a1081 080a1081 080a1081     ................
 80a3ffc:	080a1081 080a1081 080a1081 080a1081     ................
 80a400c:	080a1081 080a1081 080a1081 080a1081     ................
 80a401c:	080a1081 080a1081 080a1081 080a1081     ................
 80a402c:	080a1081 080a1081 080a1081 080a1081     ................
 80a403c:	080a1081 080a1081 080a1081 080a1081     ................
 80a404c:	080a1081 080a1081 080a1081 080a1081     ................
 80a405c:	080a1081 080a1081 080a1081 080a1081     ................

080a406c <_ZTV7TwoWire>:
	...
 80a4074:	080a153d 080a1587 080a155f 080a153f     =......._...?...
 80a4084:	080a1567 080a156f 080a1577 080a157f     g...o...w.......

080a4094 <_ZTV9IPAddress>:
	...
 80a409c:	080a15d9 080a15c9 080a15cb 64756162     ............baud
 80a40ac:	72655300 006c6169 53425355 61697265     .Serial.USBSeria
 80a40bc:	7400316c 00657079 61726170 6d63006d     l1.type.param.cm
 80a40cc:	64690064 646e6800 72747300 6966006d     d.id.hnd.strm.fi
 80a40dc:	6c00746c 61006c76 61486464 656c646e     lt.lvl.addHandle
 80a40ec:	65720072 65766f6d 646e6148 0072656c     r.removeHandler.
 80a40fc:	6d756e65 646e6148 7372656c 4f534a00     enumHandlers.JSO
 80a410c:	7274534e 4c6d6165 6148676f 656c646e     NStreamLogHandle
 80a411c:	70610072 30250070 20753031 00642500     r.app.%010u .%d.
 80a412c:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a413c:	6400203d 69617465 3d20736c 6e6c0020     = .details = .ln
 80a414c:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a415c:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
 80a416c:	6e726177 72726500 7000726f 63696e61     warn.error.panic
 80a417c:	6c6c6100 00000000                       .all....

080a4184 <_ZTVN5spark12NetworkClassE>:
	...
 80a418c:	080a16a1 080a16ab 080a16b5 080a16bf     ................
 80a419c:	080a16c9 080a16d5 080a16e1 080a16ed     ................
 80a41ac:	080a16f5 080a16ff 080a1709 006e616e     ............nan.
 80a41bc:	0066766f 00666e69                       ovf.inf.

080a41c4 <_ZTV8SPIClass>:
	...
 80a41cc:	080a1a05 080a1a1d                       ........

080a41d4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a41dc:	080a1b49 080a1b4f 080a1f67 080a1b5d     I...O...g...]...
 80a41ec:	080a1b4b                                K...

080a41f0 <_ZTV9TCPClient>:
	...
 80a41f8:	080a0105 080a0145 080a1b05 080a1b1f     ....E...........
 80a4208:	080a1c65 080a1bcf 080a1ba1 080a1b47     e...........G...
 80a4218:	080a1d11 080a1f81 080a1c03 080a1cdd     ................
 80a4228:	080a1e5f 080a1eb1 080a1b2f 080a1e23     _......./...#...
 80a4238:	080a1b81 69726977 5400676e 6c435043     ....wiring.TCPCl
 80a4248:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a4258:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a4268:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a4278:	74637361 00656d69                       asctime.

080a4280 <_ZTV11USARTSerial>:
	...
 80a4288:	080a2001 080a2051 080a205f 080a1785     . ..Q .._ ......
 80a4298:	080a2015 080a2037 080a2023 080a204b     . ..7 ..# ..K ..
 80a42a8:	080a2003 080a2007                       . ... ..

080a42b0 <_ZTV9USBSerial>:
	...
 80a42b8:	080a2109 080a2159 080a2167 080a1785     .!..Y!..g!......
 80a42c8:	080a2145 080a210b 080a2121 080a2153     E!...!..!!..S!..
 80a42d8:	080a2137 080a2105                       7!...!..

080a42e0 <_ZTVN5spark9WiFiClassE>:
	...
 80a42e8:	080a234b 080a2341 080a2337 080a22a9     K#..A#..7#..."..
 80a42f8:	080a232b 080a231f 080a2313 080a230b     +#...#...#...#..
 80a4308:	080a2301 080a22f7 080a22b3              .#..."..."..

080a4314 <_ZSt7nothrow>:
	...

080a4315 <_ctype_>:
 80a4315:	20202000 20202020 28282020 20282828     .         ((((( 
 80a4325:	20202020 20202020 20202020 20202020                     
 80a4335:	10108820 10101010 10101010 10101010      ...............
 80a4345:	04040410 04040404 10040404 10101010     ................
 80a4355:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4365:	01010101 01010101 01010101 10101010     ................
 80a4375:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4385:	02020202 02020202 02020202 10101010     ................
 80a4395:	00000020 00000000 00000000 00000000      ...............
	...

080a4418 <__sf_fake_stdin>:
	...

080a4438 <__sf_fake_stdout>:
	...

080a4458 <__sf_fake_stderr>:
	...
 80a4478:	00000043                                         C.

080a447a <link_const_variable_data_end>:
	...

080a447c <link_constructors_location>:
 80a447c:	080a0db5 	.word	0x080a0db5
 80a4480:	080a106d 	.word	0x080a106d
 80a4484:	080a1071 	.word	0x080a1071
 80a4488:	080a107d 	.word	0x080a107d
 80a448c:	080a10b1 	.word	0x080a10b1
 80a4490:	080a10b5 	.word	0x080a10b5
 80a4494:	080a1691 	.word	0x080a1691
 80a4498:	080a1771 	.word	0x080a1771
 80a449c:	080a19e9 	.word	0x080a19e9
 80a44a0:	080a1ad1 	.word	0x080a1ad1
 80a44a4:	080a1fed 	.word	0x080a1fed
 80a44a8:	080a2355 	.word	0x080a2355
 80a44ac:	080a2659 	.word	0x080a2659
 80a44b0:	080a270d 	.word	0x080a270d
 80a44b4:	080a27d1 	.word	0x080a27d1
 80a44b8:	080a2855 	.word	0x080a2855
 80a44bc:	080a28d9 	.word	0x080a28d9
